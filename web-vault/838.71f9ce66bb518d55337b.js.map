{"version":3,"file":"838.71f9ce66bb518d55337b.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/org-permissions.guard.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/org-redirect.guard.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/entity-events.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/entity-events.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/collection-access-restricted.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.service.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.module.ts","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/attachments.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/attachments.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collection-assignment-dialog/bulk-collection-assignment-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collection-assignment-dialog/bulk-collection-assignment-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collections-dialog/bulk-collections-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collections-dialog/bulk-collections-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/collections.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/collections.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/vault-filter/components/vault-filter.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/shared-organization.module.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/view/event.view.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\n\nimport {\n  canAccessOrgAdmin,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OrganizationPermissionsGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private syncService: SyncService,\n  ) {}\n\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // TODO: We need to fix this issue once and for all.\n    if ((await this.syncService.getLastSync()) == null) {\n      await this.syncService.fullSync(false);\n    }\n\n    const org = await this.organizationService.get(route.params.organizationId);\n    if (org == null) {\n      return this.router.createUrlTree([\"/\"]);\n    }\n\n    if (!org.isOwner && !org.enabled) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"organizationIsDisabled\"),\n      );\n      return this.router.createUrlTree([\"/\"]);\n    }\n\n    const permissionsCallback: (organization: Organization) => boolean =\n      route.data?.organizationPermissions;\n    const hasPermissions = permissionsCallback == null || permissionsCallback(org);\n\n    if (!hasPermissions) {\n      // Handle linkable ciphers for organizations the user only has view access to\n      // https://bitwarden.atlassian.net/browse/EC-203\n      const cipherId =\n        state.root.queryParamMap.get(\"itemId\") || state.root.queryParamMap.get(\"cipherId\");\n      if (cipherId) {\n        return this.router.createUrlTree([\"/vault\"], {\n          queryParams: {\n            itemId: cipherId,\n          },\n        });\n      }\n\n      this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"accessDenied\"));\n      return canAccessOrgAdmin(org)\n        ? this.router.createUrlTree([\"/organizations\", org.id])\n        : this.router.createUrlTree([\"/\"]);\n    }\n\n    return true;\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\n\nimport {\n  canAccessOrgAdmin,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OrganizationRedirectGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private organizationService: OrganizationService,\n  ) {}\n\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const org = await this.organizationService.get(route.params.organizationId);\n\n    const customRedirect = route.data?.autoRedirectCallback;\n    if (customRedirect) {\n      let redirectPath = customRedirect(org);\n      if (typeof redirectPath === \"string\") {\n        redirectPath = [redirectPath];\n      }\n      return this.router.createUrlTree([state.url, ...redirectPath]);\n    }\n\n    if (canAccessOrgAdmin(org)) {\n      return this.router.createUrlTree([\"/organizations\", org.id]);\n    }\n    return this.router.createUrlTree([\"/\"]);\n  }\n}\n","<bit-dialog dialogSize=\"large\" [loading]=\"loading\">\n  <span bitDialogTitle>\n    {{ \"eventLogs\" | i18n }}\n    <small class=\"tw-text-muted\" *ngIf=\"name\">{{ name }}</small>\n  </span>\n  <div bitDialogContent>\n    <form [formGroup]=\"filterFormGroup\" [bitSubmit]=\"refreshEvents\">\n      <div class=\"tw-flex tw-items-center tw-space-x-2\">\n        <div>\n          <label class=\"tw-sr-only\" for=\"start\">{{ \"startDate\" | i18n }}</label>\n          <span>\n            <input\n              bitInput\n              type=\"datetime-local\"\n              id=\"start\"\n              placeholder=\"{{ 'startDate' | i18n }}\"\n              formControlName=\"start\"\n            />\n          </span>\n        </div>\n        <span class=\"tw-mx-2\">-</span>\n        <div>\n          <label class=\"tw-sr-only\" for=\"end\">{{ \"endDate\" | i18n }}</label>\n          <span>\n            <input\n              bitInput\n              type=\"datetime-local\"\n              id=\"end\"\n              placeholder=\"{{ 'endDate' | i18n }}\"\n              formControlName=\"end\"\n            />\n          </span>\n        </div>\n        <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n          <i class=\"bwi bwi-refresh bwi-fw\" aria-hidden=\"true\"></i>\n          {{ \"refresh\" | i18n }}\n        </button>\n      </div>\n    </form>\n    <hr />\n    <div *ngIf=\"!dataSource.data || !dataSource.data.length\">\n      {{ \"noEventsInList\" | i18n }}\n    </div>\n    <bit-table [dataSource]=\"dataSource\" *ngIf=\"dataSource?.data?.length\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"timestamp\" | i18n }}</th>\n          <th bitCell>\n            <span class=\"tw-sr-only\">{{ \"client\" | i18n }}</span>\n          </th>\n          <th bitCell *ngIf=\"showUser\">{{ \"member\" | i18n }}</th>\n          <th bitCell>{{ \"event\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>{{ r.date | date: \"medium\" }}</td>\n          <td bitCell>\n            <i\n              class=\"tw-text-muted bwi bwi-lg {{ r.appIcon }}\"\n              title=\"{{ r.appName }}, {{ r.ip }}\"\n              aria-hidden=\"true\"\n            ></i>\n            <span class=\"tw-sr-only\">{{ r.appName }}, {{ r.ip }}</span>\n          </td>\n          <td bitCell *ngIf=\"showUser\">\n            <span appA11yTitle=\"{{ r.userEmail }}\">{{ r.userName }}</span>\n          </td>\n          <td bitCell [innerHTML]=\"r.message\"></td>\n        </tr>\n      </ng-template>\n    </bit-table>\n    <button\n      bitButton\n      buttonType=\"secondary\"\n      block\n      [bitAction]=\"loadMoreEvents\"\n      type=\"button\"\n      *ngIf=\"continuationToken\"\n    >\n      {{ \"loadMore\" | i18n }}\n    </button>\n  </div>\n  <ng-container bitDialogFooter>\n    <button bitButton buttonType=\"secondary\" type=\"button\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormBuilder } from \"@angular/forms\";\n\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { EventResponse } from \"@bitwarden/common/models/response/event.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { DialogService, TableDataSource } from \"@bitwarden/components\";\n\nimport { EventService } from \"../../../core\";\nimport { SharedModule } from \"../../../shared\";\n\nexport interface EntityEventsDialogParams {\n  entity: \"user\" | \"cipher\";\n  entityId: string;\n\n  organizationId?: string;\n  providerId?: string;\n  showUser?: boolean;\n  name?: string;\n}\n\n@Component({\n  imports: [SharedModule],\n  templateUrl: \"entity-events.component.html\",\n  standalone: true,\n})\nexport class EntityEventsComponent implements OnInit {\n  loading = true;\n  continuationToken: string;\n  protected dataSource = new TableDataSource<EventView>();\n  protected filterFormGroup = this.formBuilder.group({\n    start: [\"\"],\n    end: [\"\"],\n  });\n\n  private orgUsersUserIdMap = new Map<string, any>();\n  private orgUsersIdMap = new Map<string, any>();\n\n  get name() {\n    return this.params.name;\n  }\n\n  get showUser() {\n    return this.params.showUser ?? false;\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: EntityEventsDialogParams,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private eventService: EventService,\n    private platformUtilsService: PlatformUtilsService,\n    private userNamePipe: UserNamePipe,\n    private logService: LogService,\n    private organizationUserService: OrganizationUserService,\n    private formBuilder: FormBuilder,\n    private validationService: ValidationService,\n  ) {}\n\n  async ngOnInit() {\n    const defaultDates = this.eventService.getDefaultDateFilters();\n    this.filterFormGroup.setValue({\n      start: defaultDates[0],\n      end: defaultDates[1],\n    });\n    await this.load();\n  }\n\n  async load() {\n    try {\n      if (this.showUser) {\n        const response = await this.organizationUserService.getAllUsers(this.params.organizationId);\n        response.data.forEach((u) => {\n          const name = this.userNamePipe.transform(u);\n          this.orgUsersIdMap.set(u.id, { name: name, email: u.email });\n          this.orgUsersUserIdMap.set(u.userId, { name: name, email: u.email });\n        });\n      }\n      await this.loadEvents(true);\n    } catch (e) {\n      this.logService.error(e);\n      this.validationService.showError(e);\n    }\n\n    this.loading = false;\n  }\n\n  loadMoreEvents = async () => {\n    await this.loadEvents(false);\n  };\n\n  refreshEvents = async () => {\n    await this.loadEvents(true);\n  };\n\n  private async loadEvents(clearExisting: boolean) {\n    let dates: string[] = null;\n    try {\n      dates = this.eventService.formatDateFilters(\n        this.filterFormGroup.value.start,\n        this.filterFormGroup.value.end,\n      );\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"invalidDateRange\"),\n      );\n      return;\n    }\n\n    let response: ListResponse<EventResponse>;\n    if (this.params.entity === \"user\" && this.params.providerId) {\n      response = await this.apiService.getEventsProviderUser(\n        this.params.providerId,\n        this.params.entityId,\n        dates[0],\n        dates[1],\n        clearExisting ? null : this.continuationToken,\n      );\n    } else if (this.params.entity === \"user\") {\n      response = await this.apiService.getEventsOrganizationUser(\n        this.params.organizationId,\n        this.params.entityId,\n        dates[0],\n        dates[1],\n        clearExisting ? null : this.continuationToken,\n      );\n    } else {\n      response = await this.apiService.getEventsCipher(\n        this.params.entityId,\n        dates[0],\n        dates[1],\n        clearExisting ? null : this.continuationToken,\n      );\n    }\n\n    this.continuationToken = response.continuationToken;\n    const events: EventView[] = await Promise.all(\n      response.data.map(async (r) => {\n        const userId = r.actingUserId == null ? r.userId : r.actingUserId;\n        const eventInfo = await this.eventService.getEventInfo(r);\n        const user =\n          this.showUser && userId != null && this.orgUsersUserIdMap.has(userId)\n            ? this.orgUsersUserIdMap.get(userId)\n            : null;\n\n        return new EventView({\n          message: eventInfo.message,\n          humanReadableMessage: eventInfo.humanReadableMessage,\n          appIcon: eventInfo.appIcon,\n          appName: eventInfo.appName,\n          userId: userId,\n          userName: user != null ? user.name : this.showUser ? this.i18nService.t(\"unknown\") : null,\n          userEmail: user != null ? user.email : this.showUser ? \"\" : null,\n          date: r.date,\n          ip: r.ipAddress,\n          type: r.type,\n          installationId: r.installationId,\n          systemUser: r.systemUser,\n          serviceAccountId: r.serviceAccountId,\n        });\n      }),\n    );\n\n    if (!clearExisting && this.dataSource.data != null && this.dataSource.data.length > 0) {\n      this.dataSource.data = this.dataSource.data.concat(events);\n    } else {\n      this.dataSource.data = events;\n    }\n  }\n}\n\n/**\n * Strongly typed helper to open a EntityEventsComponent as a dialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport const openEntityEventsDialog = (\n  dialogService: DialogService,\n  config: DialogConfig<EntityEventsDialogParams>,\n) => {\n  return dialogService.open<void, EntityEventsDialogParams>(EntityEventsComponent, config);\n};\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport {\n  catchError,\n  combineLatest,\n  concatMap,\n  from,\n  map,\n  Observable,\n  of,\n  shareReplay,\n  Subject,\n  takeUntil,\n} from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { CollectionAdminService } from \"../../../vault/core/collection-admin.service\";\nimport { CollectionAdminView } from \"../../../vault/core/views/collection-admin.view\";\nimport { InternalGroupService as GroupService, GroupView } from \"../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../shared/components/access-selector\";\n\n/**\n * Indices for the available tabs in the dialog\n */\nexport enum GroupAddEditTabType {\n  Info = 0,\n  Members = 1,\n  Collections = 2,\n}\n\nexport interface GroupAddEditDialogParams {\n  /**\n   * ID of the organization the group belongs to\n   */\n  organizationId: string;\n\n  /**\n   * Optional ID of the group being modified\n   */\n  groupId?: string;\n\n  /**\n   * Tab to open when the dialog is open.\n   * Defaults to Group Info\n   */\n  initialTab?: GroupAddEditTabType;\n}\n\nexport enum GroupAddEditDialogResultType {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n}\n\n/**\n * Strongly typed helper to open a groupAddEditDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport const openGroupAddEditDialog = (\n  dialogService: DialogService,\n  config: DialogConfig<GroupAddEditDialogParams>,\n) => {\n  return dialogService.open<GroupAddEditDialogResultType, GroupAddEditDialogParams>(\n    GroupAddEditComponent,\n    config,\n  );\n};\n\n@Component({\n  selector: \"app-group-add-edit\",\n  templateUrl: \"group-add-edit.component.html\",\n})\nexport class GroupAddEditComponent implements OnInit, OnDestroy {\n  private organization$ = this.organizationService\n    .get$(this.organizationId)\n    .pipe(shareReplay({ refCount: true }));\n  protected flexibleCollectionsEnabled$ = this.organization$.pipe(\n    map((o) => o?.flexibleCollections),\n  );\n  private flexibleCollectionsV1Enabled$ = this.configService.getFeatureFlag$(\n    FeatureFlag.FlexibleCollectionsV1,\n  );\n\n  protected PermissionMode = PermissionMode;\n  protected ResultType = GroupAddEditDialogResultType;\n\n  tabIndex: GroupAddEditTabType;\n  loading = true;\n  title: string;\n  collections: AccessItemView[] = [];\n  members: Array<AccessItemView & { userId: UserId }> = [];\n  group: GroupView;\n\n  groupForm = this.formBuilder.group({\n    accessAll: [false],\n    name: [\"\", [Validators.required, Validators.maxLength(100)]],\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    members: [[] as AccessItemValue[]],\n    collections: [[] as AccessItemValue[]],\n  });\n\n  get groupId(): string | undefined {\n    return this.params.groupId;\n  }\n\n  get organizationId(): string {\n    return this.params.organizationId;\n  }\n\n  protected get editMode(): boolean {\n    return this.groupId != null;\n  }\n\n  private destroy$ = new Subject<void>();\n\n  private orgCollections$ = from(this.collectionAdminService.getAll(this.organizationId)).pipe(\n    shareReplay({ refCount: true, bufferSize: 1 }),\n  );\n\n  private get orgMembers$(): Observable<Array<AccessItemView & { userId: UserId }>> {\n    return from(this.organizationUserService.getAllUsers(this.organizationId)).pipe(\n      map((response) =>\n        response.data.map((m) => ({\n          id: m.id,\n          type: AccessItemType.Member,\n          email: m.email,\n          role: m.type,\n          listName: m.name?.length > 0 ? `${m.name} (${m.email})` : m.email,\n          labelName: m.name || m.email,\n          status: m.status,\n          userId: m.userId as UserId,\n        })),\n      ),\n    );\n  }\n\n  private groupDetails$: Observable<GroupView | undefined> = of(this.editMode).pipe(\n    concatMap((editMode) => {\n      if (!editMode) {\n        return of(undefined);\n      }\n\n      return combineLatest([\n        this.groupService.get(this.organizationId, this.groupId),\n        this.apiService.getGroupUsers(this.organizationId, this.groupId),\n      ]).pipe(\n        map(([groupView, users]) => {\n          groupView.members = users;\n          return groupView;\n        }),\n        catchError((e: unknown) => {\n          if (e instanceof ErrorResponse) {\n            this.logService.error(e.message);\n          } else {\n            this.logService.error(e.toString());\n          }\n          return of(undefined);\n        }),\n      );\n    }),\n    shareReplay({ refCount: true, bufferSize: 1 }),\n  );\n\n  protected allowAdminAccessToAllCollectionItems$ = combineLatest([\n    this.organization$,\n    this.flexibleCollectionsV1Enabled$,\n  ]).pipe(\n    map(([organization, flexibleCollectionsV1Enabled]) => {\n      if (!flexibleCollectionsV1Enabled || !organization.flexibleCollections) {\n        return true;\n      }\n\n      return organization.allowAdminAccessToAllCollectionItems;\n    }),\n  );\n\n  protected canAssignAccessToAnyCollection$ = combineLatest([\n    this.organization$,\n    this.flexibleCollectionsV1Enabled$,\n    this.allowAdminAccessToAllCollectionItems$,\n  ]).pipe(\n    map(\n      ([org, flexibleCollectionsV1Enabled, allowAdminAccessToAllCollectionItems]) =>\n        org.canEditAnyCollection(flexibleCollectionsV1Enabled) ||\n        // Manage Groups custom permission cannot edit any collection but they can assign access from this dialog\n        // if permitted by collection management settings\n        (org.permissions.manageGroups && allowAdminAccessToAllCollectionItems),\n    ),\n  );\n\n  protected cannotAddSelfToGroup$ = combineLatest([\n    this.allowAdminAccessToAllCollectionItems$,\n    this.groupDetails$,\n  ]).pipe(map(([allowAdminAccess, groupDetails]) => !allowAdminAccess && groupDetails != null));\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: GroupAddEditDialogParams,\n    private dialogRef: DialogRef<GroupAddEditDialogResultType>,\n    private apiService: ApiService,\n    private organizationUserService: OrganizationUserService,\n    private groupService: GroupService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private logService: LogService,\n    private formBuilder: FormBuilder,\n    private changeDetectorRef: ChangeDetectorRef,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n    private configService: ConfigService,\n    private accountService: AccountService,\n    private collectionAdminService: CollectionAdminService,\n  ) {\n    this.tabIndex = params.initialTab ?? GroupAddEditTabType.Info;\n  }\n\n  ngOnInit() {\n    this.loading = true;\n    this.title = this.i18nService.t(this.editMode ? \"editGroup\" : \"newGroup\");\n\n    combineLatest([\n      this.orgCollections$,\n      this.orgMembers$,\n      this.groupDetails$,\n      this.cannotAddSelfToGroup$,\n      this.accountService.activeAccount$,\n      this.organization$,\n      this.flexibleCollectionsV1Enabled$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        ([\n          collections,\n          members,\n          group,\n          restrictGroupAccess,\n          activeAccount,\n          organization,\n          flexibleCollectionsV1Enabled,\n        ]) => {\n          this.members = members;\n          this.group = group;\n          this.collections = mapToAccessItemViews(\n            collections,\n            organization,\n            flexibleCollectionsV1Enabled,\n            group,\n          );\n\n          if (this.group != undefined) {\n            // Must detect changes so that AccessSelector @Inputs() are aware of the latest\n            // collections/members set above, otherwise no selected values will be patched below\n            this.changeDetectorRef.detectChanges();\n\n            this.groupForm.patchValue({\n              name: this.group.name,\n              externalId: this.group.externalId,\n              accessAll: this.group.accessAll,\n              members: this.group.members.map((m) => ({\n                id: m,\n                type: AccessItemType.Member,\n              })),\n              collections: mapToAccessSelections(group, this.collections),\n            });\n          }\n\n          // If the current user is not already in the group and cannot add themselves, remove them from the list\n          if (restrictGroupAccess) {\n            // organizationUserId may be null if accessing via a provider\n            const organizationUserId = this.members.find((m) => m.userId === activeAccount.id)?.id;\n            const isAlreadyInGroup = this.groupForm.value.members.some(\n              (m) => m.id === organizationUserId,\n            );\n\n            if (organizationUserId != null && !isAlreadyInGroup) {\n              this.members = this.members.filter((m) => m.id !== organizationUserId);\n            }\n          }\n\n          this.loading = false;\n        },\n      );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.groupForm.markAllAsTouched();\n\n    if (this.groupForm.invalid) {\n      if (this.tabIndex !== GroupAddEditTabType.Info) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"groupInfo\")),\n        );\n      }\n      return;\n    }\n\n    const groupView = new GroupView();\n    groupView.id = this.groupId;\n    groupView.organizationId = this.organizationId;\n\n    const formValue = this.groupForm.value;\n    groupView.name = formValue.name;\n    groupView.accessAll = formValue.accessAll;\n    groupView.members = formValue.members?.map((m) => m.id) ?? [];\n\n    if (!groupView.accessAll) {\n      groupView.collections = formValue.collections.map((c) => convertToSelectionView(c));\n    }\n\n    await this.groupService.save(groupView);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(this.editMode ? \"editedGroupId\" : \"createdGroupId\", formValue.name),\n    );\n\n    this.dialogRef.close(GroupAddEditDialogResultType.Saved);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: this.group.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    await this.groupService.delete(this.organizationId, this.groupId);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"deletedGroupId\", this.group.name),\n    );\n    this.dialogRef.close(GroupAddEditDialogResultType.Deleted);\n  };\n}\n\n/**\n * Maps the group's current collection access to AccessItemValues to populate the access-selector's FormControl\n */\nfunction mapToAccessSelections(group: GroupView, items: AccessItemView[]): AccessItemValue[] {\n  return (\n    group.collections\n      // The FormControl value only represents editable collection access - exclude readonly access selections\n      .filter((selection) => !items.find((item) => item.id == selection.id).readonly)\n      .map((gc) => ({\n        id: gc.id,\n        type: AccessItemType.Collection,\n        permission: convertToPermission(gc),\n      }))\n  );\n}\n\n/**\n * Maps the organization's collections to AccessItemViews to populate the access-selector's multi-select\n */\nfunction mapToAccessItemViews(\n  collections: CollectionAdminView[],\n  organization: Organization,\n  flexibleCollectionsV1Enabled: boolean,\n  group?: GroupView,\n): AccessItemView[] {\n  return (\n    collections\n      .map<AccessItemView>((c) => {\n        const accessSelection = group?.collections.find((access) => access.id == c.id) ?? undefined;\n        return {\n          id: c.id,\n          type: AccessItemType.Collection,\n          labelName: c.name,\n          listName: c.name,\n          readonly: !c.canEditGroupAccess(organization, flexibleCollectionsV1Enabled),\n          readonlyPermission: accessSelection ? convertToPermission(accessSelection) : undefined,\n        };\n      })\n      // Remove any collection views that are not already assigned and that we don't have permissions to assign access to\n      .filter((item) => !item.readonly || group?.collections.some((access) => access.id == item.id))\n  );\n}\n","<form [formGroup]=\"groupForm\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span *ngIf=\"editMode\" class=\"tw-text-sm tw-normal-case tw-text-muted\">{{\n        group?.name\n      }}</span>\n    </span>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n      </div>\n\n      <bit-tab-group *ngIf=\"!loading\" [(selectedIndex)]=\"tabIndex\">\n        <bit-tab label=\"{{ 'groupInfo' | i18n }}\">\n          <bit-form-field>\n            <bit-label>{{ \"name\" | i18n }}</bit-label>\n            <input bitInput appAutofocus type=\"text\" formControlName=\"name\" />\n            <bit-hint>{{ \"characterMaximum\" | i18n: 100 }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'members' | i18n }}\">\n          <p>\n            {{ \"editGroupMembersDesc\" | i18n }}\n            <span *ngIf=\"cannotAddSelfToGroup$ | async\">\n              {{ \"restrictedGroupAccessDesc\" | i18n }}\n            </span>\n          </p>\n          <bit-access-selector\n            formControlName=\"members\"\n            [items]=\"members\"\n            [showMemberRoles]=\"true\"\n            [permissionMode]=\"PermissionMode.Hidden\"\n            [columnHeader]=\"'member' | i18n\"\n            [selectorLabelText]=\"'selectMembers' | i18n\"\n            [emptySelectionText]=\"'noMembersAdded' | i18n\"\n            [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n          ></bit-access-selector>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'collections' | i18n }}\">\n          <p>\n            {{ \"editGroupCollectionsDesc\" | i18n }}\n            <span *ngIf=\"!(canAssignAccessToAnyCollection$ | async)\">\n              {{ \"restrictedCollectionAssignmentDesc\" | i18n }}\n            </span>\n          </p>\n          <div *ngIf=\"!(flexibleCollectionsEnabled$ | async)\" class=\"tw-my-3\">\n            <input type=\"checkbox\" formControlName=\"accessAll\" id=\"accessAll\" />\n            <label class=\"tw-mb-0 tw-text-lg\" for=\"accessAll\">{{\n              \"accessAllCollectionsDesc\" | i18n\n            }}</label>\n            <p class=\"tw-my-0 tw-text-muted\">{{ \"accessAllCollectionsHelp\" | i18n }}</p>\n          </div>\n          <ng-container *ngIf=\"!groupForm.value.accessAll\">\n            <bit-access-selector\n              formControlName=\"collections\"\n              [items]=\"collections\"\n              [permissionMode]=\"PermissionMode.Edit\"\n              [columnHeader]=\"'collection' | i18n\"\n              [selectorLabelText]=\"'selectCollections' | i18n\"\n              [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n              [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n            ></bit-access-selector>\n          </ng-container>\n        </bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" bitFormButton type=\"submit\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button bitButton buttonType=\"secondary\" type=\"button\" [bitDialogClose]=\"ResultType.Canceled\">\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        buttonType=\"danger\"\n        bitIconButton=\"bwi-trash\"\n        bitFormButton\n        [bitAction]=\"delete\"\n        [appA11yTitle]=\"'delete' | i18n\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<app-header>\n  <bit-search\n    [placeholder]=\"'searchGroups' | i18n\"\n    [(ngModel)]=\"searchText\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <button bitButton type=\"button\" buttonType=\"primary\" (click)=\"add()\">\n    <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n    {{ \"newGroup\" | i18n }}\n  </button>\n</app-header>\n\n<ng-container *ngIf=\"loading\">\n  <i\n    class=\"bwi bwi-spinner bwi-spin text-muted\"\n    title=\"{{ 'loading' | i18n }}\"\n    aria-hidden=\"true\"\n  ></i>\n  <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n</ng-container>\n<ng-container *ngIf=\"!loading && visibleGroups\">\n  <p *ngIf=\"!visibleGroups.length\">{{ \"noGroupsInList\" | i18n }}</p>\n  <bit-table\n    *ngIf=\"visibleGroups.length\"\n    infinite-scroll\n    [infiniteScrollDistance]=\"1\"\n    [infiniteScrollDisabled]=\"!isPaging()\"\n    (scrolled)=\"loadMore()\"\n  >\n    <ng-container header>\n      <tr>\n        <th bitCell class=\"tw-w-20\">\n          <input\n            type=\"checkbox\"\n            bitCheckbox\n            class=\"tw-mr-2\"\n            (change)=\"toggleAllVisible($event)\"\n            id=\"selectAll\"\n          />\n          <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n            \"all\" | i18n\n          }}</label>\n        </th>\n        <th bitCell>{{ \"name\" | i18n }}</th>\n        <th bitCell>{{ \"collections\" | i18n }}</th>\n        <th bitCell class=\"tw-w-10\">\n          <button\n            [bitMenuTriggerFor]=\"headerMenu\"\n            type=\"button\"\n            bitIconButton=\"bwi-ellipsis-v\"\n            size=\"small\"\n            appA11yTitle=\"{{ 'options' | i18n }}\"\n          ></button>\n\n          <bit-menu #headerMenu>\n            <button type=\"button\" bitMenuItem (click)=\"deleteAllSelected()\">\n              <span class=\"tw-text-danger\"\n                ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n              >\n            </button>\n          </bit-menu>\n        </th>\n      </tr>\n    </ng-container>\n    <ng-template body>\n      <tr bitRow *ngFor=\"let g of visibleGroups\">\n        <td bitCell (click)=\"check(g)\" class=\"tw-cursor-pointer\">\n          <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"g.checked\" />\n        </td>\n        <td bitCell class=\"tw-cursor-pointer tw-font-bold\" (click)=\"edit(g)\">\n          <button type=\"button\" bitLink>\n            {{ g.details.name }}\n          </button>\n        </td>\n        <td bitCell (click)=\"edit(g, ModalTabType.Collections)\" class=\"tw-cursor-pointer\">\n          <bit-badge-list\n            *ngIf=\"!g.details.accessAll\"\n            [items]=\"g.collectionNames\"\n            [maxItems]=\"3\"\n            variant=\"secondary\"\n          ></bit-badge-list>\n          <span *ngIf=\"g.details.accessAll\">{{ \"all\" | i18n }}</span>\n        </td>\n        <td bitCell>\n          <button\n            [bitMenuTriggerFor]=\"rowMenu\"\n            type=\"button\"\n            bitIconButton=\"bwi-ellipsis-v\"\n            size=\"small\"\n            appA11yTitle=\"{{ 'options' | i18n }}\"\n          ></button>\n\n          <bit-menu #rowMenu>\n            <button type=\"button\" bitMenuItem (click)=\"edit(g)\">\n              <i aria-hidden=\"true\" class=\"bwi bwi-pencil-square\"></i> {{ \"editInfo\" | i18n }}\n            </button>\n            <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Members)\">\n              <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"members\" | i18n }}\n            </button>\n            <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Collections)\">\n              <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n            </button>\n            <button type=\"button\" bitMenuItem (click)=\"delete(g)\">\n              <span class=\"tw-text-danger\"\n                ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n              >\n            </button>\n          </bit-menu>\n        </td>\n      </tr>\n    </ng-template>\n  </bit-table>\n</ng-container>\n<ng-template #addEdit></ng-template>\n","import { Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concatMap,\n  from,\n  lastValueFrom,\n  map,\n  Subject,\n  switchMap,\n  takeUntil,\n  tap,\n} from \"rxjs\";\nimport { first } from \"rxjs/operators\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport {\n  CollectionDetailsResponse,\n  CollectionResponse,\n} from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { InternalGroupService as GroupService, GroupView } from \"../core\";\n\nimport {\n  GroupAddEditDialogResultType,\n  GroupAddEditTabType,\n  openGroupAddEditDialog,\n} from \"./group-add-edit.component\";\n\ntype CollectionViewMap = {\n  [id: string]: CollectionView;\n};\n\ntype GroupDetailsRow = {\n  /**\n   * Group Id (used for searching)\n   */\n  id: string;\n\n  /**\n   * Group name (used for searching)\n   */\n  name: string;\n\n  /**\n   * Details used for displaying group information\n   */\n  details: GroupView;\n\n  /**\n   * True if the group is selected in the table\n   */\n  checked?: boolean;\n\n  /**\n   * A list of collection names the group has access to\n   */\n  collectionNames?: string[];\n};\n\n@Component({\n  selector: \"app-org-groups\",\n  templateUrl: \"groups.component.html\",\n})\nexport class GroupsComponent implements OnInit, OnDestroy {\n  @ViewChild(\"addEdit\", { read: ViewContainerRef, static: true }) addEditModalRef: ViewContainerRef;\n  @ViewChild(\"usersTemplate\", { read: ViewContainerRef, static: true })\n  usersModalRef: ViewContainerRef;\n\n  loading = true;\n  organizationId: string;\n  groups: GroupDetailsRow[];\n\n  protected didScroll = false;\n  protected pageSize = 100;\n  protected ModalTabType = GroupAddEditTabType;\n\n  private pagedGroupsCount = 0;\n  private pagedGroups: GroupDetailsRow[];\n  private searchedGroups: GroupDetailsRow[];\n  private _searchText$ = new BehaviorSubject<string>(\"\");\n  private destroy$ = new Subject<void>();\n  private refreshGroups$ = new BehaviorSubject<void>(null);\n  private isSearching: boolean = false;\n\n  get searchText() {\n    return this._searchText$.value;\n  }\n  set searchText(value: string) {\n    this._searchText$.next(value);\n    // Manually update as we are not using the search pipe in the template\n    this.updateSearchedGroups();\n  }\n\n  /**\n   * The list of groups that should be visible in the table.\n   * This is needed as there are two modes (paging/searching) and\n   * we need a reference to the currently visible groups for\n   * the Select All checkbox\n   */\n  get visibleGroups(): GroupDetailsRow[] {\n    if (this.isPaging()) {\n      return this.pagedGroups;\n    }\n    if (this.isSearching) {\n      return this.searchedGroups;\n    }\n    return this.groups;\n  }\n\n  constructor(\n    private apiService: ApiService,\n    private groupService: GroupService,\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private searchService: SearchService,\n    private logService: LogService,\n    private collectionService: CollectionService,\n    private searchPipe: SearchPipe,\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        tap((params) => (this.organizationId = params.organizationId)),\n        switchMap(() =>\n          combineLatest([\n            // collectionMap\n            from(this.apiService.getCollections(this.organizationId)).pipe(\n              concatMap((response) => this.toCollectionMap(response)),\n            ),\n            // groups\n            this.refreshGroups$.pipe(\n              switchMap(() => this.groupService.getAll(this.organizationId)),\n            ),\n          ]),\n        ),\n        map(([collectionMap, groups]) => {\n          return groups\n            .sort(Utils.getSortFunction(this.i18nService, \"name\"))\n            .map<GroupDetailsRow>((g) => ({\n              id: g.id,\n              name: g.name,\n              details: g,\n              checked: false,\n              collectionNames: g.collections\n                .map((c) => collectionMap[c.id]?.name)\n                .sort(this.i18nService.collator?.compare),\n            }));\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((groups) => {\n        this.groups = groups;\n        this.resetPaging();\n        this.updateSearchedGroups();\n        this.loading = false;\n      });\n\n    this.route.queryParams\n      .pipe(\n        first(),\n        concatMap(async (qParams) => {\n          this.searchText = qParams.search;\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n\n    this._searchText$\n      .pipe(\n        switchMap((searchText) => this.searchService.isSearchable(searchText)),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((isSearchable) => {\n        this.isSearching = isSearchable;\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  loadMore() {\n    if (!this.groups || this.groups.length <= this.pageSize) {\n      return;\n    }\n    const pagedLength = this.pagedGroups.length;\n    let pagedSize = this.pageSize;\n    if (pagedLength === 0 && this.pagedGroupsCount > this.pageSize) {\n      pagedSize = this.pagedGroupsCount;\n    }\n    if (this.groups.length > pagedLength) {\n      this.pagedGroups = this.pagedGroups.concat(\n        this.groups.slice(pagedLength, pagedLength + pagedSize),\n      );\n    }\n    this.pagedGroupsCount = this.pagedGroups.length;\n    this.didScroll = this.pagedGroups.length > this.pageSize;\n  }\n\n  async edit(\n    group: GroupDetailsRow,\n    startingTabIndex: GroupAddEditTabType = GroupAddEditTabType.Info,\n  ) {\n    const dialogRef = openGroupAddEditDialog(this.dialogService, {\n      data: {\n        initialTab: startingTabIndex,\n        organizationId: this.organizationId,\n        groupId: group != null ? group.details.id : null,\n      },\n    });\n\n    const result = await lastValueFrom(dialogRef.closed);\n\n    if (result == GroupAddEditDialogResultType.Saved) {\n      this.refreshGroups$.next();\n    } else if (result == GroupAddEditDialogResultType.Deleted) {\n      this.removeGroup(group.details.id);\n    }\n  }\n\n  add() {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.edit(null);\n  }\n\n  async delete(groupRow: GroupDetailsRow) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: groupRow.details.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.delete(this.organizationId, groupRow.details.id);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedGroupId\", groupRow.details.name),\n      );\n      this.removeGroup(groupRow.details.id);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteAllSelected() {\n    const groupsToDelete = this.groups.filter((g) => g.checked);\n\n    if (groupsToDelete.length == 0) {\n      return;\n    }\n\n    const deleteMessage = groupsToDelete.map((g) => g.details.name).join(\", \");\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"deleteMultipleGroupsConfirmation\",\n        placeholders: [groupsToDelete.length.toString()],\n      },\n      content: deleteMessage,\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.deleteMany(\n        this.organizationId,\n        groupsToDelete.map((g) => g.details.id),\n      );\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedManyGroups\", groupsToDelete.length.toString()),\n      );\n\n      groupsToDelete.forEach((g) => this.removeGroup(g.details.id));\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  resetPaging() {\n    this.pagedGroups = [];\n    this.loadMore();\n  }\n\n  check(groupRow: GroupDetailsRow) {\n    groupRow.checked = !groupRow.checked;\n  }\n\n  toggleAllVisible(event: Event) {\n    this.visibleGroups.forEach((g) => (g.checked = (event.target as HTMLInputElement).checked));\n  }\n\n  isPaging() {\n    const searching = this.isSearching;\n    if (searching && this.didScroll) {\n      this.resetPaging();\n    }\n    return !searching && this.groups && this.groups.length > this.pageSize;\n  }\n\n  private removeGroup(id: string) {\n    const index = this.groups.findIndex((g) => g.details.id === id);\n    if (index > -1) {\n      this.groups.splice(index, 1);\n      this.resetPaging();\n      this.updateSearchedGroups();\n    }\n  }\n\n  private async toCollectionMap(response: ListResponse<CollectionResponse>) {\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse)),\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    // Convert to an object using collection Ids as keys for faster name lookups\n    const collectionMap: CollectionViewMap = {};\n    decryptedCollections.forEach((c) => (collectionMap[c.id] = c));\n\n    return collectionMap;\n  }\n\n  private updateSearchedGroups() {\n    if (this.isSearching) {\n      // Making use of the pipe in the component as we need know which groups where filtered\n      this.searchedGroups = this.searchPipe.transform(\n        this.groups,\n        this.searchText,\n        (group) => group.details.name,\n        (group) => group.details.id,\n      );\n    }\n  }\n}\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { ButtonModule, NoItemsModule, svgIcon } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../shared\";\nimport { CollectionDialogTabType } from \"../components/collection-dialog\";\n\nconst icon = svgIcon`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"10 -10 120 140\" fill=\"none\">\n  <rect class=\"tw-stroke-secondary-600\" width=\"134\" height=\"86\" x=\"3\" y=\"31.485\" stroke-width=\"6\" rx=\"11\"/>\n  <path class=\"tw-fill-secondary-600\" d=\"M123.987 20.15H14.779a3.114 3.114 0 0 1-2.083-.95 3.036 3.036 0 0 1 0-4.208 3.125 3.125 0 0 1 2.083-.951h109.208c.792.043 1.536.38 2.083.95a3.035 3.035 0 0 1 0 4.208 3.115 3.115 0 0 1-2.083.95Zm-6.649-14.041h-95.91a3.114 3.114 0 0 1-2.082-.95 3.036 3.036 0 0 1-.848-2.105c0-.782.306-1.538.848-2.104A3.125 3.125 0 0 1 21.43 0h95.909c.791.043 1.535.38 2.082.95.547.57.849 1.322.849 2.104a3.05 3.05 0 0 1-.849 2.104 3.115 3.115 0 0 1-2.082.95ZM95.132 74.407A42.317 42.317 0 0 0 83.59 65.43l8.799-8.657a1.59 1.59 0 0 0 .004-2.27 1.641 1.641 0 0 0-2.298-.004l-9.64 9.479a28.017 28.017 0 0 0-10.483-2.13c-14.323 0-24.814 12.342-25.298 12.89a2.431 2.431 0 0 0-.675 1.64c-.01.612.215 1.203.626 1.66a43.981 43.981 0 0 0 11.873 9.485l-8.806 8.658a1.601 1.601 0 0 0-.499 1.138 1.602 1.602 0 0 0 1.008 1.5 1.651 1.651 0 0 0 1.255-.009c.199-.085.379-.205.528-.359l9.634-9.443a27.16 27.16 0 0 0 10.359 2.158c14.323 0 24.753-12.086 25.23-12.63a2.983 2.983 0 0 0-.078-4.128h.002ZM49.204 77.82a1.82 1.82 0 0 1-.43-.6 1.767 1.767 0 0 1-.152-.72 1.778 1.778 0 0 1 .582-1.32c3.857-3.564 11.782-9.686 20.77-9.676 2.564.037 5.105.508 7.508 1.395l-3.291 3.235a7.793 7.793 0 0 0-5.02-1.226 7.746 7.746 0 0 0-4.676 2.18 7.528 7.528 0 0 0-1 9.563l-4.199 4.143a43.135 43.135 0 0 1-10.092-6.974Zm26.059-1.318a5.19 5.19 0 0 1-1.557 3.68 5.326 5.326 0 0 1-3.733 1.521c-.82-.005-1.63-.2-2.359-.57l7.067-6.952c.377.718.575 1.513.582 2.321Zm-10.58 0a5.136 5.136 0 0 1 .673-2.555 5.204 5.204 0 0 1 1.862-1.897 5.302 5.302 0 0 1 5.172-.146l-7.096 6.977a5.06 5.06 0 0 1-.61-2.379Zm26.053 1.331c-3.857 3.56-11.779 9.677-20.763 9.677a22.723 22.723 0 0 1-7.454-1.369l3.292-3.226a7.793 7.793 0 0 0 4.995 1.192 7.734 7.734 0 0 0 4.642-2.176 7.524 7.524 0 0 0 1.033-9.506l4.224-4.168a43.258 43.258 0 0 1 10.02 6.945 1.788 1.788 0 0 1 .585 1.313 1.788 1.788 0 0 1-.577 1.318h.003Z\"/>\n</svg>`;\n\n@Component({\n  selector: \"collection-access-restricted\",\n  standalone: true,\n  imports: [SharedModule, ButtonModule, NoItemsModule],\n  template: `<bit-no-items [icon]=\"icon\" class=\"tw-mt-2 tw-block\">\n    <span slot=\"title\" class=\"tw-mt-4 tw-block\">{{ \"collectionAccessRestricted\" | i18n }}</span>\n    <button\n      *ngIf=\"canEditCollection\"\n      slot=\"button\"\n      bitButton\n      (click)=\"viewCollectionClicked.emit({ readonly: false, tab: collectionDialogTabType.Info })\"\n      buttonType=\"secondary\"\n      type=\"button\"\n    >\n      <i aria-hidden=\"true\" class=\"bwi bwi-pencil-square\"></i> {{ \"editCollection\" | i18n }}\n    </button>\n    <button\n      *ngIf=\"!canEditCollection && canViewCollectionInfo\"\n      slot=\"button\"\n      bitButton\n      (click)=\"viewCollectionClicked.emit({ readonly: true, tab: collectionDialogTabType.Access })\"\n      buttonType=\"secondary\"\n      type=\"button\"\n    >\n      <i aria-hidden=\"true\" class=\"bwi bwi-users\"></i> {{ \"viewAccess\" | i18n }}\n    </button>\n  </bit-no-items>`,\n})\nexport class CollectionAccessRestrictedComponent {\n  protected icon = icon;\n  protected collectionDialogTabType = CollectionDialogTabType;\n\n  @Input() canEditCollection = false;\n  @Input() canViewCollectionInfo = false;\n\n  @Output() viewCollectionClicked = new EventEmitter<{\n    readonly: boolean;\n    tab: CollectionDialogTabType;\n  }>();\n}\n","import { Injectable, OnDestroy } from \"@angular/core\";\nimport { map, Observable, ReplaySubject, Subject } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\n\nimport { CollectionAdminView } from \"../../../vault/core/views/collection-admin.view\";\nimport { VaultFilterService as BaseVaultFilterService } from \"../../individual-vault/vault-filter/services/vault-filter.service\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Injectable()\nexport class VaultFilterService extends BaseVaultFilterService implements OnDestroy {\n  private destroy$ = new Subject<void>();\n  private _collections = new ReplaySubject<CollectionAdminView[]>(1);\n\n  filteredCollections$: Observable<CollectionAdminView[]> = this._collections.asObservable();\n\n  collectionTree$: Observable<TreeNode<CollectionFilter>> = this.filteredCollections$.pipe(\n    map((collections) => this.buildCollectionTree(collections)),\n  );\n\n  constructor(\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    policyService: PolicyService,\n    i18nService: I18nService,\n    stateProvider: StateProvider,\n    collectionService: CollectionService,\n  ) {\n    super(\n      organizationService,\n      folderService,\n      cipherService,\n      policyService,\n      i18nService,\n      stateProvider,\n      collectionService,\n    );\n  }\n\n  async reloadCollections(collections: CollectionAdminView[]) {\n    this._collections.next(collections);\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { SearchModule } from \"@bitwarden/components\";\n\nimport { VaultFilterService as VaultFilterServiceAbstraction } from \"../../individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilterSharedModule } from \"../../individual-vault/vault-filter/shared/vault-filter-shared.module\";\n\nimport { VaultFilterComponent } from \"./vault-filter.component\";\nimport { VaultFilterService } from \"./vault-filter.service\";\n\n@NgModule({\n  imports: [VaultFilterSharedModule, SearchModule],\n  declarations: [VaultFilterComponent],\n  exports: [VaultFilterComponent],\n  providers: [\n    {\n      provide: VaultFilterServiceAbstraction,\n      useClass: VaultFilterService,\n    },\n  ],\n})\nexport class VaultFilterModule {}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"attachmentsTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form\n      class=\"modal-content\"\n      #form\n      (ngSubmit)=\"submit()\"\n      [appApiAction]=\"formPromise\"\n      ngNativeValidate\n    >\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"attachmentsTitle\">\n          {{ \"attachments\" | i18n }}\n          <small *ngIf=\"cipher\">{{ cipher.name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <table class=\"table table-hover table-list\" *ngIf=\"cipher && cipher.hasAttachments\">\n          <tbody>\n            <tr *ngFor=\"let a of cipher.attachments\">\n              <td class=\"table-list-icon\">\n                <i\n                  class=\"bwi bwi-fw bwi-lg bwi-file\"\n                  *ngIf=\"!$any(a).downloading\"\n                  aria-hidden=\"true\"\n                ></i>\n                <i\n                  class=\"bwi bwi-spinner bwi-lg bwi-fw bwi-spin\"\n                  *ngIf=\"$any(a).downloading\"\n                  aria-hidden=\"true\"\n                ></i>\n              </td>\n              <td class=\"wrap\">\n                <div class=\"d-flex\">\n                  <a href=\"#\" appStopClick (click)=\"download(a)\">{{ a.fileName }}</a>\n                  <div *ngIf=\"showFixOldAttachments(a)\" class=\"ml-2\">\n                    <a\n                      href=\"https://bitwarden.com/help/attachments/#fixing-old-attachments\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      <i\n                        class=\"bwi bwi-exclamation-triangle text-warning\"\n                        title=\"{{ 'attachmentFixDescription' | i18n }}\"\n                        aria-hidden=\"true\"\n                      ></i>\n                      <span class=\"sr-only\">{{ \"attachmentFixDescription\" | i18n }}</span></a\n                    >\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-outline-primary btn-sm m-0 py-0 px-2\"\n                      (click)=\"reupload(a)\"\n                      #reuploadBtn\n                      [appApiAction]=\"reuploadPromises[a.id]\"\n                      [disabled]=\"$any(reuploadBtn).loading\"\n                    >\n                      {{ \"fix\" | i18n }}\n                    </button>\n                  </div>\n                </div>\n                <small>{{ a.sizeName }}</small>\n              </td>\n              <td class=\"table-list-options\" *ngIf=\"!viewOnly\">\n                <button\n                  class=\"btn btn-outline-danger\"\n                  type=\"button\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'delete' | i18n }}\"\n                  (click)=\"delete(a)\"\n                  #deleteBtn\n                  [appApiAction]=\"deletePromises[a.id]\"\n                  [disabled]=\"$any(deleteBtn).loading\"\n                >\n                  <i\n                    class=\"bwi bwi-trash bwi-lg bwi-fw\"\n                    [hidden]=\"$any(deleteBtn).loading\"\n                    aria-hidden=\"true\"\n                  ></i>\n                  <i\n                    class=\"bwi bwi-spinner bwi-spin bwi-lg bwi-fw\"\n                    [hidden]=\"!$any(deleteBtn).loading\"\n                    title=\"{{ 'loading' | i18n }}\"\n                    aria-hidden=\"true\"\n                  ></i>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <div *ngIf=\"!viewOnly\">\n          <h3>{{ \"newAttachment\" | i18n }}</h3>\n          <label for=\"file\" class=\"sr-only\">{{ \"file\" | i18n }}</label>\n          <input type=\"file\" id=\"file\" class=\"form-control-file\" name=\"file\" required />\n          <small class=\"form-text text-muted\">{{ \"maxFileSize\" | i18n }}</small>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary btn-submit\"\n          [disabled]=\"form.loading\"\n          *ngIf=\"!viewOnly\"\n        >\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { AttachmentView } from \"@bitwarden/common/vault/models/view/attachment.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AttachmentsComponent as BaseAttachmentsComponent } from \"../individual-vault/attachments.component\";\n\n@Component({\n  selector: \"app-org-vault-attachments\",\n  templateUrl: \"../individual-vault/attachments.component.html\",\n})\nexport class AttachmentsComponent extends BaseAttachmentsComponent implements OnInit {\n  viewOnly = false;\n  organization: Organization;\n\n  private flexibleCollectionsV1Enabled = false;\n  private restrictProviderAccess = false;\n\n  constructor(\n    cipherService: CipherService,\n    i18nService: I18nService,\n    cryptoService: CryptoService,\n    stateService: StateService,\n    platformUtilsService: PlatformUtilsService,\n    apiService: ApiService,\n    logService: LogService,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogService,\n    billingAccountProfileStateService: BillingAccountProfileStateService,\n    private configService: ConfigService,\n  ) {\n    super(\n      cipherService,\n      i18nService,\n      cryptoService,\n      stateService,\n      platformUtilsService,\n      apiService,\n      logService,\n      fileDownloadService,\n      dialogService,\n      billingAccountProfileStateService,\n    );\n  }\n\n  async ngOnInit() {\n    await super.ngOnInit();\n    this.flexibleCollectionsV1Enabled = await firstValueFrom(\n      this.configService.getFeatureFlag$(FeatureFlag.FlexibleCollectionsV1),\n    );\n    this.restrictProviderAccess = await firstValueFrom(\n      this.configService.getFeatureFlag$(FeatureFlag.RestrictProviderAccess),\n    );\n  }\n\n  protected async reupload(attachment: AttachmentView) {\n    if (\n      this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccess,\n      ) &&\n      this.showFixOldAttachments(attachment)\n    ) {\n      await super.reuploadCipherAttachment(attachment, true);\n    }\n  }\n\n  protected async loadCipher() {\n    if (\n      !this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccess,\n      )\n    ) {\n      return await super.loadCipher();\n    }\n    const response = await this.apiService.getCipherAdmin(this.cipherId);\n    return new Cipher(new CipherData(response));\n  }\n\n  protected saveCipherAttachment(file: File) {\n    return this.cipherService.saveAttachmentWithServer(\n      this.cipherDomain,\n      file,\n      this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccess,\n      ),\n    );\n  }\n\n  protected deleteCipherAttachment(attachmentId: string) {\n    if (\n      !this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccess,\n      )\n    ) {\n      return super.deleteCipherAttachment(attachmentId);\n    }\n    return this.apiService.deleteCipherAttachmentAdmin(this.cipherId, attachmentId);\n  }\n\n  protected showFixOldAttachments(attachment: AttachmentView) {\n    return (\n      attachment.key == null &&\n      this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccess,\n      )\n    );\n  }\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CipherId, CollectionId, OrganizationId } from \"@bitwarden/common/types/guid\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService, SelectItemView } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../../shared\";\n\nexport interface BulkCollectionAssignmentDialogParams {\n  organizationId: OrganizationId;\n\n  /**\n   * The ciphers to be assigned to the collections selected in the dialog.\n   */\n  ciphers: CipherView[];\n\n  /**\n   * The collections available to assign the ciphers to.\n   */\n  availableCollections: CollectionView[];\n\n  /**\n   * The currently filtered collection. Selected by default. If the user deselects it in the dialog then it will be\n   * removed from the ciphers upon submission.\n   */\n  activeCollection?: CollectionView;\n}\n\nexport enum BulkCollectionAssignmentDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n}\n\n@Component({\n  imports: [SharedModule],\n  selector: \"app-bulk-collection-assignment-dialog\",\n  templateUrl: \"./bulk-collection-assignment-dialog.component.html\",\n  standalone: true,\n})\nexport class BulkCollectionAssignmentDialogComponent implements OnDestroy, OnInit {\n  protected totalItemCount: number;\n  protected editableItemCount: number;\n  protected readonlyItemCount: number;\n  protected availableCollections: SelectItemView[] = [];\n  protected selectedCollections: SelectItemView[] = [];\n\n  private editableItems: CipherView[] = [];\n  private destroy$ = new Subject<void>();\n\n  protected pluralize = (count: number, singular: string, plural: string) =>\n    `${count} ${this.i18nService.t(count === 1 ? singular : plural)}`;\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: BulkCollectionAssignmentDialogParams,\n    private dialogRef: DialogRef<BulkCollectionAssignmentDialogResult>,\n    private cipherService: CipherService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private configService: ConfigService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  async ngOnInit() {\n    // If no ciphers are passed in, close the dialog\n    if (this.params.ciphers == null || this.params.ciphers.length < 1) {\n      this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"nothingSelected\"));\n      this.dialogRef.close(BulkCollectionAssignmentDialogResult.Canceled);\n      return;\n    }\n\n    const v1FCEnabled = await this.configService.getFeatureFlag(FeatureFlag.FlexibleCollectionsV1);\n    const restrictProviderAccess = await this.configService.getFeatureFlag(\n      FeatureFlag.RestrictProviderAccess,\n    );\n    const org = await this.organizationService.get(this.params.organizationId);\n\n    if (org.canEditAllCiphers(v1FCEnabled, restrictProviderAccess)) {\n      this.editableItems = this.params.ciphers;\n    } else {\n      this.editableItems = this.params.ciphers.filter((c) => c.edit);\n    }\n\n    this.editableItemCount = this.editableItems.length;\n\n    // If no ciphers are editable, close the dialog\n    if (this.editableItemCount == 0) {\n      this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"missingPermissions\"));\n      this.dialogRef.close(BulkCollectionAssignmentDialogResult.Canceled);\n      return;\n    }\n\n    this.totalItemCount = this.params.ciphers.length;\n    this.readonlyItemCount = this.totalItemCount - this.editableItemCount;\n\n    this.availableCollections = this.params.availableCollections.map((c) => ({\n      icon: \"bwi-collection\",\n      id: c.id,\n      labelName: c.name,\n      listName: c.name,\n    }));\n\n    // If the active collection is set, select it by default\n    if (this.params.activeCollection) {\n      this.selectCollections([\n        {\n          icon: \"bwi-collection\",\n          id: this.params.activeCollection.id,\n          labelName: this.params.activeCollection.name,\n          listName: this.params.activeCollection.name,\n        },\n      ]);\n    }\n  }\n\n  private sortItems = (a: SelectItemView, b: SelectItemView) =>\n    this.i18nService.collator.compare(a.labelName, b.labelName);\n\n  selectCollections(items: SelectItemView[]) {\n    this.selectedCollections = [...this.selectedCollections, ...items].sort(this.sortItems);\n\n    this.availableCollections = this.availableCollections.filter(\n      (item) => !items.find((i) => i.id === item.id),\n    );\n  }\n\n  unselectCollection(i: number) {\n    const removed = this.selectedCollections.splice(i, 1);\n    this.availableCollections = [...this.availableCollections, ...removed].sort(this.sortItems);\n  }\n\n  get isValid() {\n    return this.params.activeCollection != null || this.selectedCollections.length > 0;\n  }\n\n  submit = async () => {\n    if (!this.isValid) {\n      return;\n    }\n\n    const cipherIds = this.editableItems.map((i) => i.id as CipherId);\n\n    if (this.selectedCollections.length > 0) {\n      await this.cipherService.bulkUpdateCollectionsWithServer(\n        this.params.organizationId,\n        cipherIds,\n        this.selectedCollections.map((i) => i.id as CollectionId),\n        false,\n      );\n    }\n\n    if (\n      this.params.activeCollection != null &&\n      this.selectedCollections.find((c) => c.id === this.params.activeCollection.id) == null\n    ) {\n      await this.cipherService.bulkUpdateCollectionsWithServer(\n        this.params.organizationId,\n        cipherIds,\n        [this.params.activeCollection.id as CollectionId],\n        true,\n      );\n    }\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"successfullyAssignedCollections\"),\n    );\n\n    this.dialogRef.close(BulkCollectionAssignmentDialogResult.Saved);\n  };\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  static open(\n    dialogService: DialogService,\n    config: DialogConfig<BulkCollectionAssignmentDialogParams>,\n  ) {\n    return dialogService.open<\n      BulkCollectionAssignmentDialogResult,\n      BulkCollectionAssignmentDialogParams\n    >(BulkCollectionAssignmentDialogComponent, config);\n  }\n}\n","<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>\n    {{ \"assignToCollections\" | i18n }}\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ pluralize(editableItemCount, \"item\", \"items\") }}\n    </span>\n  </span>\n\n  <div bitDialogContent>\n    <p>{{ \"bulkCollectionAssignmentDialogDescription\" | i18n }}</p>\n\n    <p *ngIf=\"readonlyItemCount > 0\">\n      {{ \"bulkCollectionAssignmentWarning\" | i18n: totalItemCount : readonlyItemCount }}\n    </p>\n\n    <div class=\"tw-flex\">\n      <bit-form-field class=\"tw-grow\">\n        <bit-label>{{ \"selectCollectionsToAssign\" | i18n }}</bit-label>\n        <bit-multi-select\n          class=\"tw-w-full\"\n          [baseItems]=\"availableCollections\"\n          [removeSelectedItems]=\"true\"\n          (onItemsConfirmed)=\"selectCollections($event)\"\n        ></bit-multi-select>\n      </bit-form-field>\n    </div>\n\n    <bit-table>\n      <ng-container header>\n        <td bitCell>{{ \"assignToTheseCollections\" | i18n }}</td>\n        <td bitCell class=\"tw-w-20\"></td>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let item of selectedCollections; let i = index\">\n          <td bitCell>\n            <i class=\"bwi bwi-collection\" aria-hidden=\"true\"></i>\n            {{ item.labelName }}\n          </td>\n          <td bitCell class=\"tw-text-right\">\n            <button\n              type=\"button\"\n              bitIconButton=\"bwi-close\"\n              buttonType=\"muted\"\n              appA11yTitle=\"{{ 'remove' | i18n }} {{ item.labelName }}\"\n              (click)=\"unselectCollection(i)\"\n            ></button>\n          </td>\n        </tr>\n        <tr *ngIf=\"selectedCollections.length == 0\">\n          <td bitCell>\n            {{ \"noCollectionsAssigned\" | i18n }}\n          </td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button type=\"submit\" bitButton buttonType=\"primary\" [bitAction]=\"submit\" [disabled]=\"!isValid\">\n      {{ \"assign\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"cancel\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy } from \"@angular/core\";\nimport { FormBuilder } from \"@angular/forms\";\nimport { combineLatest, map, of, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { GroupService, GroupView } from \"../../../admin-console/organizations/core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  AccessSelectorModule,\n  convertToSelectionView,\n  mapGroupToAccessItemView,\n  mapUserToAccessItemView,\n  PermissionMode,\n} from \"../../../admin-console/organizations/shared/components/access-selector\";\nimport { SharedModule } from \"../../../shared\";\nimport { CollectionAdminService } from \"../../core/collection-admin.service\";\n\nexport interface BulkCollectionsDialogParams {\n  organizationId: string;\n  collections: CollectionView[];\n}\n\nexport enum BulkCollectionsDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n}\n\n@Component({\n  imports: [SharedModule, AccessSelectorModule],\n  selector: \"app-bulk-collections-dialog\",\n  templateUrl: \"bulk-collections-dialog.component.html\",\n  standalone: true,\n})\nexport class BulkCollectionsDialogComponent implements OnDestroy {\n  protected flexibleCollectionsEnabled$ = this.organizationService\n    .get$(this.params.organizationId)\n    .pipe(map((o) => o?.flexibleCollections));\n\n  protected readonly PermissionMode = PermissionMode;\n\n  protected formGroup = this.formBuilder.group({\n    access: [[] as AccessItemValue[]],\n  });\n  protected loading = true;\n  protected organization: Organization;\n  protected accessItems: AccessItemView[] = [];\n  protected numCollections: number;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: BulkCollectionsDialogParams,\n    private dialogRef: DialogRef<BulkCollectionsDialogResult>,\n    private formBuilder: FormBuilder,\n    private organizationService: OrganizationService,\n    private groupService: GroupService,\n    private organizationUserService: OrganizationUserService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private collectionAdminService: CollectionAdminService,\n  ) {\n    this.numCollections = this.params.collections.length;\n    const organization$ = this.organizationService.get$(this.params.organizationId);\n    const groups$ = organization$.pipe(\n      switchMap((organization) => {\n        if (!organization.useGroups) {\n          return of([] as GroupView[]);\n        }\n        return this.groupService.getAll(organization.id);\n      }),\n    );\n\n    combineLatest([\n      organization$,\n      groups$,\n      this.organizationUserService.getAllUsers(this.params.organizationId),\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([organization, groups, users]) => {\n        this.organization = organization;\n\n        this.accessItems = [].concat(\n          groups.map(mapGroupToAccessItemView),\n          users.data.map(mapUserToAccessItemView),\n        );\n\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const users = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Member)\n      .map(convertToSelectionView);\n\n    const groups = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Group)\n      .map(convertToSelectionView);\n\n    await this.collectionAdminService.bulkAssignAccess(\n      this.organization.id,\n      this.params.collections.map((c) => c.id),\n      users,\n      groups,\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"editedCollections\"));\n\n    this.dialogRef.close(BulkCollectionsDialogResult.Saved);\n  };\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkCollectionsDialogParams>) {\n    return dialogService.open<BulkCollectionsDialogResult, BulkCollectionsDialogParams>(\n      BulkCollectionsDialogComponent,\n      config,\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [loading]=\"loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ \"assignCollectionAccess\" | i18n }}\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ numCollections }} {{ (numCollections == 1 ? \"collection\" : \"collections\") | i18n }}\n      </span>\n    </span>\n\n    <div bitDialogContent>\n      <bit-access-selector\n        *ngIf=\"organization?.useGroups\"\n        [permissionMode]=\"PermissionMode.Edit\"\n        formControlName=\"access\"\n        [items]=\"accessItems\"\n        [columnHeader]=\"'groupSlashMemberColumnHeader' | i18n\"\n        [selectorLabelText]=\"'selectGroupsAndMembers' | i18n\"\n        [selectorHelpText]=\"'userPermissionOverrideHelperDesc' | i18n\"\n        [emptySelectionText]=\"'noMembersOrGroupsAdded' | i18n\"\n        [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n      ></bit-access-selector>\n      <bit-access-selector\n        *ngIf=\"!organization?.useGroups\"\n        [permissionMode]=\"PermissionMode.Edit\"\n        formControlName=\"access\"\n        [items]=\"accessItems\"\n        [columnHeader]=\"'memberColumnHeader' | i18n\"\n        [selectorLabelText]=\"'selectMembers' | i18n\"\n        [emptySelectionText]=\"'noMembersAdded' | i18n\"\n        [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n      ></bit-access-selector>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton bitFormButton buttonType=\"secondary\" bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<form (ngSubmit)=\"submit()\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"collections\" | i18n }}\n      <small *ngIf=\"cipher\">{{ cipher.name }}</small>\n    </span>\n    <ng-container bitDialogContent>\n      <p>{{ \"collectionsDesc\" | i18n }}</p>\n      <div class=\"tw-flex\">\n        <label class=\"tw-mb-1 tw-block tw-font-semibold tw-text-main\">{{\n          \"collections\" | i18n\n        }}</label>\n        <div class=\"tw-ml-auto tw-flex\" *ngIf=\"collections && collections.length\">\n          <button bitLink type=\"button\" (click)=\"selectAll(true)\" class=\"tw-px-2\">\n            {{ \"selectAll\" | i18n }}\n          </button>\n          <button bitLink type=\"button\" (click)=\"selectAll(false)\" class=\"tw-px-2\">\n            {{ \"unselectAll\" | i18n }}\n          </button>\n        </div>\n      </div>\n      <div *ngIf=\"!collections || !collections.length\">\n        {{ \"noCollectionsInList\" | i18n }}\n      </div>\n      <bit-table *ngIf=\"collections && collections.length\">\n        <ng-template body>\n          <tr bitRow *ngFor=\"let c of collections; let i = index\" (click)=\"check(c)\">\n            <td bitCell>\n              <input\n                type=\"checkbox\"\n                bitCheckbox\n                [(ngModel)]=\"$any(c).checked\"\n                name=\"Collection[{{ i }}].Checked\"\n                appStopProp\n                [disabled]=\"\n                  !c.canEditItems(\n                    this.organization,\n                    this.flexibleCollectionsV1Enabled,\n                    this.restrictProviderAccess\n                  )\n                \"\n              />\n              {{ c.name }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\">\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherCollectionsRequest } from \"@bitwarden/common/vault/models/request/cipher-collections.request\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  CollectionsComponent as BaseCollectionsComponent,\n  CollectionsDialogResult,\n} from \"../individual-vault/collections.component\";\n\n@Component({\n  selector: \"app-org-vault-collections\",\n  templateUrl: \"../../vault/individual-vault/collections.component.html\",\n})\nexport class CollectionsComponent extends BaseCollectionsComponent {\n  organization: Organization;\n\n  constructor(\n    collectionService: CollectionService,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n    cipherService: CipherService,\n    organizationService: OrganizationService,\n    private apiService: ApiService,\n    logService: LogService,\n    configService: ConfigService,\n    protected dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) params: OrgVaultCollectionsDialogParams,\n  ) {\n    super(\n      collectionService,\n      platformUtilsService,\n      i18nService,\n      cipherService,\n      organizationService,\n      logService,\n      configService,\n      dialogRef,\n      params,\n    );\n    this.allowSelectNone = true;\n    this.collectionIds = params?.collectionIds;\n    this.collections = params?.collections;\n    this.organization = params?.organization;\n    this.cipherId = params?.cipherId;\n  }\n\n  protected async loadCipher() {\n    // if cipher is unassigned use apiService. We can see this by looking at this.collectionIds\n    if (\n      !this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccess,\n      ) &&\n      this.collectionIds.length !== 0\n    ) {\n      return await super.loadCipher();\n    }\n    const response = await this.apiService.getCipherAdmin(this.cipherId);\n    return new Cipher(new CipherData(response));\n  }\n\n  protected loadCipherCollections() {\n    if (!this.organization.canViewAllCollections) {\n      return super.loadCipherCollections();\n    }\n    return this.collectionIds;\n  }\n\n  protected loadCollections() {\n    if (!this.organization.canViewAllCollections) {\n      return super.loadCollections();\n    }\n    return Promise.resolve(this.collections);\n  }\n\n  protected saveCollections() {\n    if (\n      this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccess,\n      ) ||\n      this.collectionIds.length === 0\n    ) {\n      const request = new CipherCollectionsRequest(this.cipherDomain.collectionIds);\n      return this.apiService.putCipherCollectionsAdmin(this.cipherId, request);\n    } else {\n      return super.saveCollections();\n    }\n  }\n}\n\nexport interface OrgVaultCollectionsDialogParams {\n  collectionIds: string[];\n  collections: CollectionView[];\n  organization: Organization;\n  cipherId: string;\n}\n\n/**\n * Strongly typed helper to open a Collections dialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Optional configuration for the dialog\n */\nexport function openOrgVaultCollectionsDialog(\n  dialogService: DialogService,\n  config?: DialogConfig<OrgVaultCollectionsDialogParams>,\n) {\n  return dialogService.open<CollectionsDialogResult, OrgVaultCollectionsDialogParams>(\n    CollectionsComponent,\n    config,\n  );\n}\n","<div class=\"card vault-filters\">\n  <div class=\"container loading-spinner\" *ngIf=\"!isLoaded\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\" aria-hidden=\"true\"></i>\n  </div>\n  <div *ngIf=\"isLoaded\">\n    <div class=\"card-header d-flex\">\n      {{ \"filters\" | i18n }}\n      <a\n        class=\"ml-auto\"\n        href=\"https://bitwarden.com/help/searching-vault/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </div>\n    <div class=\"card-body\">\n      <div class=\"tw-mb-4\">\n        <bit-search\n          id=\"search\"\n          placeholder=\"{{ searchPlaceholder | i18n }}\"\n          [(ngModel)]=\"searchText\"\n          (ngModelChange)=\"onSearchTextChanged($event)\"\n          autocomplete=\"off\"\n          appAutofocus\n        />\n      </div>\n      <ng-container *ngFor=\"let f of filtersList\">\n        <div class=\"filter\">\n          <app-filter-section [activeFilter]=\"activeFilter\" [section]=\"f\"> </app-filter-section>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnDestroy, OnInit, SimpleChanges } from \"@angular/core\";\nimport { firstValueFrom, Subject } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\n\nimport { VaultFilterComponent as BaseVaultFilterComponent } from \"../../individual-vault/vault-filter/components/vault-filter.component\"; //../../vault/vault-filter/components/vault-filter.component\";\nimport { VaultFilterService } from \"../../individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport {\n  VaultFilterList,\n  VaultFilterSection,\n  VaultFilterType,\n} from \"../../individual-vault/vault-filter/shared/models/vault-filter-section.type\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Component({\n  selector: \"app-organization-vault-filter\",\n  templateUrl: \"../../individual-vault/vault-filter/components/vault-filter.component.html\",\n})\nexport class VaultFilterComponent extends BaseVaultFilterComponent implements OnInit, OnDestroy {\n  @Input() set organization(value: Organization) {\n    if (value && value !== this._organization) {\n      this._organization = value;\n      this.vaultFilterService.setOrganizationFilter(this._organization);\n    }\n  }\n  _organization: Organization;\n  protected destroy$: Subject<void>;\n\n  constructor(\n    protected vaultFilterService: VaultFilterService,\n    protected policyService: PolicyService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n  ) {\n    super(vaultFilterService, policyService, i18nService, platformUtilsService);\n  }\n\n  async ngOnInit() {\n    this.filters = await this.buildAllFilters();\n    if (!this.activeFilter.selectedCipherTypeNode) {\n      this.activeFilter.resetFilter();\n      this.activeFilter.selectedCollectionNode =\n        (await this.getDefaultFilter()) as TreeNode<CollectionFilter>;\n    }\n    this.isLoaded = true;\n  }\n\n  async ngOnChanges(changes: SimpleChanges) {\n    if (changes.organization) {\n      this.filters = await this.buildAllFilters();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async removeCollapsibleCollection() {\n    const collapsedNodes = await firstValueFrom(this.vaultFilterService.collapsedFilterNodes$);\n\n    collapsedNodes.delete(\"AllCollections\");\n\n    await this.vaultFilterService.setCollapsedFilterNodes(collapsedNodes);\n  }\n\n  protected async addCollectionFilter(): Promise<VaultFilterSection> {\n    // Ensure the Collections filter is never collapsed for the org vault\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.removeCollapsibleCollection();\n\n    const collectionFilterSection: VaultFilterSection = {\n      data$: this.vaultFilterService.buildTypeTree(\n        {\n          id: \"AllCollections\",\n          name: \"collections\",\n          type: \"all\",\n          icon: \"bwi-collection\",\n        },\n        [\n          {\n            id: \"AllCollections\",\n            name: \"Collections\",\n            type: \"all\",\n            icon: \"bwi-collection\",\n          },\n        ],\n      ),\n      header: {\n        showHeader: false,\n        isSelectable: true,\n      },\n      action: this.applyCollectionFilter,\n    };\n    return collectionFilterSection;\n  }\n\n  async buildAllFilters(): Promise<VaultFilterList> {\n    const builderFilter = {} as VaultFilterList;\n    builderFilter.typeFilter = await this.addTypeFilter([\"favorites\"]);\n    if (this._organization?.flexibleCollections) {\n      builderFilter.collectionFilter = await this.addCollectionFilter();\n    } else {\n      builderFilter.collectionFilter = await super.addCollectionFilter();\n    }\n    builderFilter.trashFilter = await this.addTrashFilter();\n    return builderFilter;\n  }\n\n  async getDefaultFilter(): Promise<TreeNode<VaultFilterType>> {\n    return await firstValueFrom(this.filters?.collectionFilter.data$);\n  }\n}\n","<app-header [title]=\"title\" [icon]=\"icon\">\n  <bit-breadcrumbs *ngIf=\"showBreadcrumbs\" slot=\"breadcrumbs\">\n    <bit-breadcrumb\n      [route]=\"[]\"\n      [queryParams]=\"{ organizationId: organization.id, collectionId: null }\"\n      queryParamsHandling=\"merge\"\n    >\n      {{ organization.name }}\n      <span *ngIf=\"!organization.flexibleCollections\">\n        {{ \"vault\" | i18n | lowercase }}\n      </span>\n      <span *ngIf=\"organization.flexibleCollections\">\n        {{ \"collections\" | i18n | lowercase }}\n      </span>\n    </bit-breadcrumb>\n\n    <ng-container>\n      <bit-breadcrumb\n        *ngFor=\"let collection of collections\"\n        icon=\"bwi-collection\"\n        [route]=\"[]\"\n        [queryParams]=\"{ collectionId: collection.id }\"\n        queryParamsHandling=\"merge\"\n      >\n        {{ collection.name }}\n      </bit-breadcrumb>\n    </ng-container>\n  </bit-breadcrumbs>\n\n  <ng-container slot=\"title-suffix\">\n    <ng-container\n      *ngIf=\"\n        collection != null && (canEditCollection || canDeleteCollection || canViewCollectionInfo)\n      \"\n    >\n      <button\n        bitIconButton=\"bwi-angle-down\"\n        [bitMenuTriggerFor]=\"editCollectionMenu\"\n        size=\"small\"\n        type=\"button\"\n        aria-haspopup=\"true\"\n      ></button>\n      <bit-menu #editCollectionMenu>\n        <ng-container *ngIf=\"canEditCollection\">\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Info, false)\"\n          >\n            <i class=\"bwi bwi-fw bwi-pencil-square\" aria-hidden=\"true\"></i>\n            {{ \"editInfo\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Access, false)\"\n          >\n            <i class=\"bwi bwi-fw bwi-users\" aria-hidden=\"true\"></i>\n            {{ \"access\" | i18n }}\n          </button>\n        </ng-container>\n        <ng-container *ngIf=\"!canEditCollection && canViewCollectionInfo\">\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Info, true)\"\n          >\n            <i class=\"bwi bwi-fw bwi-pencil-square\" aria-hidden=\"true\"></i>\n            {{ \"viewInfo\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Access, true)\"\n          >\n            <i class=\"bwi bwi-fw bwi-users\" aria-hidden=\"true\"></i>\n            {{ \"viewAccess\" | i18n }}\n          </button>\n        </ng-container>\n        <button type=\"button\" *ngIf=\"canDeleteCollection\" bitMenuItem (click)=\"deleteCollection()\">\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-trash\" aria-hidden=\"true\"></i>\n            {{ \"delete\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </ng-container>\n    <small *ngIf=\"loading\">\n      <i\n        class=\"bwi bwi-spinner bwi-spin text-muted\"\n        title=\"{{ 'loading' | i18n }}\"\n        aria-hidden=\"true\"\n      ></i>\n      <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n    </small>\n  </ng-container>\n\n  <bit-search\n    *ngIf=\"organization?.isProviderUser\"\n    class=\"tw-grow\"\n    [ngModel]=\"searchText\"\n    (ngModelChange)=\"onSearchTextChanged($event)\"\n    [placeholder]=\"'searchCollection' | i18n\"\n  ></bit-search>\n\n  <div *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned\" class=\"tw-shrink-0\">\n    <div *ngIf=\"canCreateCipher && canCreateCollection\" appListDropdown>\n      <button\n        bitButton\n        buttonType=\"primary\"\n        type=\"button\"\n        [bitMenuTriggerFor]=\"addOptions\"\n        id=\"newItemDropdown\"\n        appA11yTitle=\"{{ 'new' | i18n }}\"\n      >\n        {{ \"new\" | i18n }}<i class=\"bwi bwi-angle-down tw-ml-2\" aria-hidden=\"true\"></i>\n      </button>\n      <bit-menu #addOptions aria-labelledby=\"newItemDropdown\">\n        <button type=\"button\" bitMenuItem (click)=\"addCipher()\">\n          <i class=\"bwi bwi-fw bwi-globe\" aria-hidden=\"true\"></i>\n          {{ \"item\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"addCollection()\">\n          <i class=\"bwi bwi-fw bwi-collection\" aria-hidden=\"true\"></i>\n          {{ \"collection\" | i18n }}\n        </button>\n      </bit-menu>\n    </div>\n    <button\n      *ngIf=\"canCreateCipher && !canCreateCollection\"\n      type=\"button\"\n      bitButton\n      buttonType=\"primary\"\n      (click)=\"addCipher()\"\n    >\n      <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n      {{ \"newItem\" | i18n }}\n    </button>\n\n    <button\n      *ngIf=\"canCreateCollection && !canCreateCipher\"\n      type=\"button\"\n      bitButton\n      buttonType=\"primary\"\n      (click)=\"addCollection()\"\n    >\n      <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n      {{ \"newCollection\" | i18n }}\n    </button>\n  </div>\n</app-header>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ProductType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { DialogService, SimpleDialogOptions } from \"@bitwarden/components\";\n\nimport { CollectionAdminView } from \"../../../vault/core/views/collection-admin.view\";\nimport { CollectionDialogTabType } from \"../../components/collection-dialog\";\nimport { CollectionAdminService } from \"../../core/collection-admin.service\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n  Unassigned,\n} from \"../../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\n\n@Component({\n  selector: \"app-org-vault-header\",\n  templateUrl: \"./vault-header.component.html\",\n})\nexport class VaultHeaderComponent implements OnInit {\n  protected All = All;\n  protected Unassigned = Unassigned;\n\n  /**\n   * Boolean to determine the loading state of the header.\n   * Shows a loading spinner if set to true\n   */\n  @Input() loading: boolean;\n\n  /** Current active fitler */\n  @Input() filter: RoutedVaultFilterModel;\n\n  /** The organization currently being viewed */\n  @Input() organization: Organization;\n\n  /** Currently selected collection */\n  @Input() collection?: TreeNode<CollectionAdminView>;\n\n  /** The current search text in the header */\n  @Input() searchText: string;\n\n  /** Emits an event when the new item button is clicked in the header */\n  @Output() onAddCipher = new EventEmitter<void>();\n\n  /** Emits an event when the new collection button is clicked in the header */\n  @Output() onAddCollection = new EventEmitter<void>();\n\n  /** Emits an event when the edit collection button is clicked in the header */\n  @Output() onEditCollection = new EventEmitter<{\n    tab: CollectionDialogTabType;\n    readonly: boolean;\n  }>();\n\n  /** Emits an event when the delete collection button is clicked in the header */\n  @Output() onDeleteCollection = new EventEmitter<void>();\n\n  /** Emits an event when the search text changes in the header*/\n  @Output() searchTextChanged = new EventEmitter<string>();\n\n  protected CollectionDialogTabType = CollectionDialogTabType;\n  protected organizations$ = this.organizationService.organizations$;\n\n  protected flexibleCollectionsV1Enabled = false;\n  private restrictProviderAccessFlag = false;\n\n  constructor(\n    private organizationService: OrganizationService,\n    private i18nService: I18nService,\n    private dialogService: DialogService,\n    private collectionAdminService: CollectionAdminService,\n    private router: Router,\n    private configService: ConfigService,\n  ) {}\n\n  async ngOnInit() {\n    this.flexibleCollectionsV1Enabled = await firstValueFrom(\n      this.configService.getFeatureFlag$(FeatureFlag.FlexibleCollectionsV1),\n    );\n    this.restrictProviderAccessFlag = await this.configService.getFeatureFlag(\n      FeatureFlag.RestrictProviderAccess,\n    );\n  }\n\n  get title() {\n    const headerType = this.organization?.flexibleCollections\n      ? this.i18nService.t(\"collections\").toLowerCase()\n      : this.i18nService.t(\"vault\").toLowerCase();\n\n    if (this.collection != null) {\n      return this.collection.node.name;\n    }\n\n    if (this.filter.collectionId === Unassigned) {\n      return this.i18nService.t(\"unassigned\");\n    }\n\n    return `${this.organization?.name} ${headerType}`;\n  }\n\n  get icon() {\n    return this.filter.collectionId !== undefined ? \"bwi-collection\" : \"\";\n  }\n\n  protected get showBreadcrumbs() {\n    return this.filter.collectionId !== undefined && this.filter.collectionId !== All;\n  }\n\n  /**\n   * A list of collection filters that form a chain from the organization root to currently selected collection.\n   * Begins from the organization root and excludes the currently selected collection.\n   */\n  protected get collections() {\n    if (this.collection == undefined) {\n      return [];\n    }\n\n    const collections = [this.collection];\n    while (collections[collections.length - 1].parent != undefined) {\n      collections.push(collections[collections.length - 1].parent);\n    }\n\n    return collections\n      .slice(1)\n      .reverse()\n      .map((treeNode) => treeNode.node);\n  }\n\n  private showFreeOrgUpgradeDialog(): void {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.i18nService.t(\n        this.organization.canEditSubscription\n          ? \"freeOrgMaxCollectionReachedManageBilling\"\n          : \"freeOrgMaxCollectionReachedNoManageBilling\",\n        this.organization.maxCollections,\n      ),\n      type: \"primary\",\n    };\n\n    if (this.organization.canEditSubscription) {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"upgrade\");\n    } else {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"ok\");\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null; // hide secondary btn\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialogRef(orgUpgradeSimpleDialogOpts);\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    firstValueFrom(simpleDialog.closed).then((result: boolean | undefined) => {\n      if (!result) {\n        return;\n      }\n\n      if (result && this.organization.canEditSubscription) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.router.navigate([\"/organizations\", this.organization.id, \"billing\", \"subscription\"], {\n          queryParams: { upgrade: true },\n        });\n      }\n    });\n  }\n\n  get canEditCollection(): boolean {\n    // Only edit collections if not editing \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can edit the specified collection\n    return this.collection.node.canEdit(this.organization, this.flexibleCollectionsV1Enabled);\n  }\n\n  addCipher() {\n    this.onAddCipher.emit();\n  }\n\n  async addCollection() {\n    if (this.organization.planProductType === ProductType.Free) {\n      const collections = await this.collectionAdminService.getAll(this.organization.id);\n      if (collections.length === this.organization.maxCollections) {\n        this.showFreeOrgUpgradeDialog();\n        return;\n      }\n    }\n\n    this.onAddCollection.emit();\n  }\n\n  async editCollection(tab: CollectionDialogTabType, readonly: boolean): Promise<void> {\n    this.onEditCollection.emit({ tab, readonly });\n  }\n\n  get canDeleteCollection(): boolean {\n    // Only delete collections if not deleting \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can delete the specified collection\n    return this.collection.node.canDelete(this.organization, this.flexibleCollectionsV1Enabled);\n  }\n\n  get canViewCollectionInfo(): boolean {\n    return this.collection.node.canViewCollectionInfo(\n      this.organization,\n      this.flexibleCollectionsV1Enabled,\n    );\n  }\n\n  get canCreateCollection(): boolean {\n    return this.organization?.canCreateNewCollections;\n  }\n\n  get canCreateCipher(): boolean {\n    if (this.organization?.isProviderUser && this.restrictProviderAccessFlag) {\n      return false;\n    }\n    return true;\n  }\n\n  deleteCollection() {\n    this.onDeleteCollection.emit();\n  }\n\n  onSearchTextChanged(t: string) {\n    this.searchText = t;\n    this.searchTextChanged.emit(t);\n  }\n}\n","<app-org-vault-header\n  [filter]=\"filter\"\n  [loading]=\"refreshing\"\n  [organization]=\"organization\"\n  [collection]=\"selectedCollection\"\n  [searchText]=\"currentSearchText$ | async\"\n  (onAddCipher)=\"addCipher()\"\n  (onAddCollection)=\"addCollection()\"\n  (onEditCollection)=\"editCollection(selectedCollection.node, $event.tab, $event.readonly)\"\n  (onDeleteCollection)=\"deleteCollection(selectedCollection.node)\"\n  (searchTextChanged)=\"filterSearchText($event)\"\n></app-org-vault-header>\n\n<div class=\"row\">\n  <div class=\"col-3\" *ngIf=\"!hideVaultFilters\">\n    <div class=\"groupings\">\n      <div class=\"content\">\n        <div class=\"inner-content\">\n          <app-organization-vault-filter\n            [organization]=\"organization\"\n            [activeFilter]=\"activeFilter\"\n            [searchText]=\"currentSearchText$ | async\"\n            (searchTextChanged)=\"filterSearchText($event)\"\n          ></app-organization-vault-filter>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div [class]=\"hideVaultFilters ? 'col-12' : 'col-9'\">\n    <bit-toggle-group\n      *ngIf=\"showAddAccessToggle && activeFilter.selectedCollectionNode\"\n      [selected]=\"addAccessStatus$ | async\"\n      (selectedChange)=\"addAccessToggle($event)\"\n      [attr.aria-label]=\"'addAccessFilter' | i18n\"\n    >\n      <bit-toggle [value]=\"0\">\n        {{ \"all\" | i18n }}\n      </bit-toggle>\n\n      <bit-toggle [value]=\"1\">\n        {{ \"addAccess\" | i18n }}\n      </bit-toggle>\n    </bit-toggle-group>\n    <app-callout type=\"warning\" *ngIf=\"activeFilter.isDeleted\" icon=\"bwi bwi-exclamation-triangle\">\n      {{ trashCleanupWarning }}\n    </app-callout>\n    <app-vault-items\n      [ciphers]=\"ciphers\"\n      [collections]=\"collections\"\n      [allCollections]=\"allCollections\"\n      [allOrganizations]=\"organization ? [organization] : []\"\n      [allGroups]=\"allGroups\"\n      [disabled]=\"loading\"\n      [showOwner]=\"false\"\n      [showPermissionsColumn]=\"true\"\n      [showCollections]=\"filter.type !== undefined\"\n      [showGroups]=\"\n        organization?.useGroups &&\n        ((filter.type === undefined && filter.collectionId === undefined) ||\n          filter.collectionId !== undefined)\n      \"\n      [showPremiumFeatures]=\"organization?.useTotp\"\n      [showBulkMove]=\"false\"\n      [showBulkTrashOptions]=\"filter.type === 'trash'\"\n      [useEvents]=\"organization?.canAccessEventLogs\"\n      [showAdminActions]=\"true\"\n      (onEvent)=\"onVaultItemsEvent($event)\"\n      [showBulkEditCollectionAccess]=\"organization?.flexibleCollections\"\n      [showBulkAddToCollections]=\"organization?.flexibleCollections\"\n      [viewingOrgVault]=\"true\"\n      [flexibleCollectionsV1Enabled]=\"flexibleCollectionsV1Enabled\"\n      [addAccessStatus]=\"addAccessStatus$ | async\"\n      [addAccessToggle]=\"showAddAccessToggle\"\n      [restrictProviderAccess]=\"restrictProviderAccessEnabled\"\n    >\n    </app-vault-items>\n    <ng-container *ngIf=\"!flexibleCollectionsV1Enabled\">\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"showMissingCollectionPermissionMessage\"\n      >\n        <bit-icon [icon]=\"noItemIcon\" aria-hidden=\"true\"></bit-icon>\n        <p>{{ \"noPermissionToViewAllCollectionItems\" | i18n }}</p>\n      </div>\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"isEmpty && !showMissingCollectionPermissionMessage && !performingInitialLoad\"\n      >\n        <bit-icon [icon]=\"noItemIcon\" aria-hidden=\"true\"></bit-icon>\n        <p>{{ \"noItemsInList\" | i18n }}</p>\n        <button\n          type=\"button\"\n          buttonType=\"primary\"\n          bitButton\n          (click)=\"addCipher()\"\n          *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned\"\n        >\n          <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n          {{ \"newItem\" | i18n }}\n        </button>\n      </div></ng-container\n    >\n    <ng-container *ngIf=\"flexibleCollectionsV1Enabled && !performingInitialLoad && isEmpty\">\n      <bit-no-items *ngIf=\"!showCollectionAccessRestricted\">\n        <span slot=\"title\" class=\"tw-mt-4 tw-block\">{{ \"noItemsInList\" | i18n }}</span>\n        <button\n          slot=\"button\"\n          bitButton\n          (click)=\"addCipher()\"\n          buttonType=\"primary\"\n          type=\"button\"\n          *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned\"\n        >\n          <i aria-hidden=\"true\" class=\"bwi bwi-plus\"></i> {{ \"newItem\" | i18n }}\n        </button>\n      </bit-no-items>\n      <collection-access-restricted\n        *ngIf=\"showCollectionAccessRestricted\"\n        [canEditCollection]=\"\n          selectedCollection?.node?.canEdit(organization, flexibleCollectionsV1Enabled)\n        \"\n        [canViewCollectionInfo]=\"\n          selectedCollection?.node?.canViewCollectionInfo(\n            organization,\n            flexibleCollectionsV1Enabled\n          )\n        \"\n        (viewCollectionClicked)=\"\n          editCollection(selectedCollection.node, $event.tab, $event.readonly)\n        \"\n      >\n      </collection-access-restricted>\n    </ng-container>\n    <div\n      class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n      *ngIf=\"performingInitialLoad\"\n    >\n      <i\n        class=\"bwi bwi-spinner bwi-spin text-muted\"\n        title=\"{{ 'loading' | i18n }}\"\n        aria-hidden=\"true\"\n      ></i>\n      <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n    </div>\n  </div>\n</div>\n<ng-template #attachments></ng-template>\n<ng-template #cipherAddEdit></ng-template>\n<ng-template #collectionsModal></ng-template>\n","import {\n  ChangeDetectorRef,\n  Component,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  defer,\n  firstValueFrom,\n  lastValueFrom,\n  Observable,\n  Subject,\n} from \"rxjs\";\nimport {\n  concatMap,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap,\n} from \"rxjs/operators\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserUserDetailsResponse } from \"@bitwarden/common/admin-console/abstractions/organization-user/responses\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { BroadcasterService } from \"@bitwarden/common/platform/abstractions/broadcaster.service\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { OrganizationId } from \"@bitwarden/common/types/guid\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { TotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { ServiceUtils } from \"@bitwarden/common/vault/service-utils\";\nimport { DialogService, Icons, ToastService } from \"@bitwarden/components\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\nimport { GroupService, GroupView } from \"../../admin-console/organizations/core\";\nimport { openEntityEventsDialog } from \"../../admin-console/organizations/manage/entity-events.component\";\nimport { VaultFilterService } from \"../../vault/individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilter } from \"../../vault/individual-vault/vault-filter/shared/models/vault-filter.model\";\nimport {\n  CollectionDialogAction,\n  CollectionDialogTabType,\n  openCollectionDialog,\n} from \"../components/collection-dialog\";\nimport { VaultItemEvent } from \"../components/vault-items/vault-item-event\";\nimport { CollectionAdminService } from \"../core/collection-admin.service\";\nimport { CollectionAdminView } from \"../core/views/collection-admin.view\";\nimport {\n  BulkDeleteDialogResult,\n  openBulkDeleteDialog,\n} from \"../individual-vault/bulk-action-dialogs/bulk-delete-dialog/bulk-delete-dialog.component\";\nimport { CollectionsDialogResult } from \"../individual-vault/collections.component\";\nimport { RoutedVaultFilterBridgeService } from \"../individual-vault/vault-filter/services/routed-vault-filter-bridge.service\";\nimport { RoutedVaultFilterService } from \"../individual-vault/vault-filter/services/routed-vault-filter.service\";\nimport { createFilterFunction } from \"../individual-vault/vault-filter/shared/models/filter-function\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n  Unassigned,\n} from \"../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\nimport { getNestedCollectionTree } from \"../utils/collection-utils\";\n\nimport { AddEditComponent } from \"./add-edit.component\";\nimport { AttachmentsComponent } from \"./attachments.component\";\nimport {\n  BulkCollectionAssignmentDialogComponent,\n  BulkCollectionAssignmentDialogResult,\n} from \"./bulk-collection-assignment-dialog\";\nimport {\n  BulkCollectionsDialogComponent,\n  BulkCollectionsDialogResult,\n} from \"./bulk-collections-dialog\";\nimport { openOrgVaultCollectionsDialog } from \"./collections.component\";\n\nconst BroadcasterSubscriptionId = \"OrgVaultComponent\";\nconst SearchTextDebounceInterval = 200;\n\nenum AddAccessStatusType {\n  All = 0,\n  AddAccess = 1,\n}\n\n@Component({\n  selector: \"app-org-vault\",\n  templateUrl: \"vault.component.html\",\n  providers: [RoutedVaultFilterService, RoutedVaultFilterBridgeService],\n})\nexport class VaultComponent implements OnInit, OnDestroy {\n  protected Unassigned = Unassigned;\n\n  @ViewChild(\"attachments\", { read: ViewContainerRef, static: true })\n  attachmentsModalRef: ViewContainerRef;\n  @ViewChild(\"cipherAddEdit\", { read: ViewContainerRef, static: true })\n  cipherAddEditModalRef: ViewContainerRef;\n  @ViewChild(\"collectionsModal\", { read: ViewContainerRef, static: true })\n  collectionsModalRef: ViewContainerRef;\n\n  trashCleanupWarning: string = null;\n  activeFilter: VaultFilter = new VaultFilter();\n\n  protected showAddAccessToggle = false;\n  protected noItemIcon = Icons.Search;\n  protected performingInitialLoad = true;\n  protected refreshing = false;\n  protected processingEvent = false;\n  protected filter: RoutedVaultFilterModel = {};\n  protected organization: Organization;\n  protected allCollections: CollectionAdminView[];\n  protected allGroups: GroupView[];\n  protected ciphers: CipherView[];\n  protected collections: CollectionAdminView[];\n  protected selectedCollection: TreeNode<CollectionAdminView> | undefined;\n  protected isEmpty: boolean;\n  /**\n   * Used to show an old missing permission message for custom users with DeleteAnyCollection\n   * @deprecated Replaced with showCollectionAccessRestricted$ and this should be removed after flexible collections V1\n   * is released\n   */\n  protected showMissingCollectionPermissionMessage: boolean;\n  protected showCollectionAccessRestricted: boolean;\n  protected currentSearchText$: Observable<string>;\n  /**\n   * A list of collections that the user can assign items to and edit those items within.\n   * @protected\n   */\n  protected editableCollections$: Observable<CollectionAdminView[]>;\n  protected allCollectionsWithoutUnassigned$: Observable<CollectionAdminView[]>;\n  private _flexibleCollectionsV1FlagEnabled: boolean;\n\n  protected get flexibleCollectionsV1Enabled(): boolean {\n    return this._flexibleCollectionsV1FlagEnabled && this.organization?.flexibleCollections;\n  }\n  protected orgRevokedUsers: OrganizationUserUserDetailsResponse[];\n\n  private _restrictProviderAccessFlagEnabled: boolean;\n  protected get restrictProviderAccessEnabled(): boolean {\n    return this._restrictProviderAccessFlagEnabled && this.flexibleCollectionsV1Enabled;\n  }\n\n  protected get hideVaultFilters(): boolean {\n    return this.restrictProviderAccessEnabled && this.organization?.isProviderUser;\n  }\n\n  private searchText$ = new Subject<string>();\n  private refresh$ = new BehaviorSubject<void>(null);\n  private destroy$ = new Subject<void>();\n  protected addAccessStatus$ = new BehaviorSubject<AddAccessStatusType>(0);\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    protected vaultFilterService: VaultFilterService,\n    private routedVaultFilterBridgeService: RoutedVaultFilterBridgeService,\n    private routedVaultFilterService: RoutedVaultFilterService,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private syncService: SyncService,\n    private i18nService: I18nService,\n    private modalService: ModalService,\n    private dialogService: DialogService,\n    private messagingService: MessagingService,\n    private broadcasterService: BroadcasterService,\n    private ngZone: NgZone,\n    private platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private passwordRepromptService: PasswordRepromptService,\n    private collectionAdminService: CollectionAdminService,\n    private searchService: SearchService,\n    private searchPipe: SearchPipe,\n    private groupService: GroupService,\n    private logService: LogService,\n    private eventCollectionService: EventCollectionService,\n    private totpService: TotpService,\n    private apiService: ApiService,\n    private collectionService: CollectionService,\n    private organizationUserService: OrganizationUserService,\n    protected configService: ConfigService,\n    private toastService: ToastService,\n  ) {}\n\n  async ngOnInit() {\n    this.trashCleanupWarning = this.i18nService.t(\n      this.platformUtilsService.isSelfHost()\n        ? \"trashCleanupWarningSelfHosted\"\n        : \"trashCleanupWarning\",\n    );\n\n    this._flexibleCollectionsV1FlagEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.FlexibleCollectionsV1,\n    );\n\n    this._restrictProviderAccessFlagEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.RestrictProviderAccess,\n    );\n\n    const filter$ = this.routedVaultFilterService.filter$;\n    const organizationId$ = filter$.pipe(\n      map((filter) => filter.organizationId),\n      filter((filter) => filter !== undefined),\n      distinctUntilChanged(),\n    );\n\n    const organization$ = organizationId$.pipe(\n      switchMap((organizationId) => this.organizationService.get$(organizationId)),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: false, bufferSize: 1 }),\n    );\n\n    const firstSetup$ = combineLatest([organization$, this.route.queryParams]).pipe(\n      first(),\n      switchMap(async ([organization]) => {\n        this.organization = organization;\n\n        if (!organization.canEditAnyCollection(this.flexibleCollectionsV1Enabled)) {\n          await this.syncService.fullSync(false);\n        }\n\n        return undefined;\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.broadcasterService.subscribe(BroadcasterSubscriptionId, (message: any) => {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.ngZone.run(async () => {\n        switch (message.command) {\n          case \"syncCompleted\":\n            if (message.successfully) {\n              this.refresh();\n              this.changeDetectorRef.detectChanges();\n            }\n            break;\n        }\n      });\n    });\n\n    this.routedVaultFilterBridgeService.activeFilter$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((activeFilter) => {\n        this.activeFilter = activeFilter;\n\n        // watch the active filters. Only show toggle when viewing the collections filter\n        if (!this.activeFilter.collectionId) {\n          this.showAddAccessToggle = false;\n        }\n      });\n\n    this.searchText$\n      .pipe(debounceTime(SearchTextDebounceInterval), takeUntil(this.destroy$))\n      .subscribe((searchText) =>\n        this.router.navigate([], {\n          queryParams: { search: Utils.isNullOrEmpty(searchText) ? null : searchText },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        }),\n      );\n\n    this.currentSearchText$ = this.route.queryParams.pipe(map((queryParams) => queryParams.search));\n\n    this.allCollectionsWithoutUnassigned$ = combineLatest([\n      organizationId$.pipe(switchMap((orgId) => this.collectionAdminService.getAll(orgId))),\n      defer(() => this.collectionService.getAllDecrypted()),\n    ]).pipe(\n      map(([adminCollections, syncCollections]) => {\n        const syncCollectionDict = Object.fromEntries(syncCollections.map((c) => [c.id, c]));\n\n        return adminCollections.map((collection) => {\n          const currentId: any = collection.id;\n\n          const match = syncCollectionDict[currentId];\n\n          if (match) {\n            collection.manage = match.manage;\n            collection.readOnly = match.readOnly;\n            collection.hidePasswords = match.hidePasswords;\n          }\n          return collection;\n        });\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.editableCollections$ = this.allCollectionsWithoutUnassigned$.pipe(\n      map((collections) => {\n        // If restricted, providers can not add items to any collections or edit those items\n        if (this.organization.isProviderUser && this.restrictProviderAccessEnabled) {\n          return [];\n        }\n        // Users that can edit all ciphers can implicitly add to / edit within any collection\n        if (\n          this.organization.canEditAllCiphers(\n            this.flexibleCollectionsV1Enabled,\n            this.restrictProviderAccessEnabled,\n          )\n        ) {\n          return collections;\n        }\n        // The user is only allowed to add/edit items to assigned collections that are not readonly\n        return collections.filter((c) => c.assigned && !c.readOnly);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const allCollections$ = combineLatest([\n      organizationId$,\n      this.allCollectionsWithoutUnassigned$,\n    ]).pipe(\n      map(([organizationId, allCollections]) => {\n        const noneCollection = new CollectionAdminView();\n        noneCollection.name = this.i18nService.t(\"unassigned\");\n        noneCollection.id = Unassigned;\n        noneCollection.organizationId = organizationId;\n        return allCollections.concat(noneCollection);\n      }),\n    );\n\n    const allGroups$ = organizationId$.pipe(\n      switchMap((organizationId) => this.groupService.getAll(organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const allCiphers$ = organization$.pipe(\n      concatMap(async (organization) => {\n        // If user swaps organization reset the addAccessToggle\n        if (!this.showAddAccessToggle || organization) {\n          this.addAccessToggle(0);\n        }\n        let ciphers;\n\n        if (organization.isProviderUser && this.restrictProviderAccessEnabled) {\n          return [];\n        }\n\n        if (this.flexibleCollectionsV1Enabled) {\n          // Flexible collections V1 logic.\n          // If the user can edit all ciphers for the organization then fetch them ALL.\n          if (\n            organization.canEditAllCiphers(\n              this.flexibleCollectionsV1Enabled,\n              this.restrictProviderAccessEnabled,\n            )\n          ) {\n            ciphers = await this.cipherService.getAllFromApiForOrganization(organization.id);\n          } else {\n            // Otherwise, only fetch ciphers they have access to (includes unassigned for admins).\n            ciphers = await this.cipherService.getManyFromApiForOrganization(organization.id);\n          }\n        } else {\n          // Pre-flexible collections logic, to be removed after flexible collections is fully released\n          if (\n            organization.canEditAllCiphers(\n              this.flexibleCollectionsV1Enabled,\n              this.restrictProviderAccessEnabled,\n            )\n          ) {\n            ciphers = await this.cipherService.getAllFromApiForOrganization(organization.id);\n          } else {\n            ciphers = (await this.cipherService.getAllDecrypted()).filter(\n              (c) => c.organizationId === organization.id,\n            );\n          }\n        }\n\n        await this.searchService.indexCiphers(ciphers, organization.id);\n        return ciphers;\n      }),\n    );\n\n    const allCipherMap$ = allCiphers$.pipe(\n      map((ciphers) => {\n        return Object.fromEntries(ciphers.map((c) => [c.id, c]));\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const nestedCollections$ = allCollections$.pipe(\n      map((collections) => getNestedCollectionTree(collections)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    // This will be passed into the usersCanManage call\n    this.orgRevokedUsers = (\n      await this.organizationUserService.getAllUsers(await firstValueFrom(organizationId$))\n    ).data.filter((user: OrganizationUserUserDetailsResponse) => {\n      return user.status === -1;\n    });\n\n    const collections$ = combineLatest([\n      nestedCollections$,\n      filter$,\n      this.currentSearchText$,\n      this.addAccessStatus$,\n    ]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      concatMap(async ([collections, filter, searchText, addAccessStatus]) => {\n        if (\n          filter.collectionId === Unassigned ||\n          (filter.collectionId === undefined && filter.type !== undefined)\n        ) {\n          return [];\n        }\n\n        this.showAddAccessToggle = false;\n        let collectionsToReturn = [];\n        if (filter.collectionId === undefined || filter.collectionId === All) {\n          collectionsToReturn = collections.map((c) => c.node);\n        } else {\n          const selectedCollection = ServiceUtils.getTreeNodeObjectFromList(\n            collections,\n            filter.collectionId,\n          );\n          collectionsToReturn = selectedCollection?.children.map((c) => c.node) ?? [];\n        }\n\n        if (await this.searchService.isSearchable(searchText)) {\n          collectionsToReturn = this.searchPipe.transform(\n            collectionsToReturn,\n            searchText,\n            (collection: CollectionAdminView) => collection.name,\n            (collection: CollectionAdminView) => collection.id,\n          );\n        }\n\n        // Add access toggle is only shown if allowAdminAccessToAllCollectionItems is false and there are unmanaged collections the user can edit\n        this.showAddAccessToggle =\n          this.flexibleCollectionsV1Enabled &&\n          !this.organization.allowAdminAccessToAllCollectionItems &&\n          this.organization.canEditUnmanagedCollections() &&\n          collectionsToReturn.some((c) => c.unmanaged);\n\n        if (addAccessStatus === 1 && this.showAddAccessToggle) {\n          collectionsToReturn = collectionsToReturn.filter((c) => c.unmanaged);\n        }\n        return collectionsToReturn;\n      }),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const selectedCollection$ = combineLatest([nestedCollections$, filter$]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      map(([collections, filter]) => {\n        if (\n          filter.collectionId === undefined ||\n          filter.collectionId === All ||\n          filter.collectionId === Unassigned\n        ) {\n          return undefined;\n        }\n\n        return ServiceUtils.getTreeNodeObjectFromList(collections, filter.collectionId);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const showCollectionAccessRestricted$ = combineLatest([\n      filter$,\n      selectedCollection$,\n      organization$,\n    ]).pipe(\n      map(([filter, collection, organization]) => {\n        if (organization.isProviderUser && this.restrictProviderAccessEnabled) {\n          return collection != undefined || filter.collectionId === Unassigned;\n        }\n\n        return (\n          (filter.collectionId === Unassigned &&\n            !organization.canEditUnassignedCiphers(this.restrictProviderAccessEnabled)) ||\n          (!organization.canEditAllCiphers(\n            this.flexibleCollectionsV1Enabled,\n            this.restrictProviderAccessEnabled,\n          ) &&\n            collection != undefined &&\n            !collection.node.assigned)\n        );\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const ciphers$ = combineLatest([\n      allCiphers$,\n      filter$,\n      this.currentSearchText$,\n      showCollectionAccessRestricted$,\n    ]).pipe(\n      filter(([ciphers, filter]) => ciphers != undefined && filter != undefined),\n      concatMap(async ([ciphers, filter, searchText, showCollectionAccessRestricted]) => {\n        if (filter.collectionId === undefined && filter.type === undefined) {\n          return [];\n        }\n\n        if (this.flexibleCollectionsV1Enabled && showCollectionAccessRestricted) {\n          // Do not show ciphers for restricted collections\n          // Ciphers belonging to multiple collections may still be present in $allCiphers and shouldn't be visible\n          return [];\n        }\n\n        const filterFunction = createFilterFunction(filter);\n\n        if (await this.searchService.isSearchable(searchText)) {\n          return await this.searchService.searchCiphers(searchText, [filterFunction], ciphers);\n        }\n\n        return ciphers.filter(filterFunction);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const showMissingCollectionPermissionMessage$ = combineLatest([\n      filter$,\n      selectedCollection$,\n      organization$,\n    ]).pipe(\n      map(([filter, collection, organization]) => {\n        return (\n          // Filtering by unassigned, show message if not admin\n          (filter.collectionId === Unassigned &&\n            !organization.canEditUnassignedCiphers(this.restrictProviderAccessEnabled)) ||\n          // Filtering by a collection, so show message if user is not assigned\n          (collection != undefined &&\n            !collection.node.assigned &&\n            !organization.canEditAnyCollection(this.flexibleCollectionsV1Enabled))\n        );\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, organization$])),\n        switchMap(async ([qParams, organization]) => {\n          const cipherId = getCipherIdFromParams(qParams);\n          if (!cipherId) {\n            return;\n          }\n\n          let canEditCipher: boolean;\n\n          if (this.flexibleCollectionsV1Enabled) {\n            canEditCipher =\n              organization.canEditAllCiphers(true, this.restrictProviderAccessEnabled) ||\n              (await firstValueFrom(allCipherMap$))[cipherId] != undefined;\n          } else {\n            canEditCipher =\n              organization.canEditAnyCollection(this.flexibleCollectionsV1Enabled) ||\n              (await this.cipherService.get(cipherId)) != null;\n          }\n\n          if (canEditCipher) {\n            await this.editCipherId(cipherId);\n          } else {\n            this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"unknownCipher\"));\n            await this.router.navigate([], {\n              queryParams: { cipherId: null, itemId: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, organization$, allCiphers$])),\n        switchMap(async ([qParams, organization, allCiphers$]) => {\n          const cipherId = qParams.viewEvents;\n          if (!cipherId) {\n            return;\n          }\n          const cipher = allCiphers$.find((c) => c.id === cipherId);\n          if (organization.useEvents && cipher != undefined) {\n            // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.viewEvents(cipher);\n          } else {\n            this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"unknownCipher\"));\n            // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.router.navigate([], {\n              queryParams: { viewEvents: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n\n    firstSetup$\n      .pipe(\n        switchMap(() => this.refresh$),\n        tap(() => (this.refreshing = true)),\n        switchMap(() =>\n          combineLatest([\n            organization$,\n            filter$,\n            allCollections$,\n            allGroups$,\n            ciphers$,\n            collections$,\n            selectedCollection$,\n            showMissingCollectionPermissionMessage$,\n            showCollectionAccessRestricted$,\n          ]),\n        ),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(\n        ([\n          organization,\n          filter,\n          allCollections,\n          allGroups,\n          ciphers,\n          collections,\n          selectedCollection,\n          showMissingCollectionPermissionMessage,\n          showCollectionAccessRestricted,\n        ]) => {\n          this.organization = organization;\n          this.filter = filter;\n          this.allCollections = allCollections;\n          this.allGroups = allGroups;\n          this.ciphers = ciphers;\n          this.collections = collections;\n          this.selectedCollection = selectedCollection;\n          this.showMissingCollectionPermissionMessage = showMissingCollectionPermissionMessage;\n          this.showCollectionAccessRestricted = showCollectionAccessRestricted;\n\n          this.isEmpty = collections?.length === 0 && ciphers?.length === 0;\n\n          // This is a temporary fix to avoid double fetching collections.\n          // TODO: Remove when implementing new VVR menu\n          this.vaultFilterService.reloadCollections(allCollections);\n\n          this.refreshing = false;\n          this.performingInitialLoad = false;\n        },\n      );\n  }\n\n  addAccessToggle(e: AddAccessStatusType) {\n    this.addAccessStatus$.next(e);\n  }\n\n  get loading() {\n    return this.refreshing || this.processingEvent;\n  }\n\n  ngOnDestroy() {\n    this.broadcasterService.unsubscribe(BroadcasterSubscriptionId);\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async onVaultItemsEvent(event: VaultItemEvent) {\n    this.processingEvent = true;\n\n    try {\n      if (event.type === \"viewAttachments\") {\n        await this.editCipherAttachments(event.item);\n      } else if (event.type === \"viewCipherCollections\") {\n        await this.editCipherCollections(event.item);\n      } else if (event.type === \"clone\") {\n        await this.cloneCipher(event.item);\n      } else if (event.type === \"restore\") {\n        if (event.items.length === 1) {\n          await this.restore(event.items[0]);\n        } else {\n          await this.bulkRestore(event.items);\n        }\n      } else if (event.type === \"delete\") {\n        const ciphers = event.items.filter((i) => i.collection === undefined).map((i) => i.cipher);\n        const collections = event.items\n          .filter((i) => i.cipher === undefined)\n          .map((i) => i.collection);\n        if (ciphers.length === 1 && collections.length === 0) {\n          await this.deleteCipher(ciphers[0]);\n        } else if (ciphers.length === 0 && collections.length === 1) {\n          await this.deleteCollection(collections[0] as CollectionAdminView);\n        } else {\n          await this.bulkDelete(ciphers, collections, this.organization);\n        }\n      } else if (event.type === \"copyField\") {\n        await this.copy(event.item, event.field);\n      } else if (event.type === \"editCollection\") {\n        await this.editCollection(\n          event.item as CollectionAdminView,\n          CollectionDialogTabType.Info,\n          event.readonly,\n        );\n      } else if (event.type === \"viewCollectionAccess\") {\n        await this.editCollection(\n          event.item as CollectionAdminView,\n          CollectionDialogTabType.Access,\n          event.readonly,\n        );\n      } else if (event.type === \"bulkEditCollectionAccess\") {\n        await this.bulkEditCollectionAccess(event.items, this.organization);\n      } else if (event.type === \"assignToCollections\") {\n        await this.bulkAssignToCollections(event.items);\n      } else if (event.type === \"viewEvents\") {\n        await this.viewEvents(event.item);\n      }\n    } finally {\n      this.processingEvent = false;\n    }\n  }\n\n  filterSearchText(searchText: string) {\n    this.searchText$.next(searchText);\n  }\n\n  async editCipherAttachments(cipher: CipherView) {\n    if (cipher?.reprompt !== 0 && !(await this.passwordRepromptService.showPasswordPrompt())) {\n      this.go({ cipherId: null, itemId: null });\n      return;\n    }\n\n    if (this.organization.maxStorageGb == null || this.organization.maxStorageGb === 0) {\n      this.messagingService.send(\"upgradeOrganization\", { organizationId: cipher.organizationId });\n      return;\n    }\n\n    let madeAttachmentChanges = false;\n\n    const [modal] = await this.modalService.openViewRef(\n      AttachmentsComponent,\n      this.attachmentsModalRef,\n      (comp) => {\n        comp.organization = this.organization;\n        comp.cipherId = cipher.id;\n        comp.onUploadedAttachment\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(() => (madeAttachmentChanges = true));\n        comp.onDeletedAttachment\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(() => (madeAttachmentChanges = true));\n      },\n    );\n\n    modal.onClosed.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (madeAttachmentChanges) {\n        this.refresh();\n      }\n      madeAttachmentChanges = false;\n    });\n  }\n\n  async editCipherCollections(cipher: CipherView) {\n    let collections: CollectionAdminView[] = [];\n\n    if (this.flexibleCollectionsV1Enabled) {\n      // V1 limits admins to only adding items to collections they have access to.\n      collections = await firstValueFrom(\n        this.allCollectionsWithoutUnassigned$.pipe(\n          map((c) => {\n            return c.sort((a, b) => {\n              if (\n                a.canEditItems(this.organization, true, this.restrictProviderAccessEnabled) &&\n                !b.canEditItems(this.organization, true, this.restrictProviderAccessEnabled)\n              ) {\n                return -1;\n              } else if (\n                !a.canEditItems(this.organization, true, this.restrictProviderAccessEnabled) &&\n                b.canEditItems(this.organization, true, this.restrictProviderAccessEnabled)\n              ) {\n                return 1;\n              } else {\n                return a.name.localeCompare(b.name);\n              }\n            });\n          }),\n        ),\n      );\n    } else {\n      collections = await firstValueFrom(this.allCollectionsWithoutUnassigned$);\n    }\n    const dialog = openOrgVaultCollectionsDialog(this.dialogService, {\n      data: {\n        collectionIds: cipher.collectionIds,\n        collections: collections,\n        organization: this.organization,\n        cipherId: cipher.id,\n      },\n    });\n\n    if ((await lastValueFrom(dialog.closed)) == CollectionsDialogResult.Saved) {\n      this.refresh();\n    }\n  }\n\n  async addCipher() {\n    let collections: CollectionView[] = [];\n\n    if (this.flexibleCollectionsV1Enabled) {\n      // V1 limits admins to only adding items to collections they have access to.\n      collections = await firstValueFrom(this.editableCollections$);\n    } else {\n      collections = (await firstValueFrom(this.vaultFilterService.filteredCollections$)).filter(\n        (c) => !c.readOnly && c.id != Unassigned,\n      );\n    }\n\n    await this.editCipher(null, (comp) => {\n      comp.type = this.activeFilter.cipherType;\n      comp.collections = collections;\n      if (this.activeFilter.collectionId) {\n        comp.collectionIds = [this.activeFilter.collectionId];\n      }\n    });\n  }\n\n  async navigateToCipher(cipher: CipherView) {\n    this.go({ itemId: cipher?.id });\n  }\n\n  async editCipher(\n    cipher: CipherView,\n    additionalComponentParameters?: (comp: AddEditComponent) => void,\n  ) {\n    return this.editCipherId(cipher?.id, additionalComponentParameters);\n  }\n\n  async editCipherId(\n    cipherId: string,\n    additionalComponentParameters?: (comp: AddEditComponent) => void,\n  ) {\n    const cipher = await this.cipherService.get(cipherId);\n    // if cipher exists (cipher is null when new) and MP reprompt\n    // is on for this cipher, then show password reprompt\n    if (\n      cipher &&\n      cipher.reprompt !== 0 &&\n      !(await this.passwordRepromptService.showPasswordPrompt())\n    ) {\n      // didn't pass password prompt, so don't open add / edit modal\n      this.go({ cipherId: null, itemId: null });\n      return;\n    }\n\n    const defaultComponentParameters = (comp: AddEditComponent) => {\n      comp.organization = this.organization;\n      comp.organizationId = this.organization.id;\n      comp.cipherId = cipherId;\n      comp.onSavedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onDeletedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onRestoredCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n    };\n\n    const [modal, childComponent] = await this.modalService.openViewRef(\n      AddEditComponent,\n      this.cipherAddEditModalRef,\n      additionalComponentParameters == null\n        ? defaultComponentParameters\n        : (comp) => {\n            defaultComponentParameters(comp);\n            additionalComponentParameters(comp);\n          },\n    );\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    modal.onClosedPromise().then(() => {\n      this.go({ cipherId: null, itemId: null });\n    });\n\n    return childComponent;\n  }\n\n  async cloneCipher(cipher: CipherView) {\n    if (cipher.login?.hasFido2Credentials) {\n      const confirmed = await this.dialogService.openSimpleDialog({\n        title: { key: \"passkeyNotCopied\" },\n        content: { key: \"passkeyNotCopiedAlert\" },\n        type: \"info\",\n      });\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    let collections: CollectionView[] = [];\n\n    if (this.flexibleCollectionsV1Enabled) {\n      // V1 limits admins to only adding items to collections they have access to.\n      collections = await firstValueFrom(this.editableCollections$);\n    } else {\n      collections = (await firstValueFrom(this.vaultFilterService.filteredCollections$)).filter(\n        (c) => !c.readOnly && c.id != Unassigned,\n      );\n    }\n\n    await this.editCipher(cipher, (comp) => {\n      comp.cloneMode = true;\n      comp.collections = collections;\n      comp.collectionIds = cipher.collectionIds;\n    });\n  }\n\n  async restore(c: CipherView): Promise<boolean> {\n    if (!c.isDeleted) {\n      return;\n    }\n\n    if (\n      !this.organization.permissions.editAnyCollection &&\n      this.flexibleCollectionsV1Enabled &&\n      !c.edit &&\n      !this.organization.allowAdminAccessToAllCollectionItems\n    ) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    // Allow restore of an Unassigned Item\n    try {\n      const asAdmin =\n        this.organization?.canEditAnyCollection(this.flexibleCollectionsV1Enabled) ||\n        c.isUnassigned;\n      await this.cipherService.restoreWithServer(c.id, asAdmin);\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"restoredItem\"));\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkRestore(ciphers: CipherView[]) {\n    if (\n      !this.organization.permissions.editAnyCollection &&\n      this.flexibleCollectionsV1Enabled &&\n      ciphers.some((c) => !c.edit && !this.organization.allowAdminAccessToAllCollectionItems)\n    ) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    // assess if there are unassigned ciphers and/or editable ciphers selected in bulk for restore\n    const editAccessCiphers: string[] = [];\n    const unassignedCiphers: string[] = [];\n\n    // If user has edit all Access no need to check for unassigned ciphers\n    const canEditAll = this.organization.canEditAllCiphers(\n      this.flexibleCollectionsV1Enabled,\n      this.restrictProviderAccessEnabled,\n    );\n\n    if (canEditAll) {\n      ciphers.map((cipher) => {\n        editAccessCiphers.push(cipher.id);\n      });\n    } else {\n      ciphers.map((cipher) => {\n        if (cipher.collectionIds.length === 0) {\n          unassignedCiphers.push(cipher.id);\n        } else if (cipher.edit) {\n          editAccessCiphers.push(cipher.id);\n        }\n      });\n    }\n\n    if (unassignedCiphers.length === 0 && editAccessCiphers.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n      return;\n    }\n\n    if (unassignedCiphers.length > 0 || editAccessCiphers.length > 0) {\n      await this.cipherService.restoreManyWithServer(\n        [...unassignedCiphers, ...editAccessCiphers],\n        this.organization.id,\n      );\n    }\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"restoredItems\"));\n    this.refresh();\n  }\n\n  async deleteCipher(c: CipherView): Promise<boolean> {\n    if (\n      this.flexibleCollectionsV1Enabled &&\n      !c.edit &&\n      !this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccessEnabled,\n      )\n    ) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    const permanent = c.isDeleted;\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: permanent ? \"permanentlyDeleteItem\" : \"deleteItem\" },\n      content: { key: permanent ? \"permanentlyDeleteItemConfirmation\" : \"deleteItemConfirmation\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.deleteCipherWithServer(c.id, permanent, c.isUnassigned);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(permanent ? \"permanentlyDeletedItem\" : \"deletedItem\"),\n      );\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteCollection(collection: CollectionAdminView): Promise<void> {\n    if (!collection.canDelete(this.organization, this.flexibleCollectionsV1Enabled)) {\n      this.showMissingPermissionsError();\n      return;\n    }\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: collection.name,\n      content: { key: \"deleteCollectionConfirmation\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return;\n    }\n    try {\n      await this.apiService.deleteCollection(this.organization?.id, collection.id);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedCollectionId\", collection.name),\n      );\n\n      // Navigate away if we deleted the collection we were viewing\n      if (this.selectedCollection?.node.id === collection.id) {\n        void this.router.navigate([], {\n          queryParams: { collectionId: this.selectedCollection.parent?.node.id ?? null },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        });\n      }\n\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkDelete(\n    ciphers: CipherView[],\n    collections: CollectionView[],\n    organization: Organization,\n  ) {\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    // Allow bulk deleting of Unassigned Items\n    const unassignedCiphers: string[] = [];\n    const assignedCiphers: string[] = [];\n\n    ciphers.map((c) => {\n      if (c.isUnassigned) {\n        unassignedCiphers.push(c.id);\n      } else {\n        assignedCiphers.push(c.id);\n      }\n    });\n\n    if (ciphers.length === 0 && collections.length === 0) {\n      this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"nothingSelected\"));\n      return;\n    }\n\n    const canDeleteCollections =\n      collections == null ||\n      collections.every((c) => c.canDelete(organization, this.flexibleCollectionsV1Enabled));\n    const canDeleteCiphers =\n      ciphers == null ||\n      ciphers.every((c) => c.edit) ||\n      this.organization.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccessEnabled,\n      );\n\n    if (this.flexibleCollectionsV1Enabled && (!canDeleteCiphers || !canDeleteCollections)) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    const dialog = openBulkDeleteDialog(this.dialogService, {\n      data: {\n        permanent: this.filter.type === \"trash\",\n        cipherIds: assignedCiphers,\n        collections: collections,\n        organization,\n        unassignedCiphers,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkDeleteDialogResult.Deleted) {\n      this.refresh();\n    }\n  }\n\n  async copy(cipher: CipherView, field: \"username\" | \"password\" | \"totp\") {\n    let aType;\n    let value;\n    let typeI18nKey;\n\n    if (field === \"username\") {\n      aType = \"Username\";\n      value = cipher.login.username;\n      typeI18nKey = \"username\";\n    } else if (field === \"password\") {\n      aType = \"Password\";\n      value = cipher.login.password;\n      typeI18nKey = \"password\";\n    } else if (field === \"totp\") {\n      aType = \"TOTP\";\n      value = await this.totpService.getCode(cipher.login.totp);\n      typeI18nKey = \"verificationCodeTotp\";\n    } else {\n      this.platformUtilsService.showToast(\"info\", null, this.i18nService.t(\"unexpectedError\"));\n      return;\n    }\n\n    if (\n      this.passwordRepromptService.protectedFields().includes(aType) &&\n      !(await this.repromptCipher([cipher]))\n    ) {\n      return;\n    }\n\n    if (!cipher.viewPassword) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.platformUtilsService.showToast(\n      \"info\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(typeI18nKey)),\n    );\n\n    if (field === \"password\") {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.eventCollectionService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (field === \"totp\") {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.eventCollectionService.collect(EventType.Cipher_ClientCopiedHiddenField, cipher.id);\n    }\n  }\n\n  async addCollection(): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: {\n        organizationId: this.organization?.id,\n        parentCollectionId: this.selectedCollection?.node.id,\n        limitNestedCollections: !this.organization.canEditAnyCollection(\n          this.flexibleCollectionsV1Enabled,\n        ),\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (\n      result.action === CollectionDialogAction.Saved ||\n      result.action === CollectionDialogAction.Deleted\n    ) {\n      this.refresh();\n    }\n  }\n\n  async editCollection(\n    c: CollectionAdminView,\n    tab: CollectionDialogTabType,\n    readonly: boolean,\n  ): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: {\n        collectionId: c?.id,\n        organizationId: this.organization?.id,\n        initialTab: tab,\n        readonly: readonly,\n        isAddAccessCollection: c.unmanaged,\n        limitNestedCollections: !this.organization.canEditAnyCollection(\n          this.flexibleCollectionsV1Enabled,\n        ),\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (\n      result.action === CollectionDialogAction.Saved ||\n      result.action === CollectionDialogAction.Deleted\n    ) {\n      this.refresh();\n\n      // If we deleted the selected collection, navigate up/away\n      if (\n        result.action === CollectionDialogAction.Deleted &&\n        this.selectedCollection?.node.id === c?.id\n      ) {\n        void this.router.navigate([], {\n          queryParams: { collectionId: this.selectedCollection.parent?.node.id ?? null },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        });\n      }\n    }\n  }\n\n  async bulkEditCollectionAccess(\n    collections: CollectionView[],\n    organization: Organization,\n  ): Promise<void> {\n    if (collections.length === 0) {\n      this.toastService.showToast({\n        variant: \"error\",\n        title: null,\n        message: this.i18nService.t(\"noCollectionsSelected\"),\n      });\n      return;\n    }\n\n    if (\n      this.flexibleCollectionsV1Enabled &&\n      collections.some((c) => !c.canEdit(organization, this.flexibleCollectionsV1Enabled))\n    ) {\n      this.showMissingPermissionsError();\n      return;\n    }\n\n    const dialog = BulkCollectionsDialogComponent.open(this.dialogService, {\n      data: {\n        collections,\n        organizationId: this.organization?.id,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkCollectionsDialogResult.Saved) {\n      this.refresh();\n    }\n  }\n\n  async bulkAssignToCollections(items: CipherView[]) {\n    if (items.length === 0) {\n      this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"nothingSelected\"));\n      return;\n    }\n\n    let availableCollections: CollectionView[];\n\n    if (this.flexibleCollectionsV1Enabled) {\n      availableCollections = await firstValueFrom(this.editableCollections$);\n    } else {\n      availableCollections = (\n        await firstValueFrom(this.vaultFilterService.filteredCollections$)\n      ).filter((c) => c.id != Unassigned);\n    }\n\n    const dialog = BulkCollectionAssignmentDialogComponent.open(this.dialogService, {\n      data: {\n        ciphers: items,\n        organizationId: this.organization?.id as OrganizationId,\n        availableCollections,\n        activeCollection: this.activeFilter?.selectedCollectionNode?.node,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkCollectionAssignmentDialogResult.Saved) {\n      this.refresh();\n    }\n  }\n\n  async viewEvents(cipher: CipherView) {\n    await openEntityEventsDialog(this.dialogService, {\n      data: {\n        name: cipher.name,\n        organizationId: this.organization.id,\n        entityId: cipher.id,\n        showUser: true,\n        entity: \"cipher\",\n      },\n    });\n  }\n\n  protected deleteCipherWithServer(id: string, permanent: boolean, isUnassigned: boolean) {\n    const asAdmin =\n      this.organization?.canEditAllCiphers(\n        this.flexibleCollectionsV1Enabled,\n        this.restrictProviderAccessEnabled,\n      ) || isUnassigned;\n    return permanent\n      ? this.cipherService.deleteWithServer(id, asAdmin)\n      : this.cipherService.softDeleteWithServer(id, asAdmin);\n  }\n\n  protected async repromptCipher(ciphers: CipherView[]) {\n    const notProtected = !ciphers.find((cipher) => cipher.reprompt !== CipherRepromptType.None);\n\n    return notProtected || (await this.passwordRepromptService.showPasswordPrompt());\n  }\n\n  private refresh() {\n    this.refresh$.next();\n  }\n\n  private go(queryParams: any = null) {\n    if (queryParams == null) {\n      queryParams = {\n        type: this.activeFilter.cipherType,\n        collectionId: this.activeFilter.collectionId,\n        deleted: this.activeFilter.isDeleted || null,\n      };\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: queryParams,\n      queryParamsHandling: \"merge\",\n      replaceUrl: true,\n    });\n  }\n\n  protected readonly CollectionDialogTabType = CollectionDialogTabType;\n\n  private showMissingPermissionsError() {\n    this.toastService.showToast({\n      variant: \"error\",\n      title: null,\n      message: this.i18nService.t(\"missingPermissions\"),\n    });\n  }\n}\n\n/**\n * Allows backwards compatibility with\n * old links that used the original `cipherId` param\n */\nconst getCipherIdFromParams = (params: Params): string => {\n  return params[\"itemId\"] || params[\"cipherId\"];\n};\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessVaultTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { OrganizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\n\nimport { VaultComponent } from \"./vault.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: VaultComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: { titleId: \"vaults\", organizationPermissions: canAccessVaultTab },\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VaultRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule, NoItemsModule, SearchModule } from \"@bitwarden/components\";\n\nimport { LooseComponentsModule } from \"../../shared/loose-components.module\";\nimport { SharedModule } from \"../../shared/shared.module\";\nimport { OrganizationBadgeModule } from \"../../vault/individual-vault/organization-badge/organization-badge.module\";\nimport { PipesModule } from \"../../vault/individual-vault/pipes/pipes.module\";\nimport { CollectionDialogModule } from \"../components/collection-dialog\";\nimport { VaultItemsModule } from \"../components/vault-items/vault-items.module\";\n\nimport { CollectionAccessRestrictedComponent } from \"./collection-access-restricted.component\";\nimport { CollectionBadgeModule } from \"./collection-badge/collection-badge.module\";\nimport { GroupBadgeModule } from \"./group-badge/group-badge.module\";\nimport { VaultFilterModule } from \"./vault-filter/vault-filter.module\";\nimport { VaultHeaderComponent } from \"./vault-header/vault-header.component\";\nimport { VaultRoutingModule } from \"./vault-routing.module\";\nimport { VaultComponent } from \"./vault.component\";\n\n@NgModule({\n  imports: [\n    VaultRoutingModule,\n    VaultFilterModule,\n    SharedModule,\n    LooseComponentsModule,\n    GroupBadgeModule,\n    CollectionBadgeModule,\n    OrganizationBadgeModule,\n    PipesModule,\n    BreadcrumbsModule,\n    VaultItemsModule,\n    CollectionDialogModule,\n    CollectionAccessRestrictedComponent,\n    NoItemsModule,\n    SearchModule,\n  ],\n  declarations: [VaultComponent, VaultHeaderComponent],\n  exports: [VaultComponent],\n})\nexport class VaultModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards\";\nimport {\n  canAccessOrgAdmin,\n  canAccessGroupsTab,\n  canAccessMembersTab,\n  canAccessVaultTab,\n  canAccessReportingTab,\n  canAccessSettingsTab,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { OrganizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\nimport { OrganizationRedirectGuard } from \"../../admin-console/organizations/guards/org-redirect.guard\";\nimport { OrganizationLayoutComponent } from \"../../admin-console/organizations/layouts/organization-layout.component\";\nimport { GroupsComponent } from \"../../admin-console/organizations/manage/groups.component\";\nimport { deepLinkGuard } from \"../../auth/guards/deep-link.guard\";\nimport { VaultModule } from \"../../vault/org-vault/vault.module\";\n\nconst routes: Routes = [\n  {\n    path: \":organizationId\",\n    component: OrganizationLayoutComponent,\n    canActivate: [deepLinkGuard(), AuthGuard, OrganizationPermissionsGuard],\n    data: {\n      organizationPermissions: canAccessOrgAdmin,\n    },\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        canActivate: [OrganizationRedirectGuard],\n        data: {\n          autoRedirectCallback: getOrganizationRoute,\n        },\n        children: [], // This is required to make the auto redirect work, },\n      },\n      {\n        path: \"vault\",\n        loadChildren: () => VaultModule,\n      },\n      {\n        path: \"settings\",\n        loadChildren: () =>\n          import(\"./settings/organization-settings.module\").then(\n            (m) => m.OrganizationSettingsModule,\n          ),\n      },\n      {\n        path: \"members\",\n        loadChildren: () => import(\"./members\").then((m) => m.MembersModule),\n      },\n      {\n        path: \"groups\",\n        component: GroupsComponent,\n        canActivate: [OrganizationPermissionsGuard],\n        data: {\n          titleId: \"groups\",\n          organizationPermissions: canAccessGroupsTab,\n        },\n      },\n      {\n        path: \"reporting\",\n        loadChildren: () =>\n          import(\"../organizations/reporting/organization-reporting.module\").then(\n            (m) => m.OrganizationReportingModule,\n          ),\n      },\n    ],\n  },\n];\n\nfunction getOrganizationRoute(organization: Organization): string {\n  if (canAccessVaultTab(organization)) {\n    return \"vault\";\n  }\n  if (canAccessMembersTab(organization)) {\n    return \"members\";\n  }\n  if (canAccessGroupsTab(organization)) {\n    return \"groups\";\n  }\n  if (canAccessReportingTab(organization)) {\n    return \"reporting\";\n  }\n  if (canAccessSettingsTab(organization)) {\n    return \"settings\";\n  }\n  return undefined;\n}\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrganizationsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { LooseComponentsModule } from \"../../shared\";\n\nimport { CoreOrganizationModule } from \"./core\";\nimport { GroupAddEditComponent } from \"./manage/group-add-edit.component\";\nimport { GroupsComponent } from \"./manage/groups.component\";\nimport { OrganizationsRoutingModule } from \"./organization-routing.module\";\nimport { SharedOrganizationModule } from \"./shared\";\nimport { AccessSelectorModule } from \"./shared/components/access-selector\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    AccessSelectorModule,\n    CoreOrganizationModule,\n    OrganizationsRoutingModule,\n    LooseComponentsModule,\n  ],\n  declarations: [GroupsComponent, GroupAddEditComponent],\n})\nexport class OrganizationModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SearchModule } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../../shared/shared.module\";\n\nimport { AccessSelectorModule } from \"./components/access-selector/access-selector.module\";\n\n@NgModule({\n  imports: [SharedModule, AccessSelectorModule, SearchModule],\n  declarations: [],\n  exports: [SharedModule, AccessSelectorModule, SearchModule],\n})\nexport class SharedOrganizationModule {}\n","import { EventSystemUser, EventType } from \"../../enums\";\n\nexport class EventView {\n  message: string;\n  humanReadableMessage: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: EventType;\n  installationId: string;\n  systemUser: EventSystemUser;\n  serviceAccountId: string;\n\n  constructor(data: Required<EventView>) {\n    this.message = data.message;\n    this.humanReadableMessage = data.humanReadableMessage;\n    this.appIcon = data.appIcon;\n    this.appName = data.appName;\n    this.userId = data.userId;\n    this.userName = data.userName;\n    this.userEmail = data.userEmail;\n    this.date = data.date;\n    this.ip = data.ip;\n    this.type = data.type;\n    this.installationId = data.installationId;\n    this.systemUser = data.systemUser;\n    this.serviceAccountId = data.serviceAccountId;\n  }\n}\n"],"names":["OrganizationPermissionsGuard","constructor","router","organizationService","platformUtilsService","i18nService","syncService","canActivate","route","state","this","getLastSync","fullSync","org","get","params","organizationId","createUrlTree","isOwner","enabled","showToast","t","permissionsCallback","data","organizationPermissions","cipherId","root","queryParamMap","queryParams","itemId","id","OrganizationRedirectGuard","customRedirect","autoRedirectCallback","redirectPath","url","EntityEventsComponent","name","showUser","apiService","eventService","userNamePipe","logService","organizationUserService","formBuilder","validationService","loading","dataSource","filterFormGroup","group","start","end","orgUsersUserIdMap","Map","orgUsersIdMap","loadMoreEvents","loadEvents","refreshEvents","ngOnInit","defaultDates","getDefaultDateFilters","setValue","load","getAllUsers","forEach","u","transform","set","email","userId","e","error","showError","clearExisting","response","dates","formatDateFilters","value","entity","providerId","getEventsProviderUser","entityId","continuationToken","getEventsOrganizationUser","getEventsCipher","events","Promise","all","map","r","actingUserId","eventInfo","getEventInfo","user","has","message","humanReadableMessage","appIcon","appName","userName","userEmail","date","ip","ipAddress","type","installationId","systemUser","serviceAccountId","length","concat","openEntityEventsDialog","dialogService","config","open","GroupAddEditTabType","GroupAddEditDialogResultType","GroupAddEditComponent","groupId","editMode","orgMembers$","from","pipe","m","Member","role","listName","labelName","status","dialogRef","groupService","changeDetectorRef","configService","accountService","collectionAdminService","organization$","get$","shareReplay","refCount","flexibleCollectionsEnabled$","o","flexibleCollections","flexibleCollectionsV1Enabled$","getFeatureFlag$","FlexibleCollectionsV1","PermissionMode","ResultType","collections","members","groupForm","accessAll","required","maxLength","externalId","control","disabled","destroy$","Subject","orgCollections$","getAll","bufferSize","groupDetails$","of","concatMap","combineLatest","getGroupUsers","groupView","users","catchError","toString","undefined","allowAdminAccessToAllCollectionItems$","organization","flexibleCollectionsV1Enabled","allowAdminAccessToAllCollectionItems","canAssignAccessToAnyCollection$","canEditAnyCollection","permissions","manageGroups","cannotAddSelfToGroup$","allowAdminAccess","groupDetails","submit","markAllAsTouched","invalid","tabIndex","Info","formValue","c","save","close","Saved","delete","openSimpleDialog","title","content","key","Deleted","initialTab","activeAccount$","takeUntil","subscribe","restrictGroupAccess","activeAccount","accessSelection","find","access","Collection","readonly","canEditGroupAccess","readonlyPermission","filter","item","some","mapToAccessItemViews","detectChanges","patchValue","mapToAccessSelections","organizationUserId","isAlreadyInGroup","ngOnDestroy","next","complete","items","selection","gc","permission","check","edit","loadMore","toggleAllVisible","deleteAllSelected","GroupsComponent","searchText","_searchText$","updateSearchedGroups","visibleGroups","isPaging","pagedGroups","isSearching","searchedGroups","groups","searchService","collectionService","searchPipe","didScroll","pageSize","ModalTabType","pagedGroupsCount","BehaviorSubject","refreshGroups$","tap","switchMap","getCollections","toCollectionMap","collectionMap","sort","getSortFunction","g","details","checked","collectionNames","collator","compare","resetPaging","first","qParams","search","isSearchable","pagedLength","pagedSize","slice","startingTabIndex","result","lastValueFrom","closed","removeGroup","add","groupRow","groupsToDelete","deleteMessage","join","placeholders","deleteMany","event","target","searching","index","findIndex","splice","decryptedCollections","decryptMany","viewCollectionClicked","tab","CollectionAccessRestrictedComponent","icon","collectionDialogTabType","canEditCollection","canViewCollectionInfo","VaultFilterService","folderService","cipherService","policyService","stateProvider","super","_collections","ReplaySubject","filteredCollections$","asObservable","collectionTree$","buildCollectionTree","reloadCollections","VaultFilterModule","provide","useClass","reupload","download","AttachmentsComponent","cryptoService","stateService","fileDownloadService","billingAccountProfileStateService","viewOnly","restrictProviderAccess","firstValueFrom","RestrictProviderAccess","attachment","canEditAllCiphers","showFixOldAttachments","reuploadCipherAttachment","loadCipher","getCipherAdmin","saveCipherAttachment","file","saveAttachmentWithServer","cipherDomain","deleteCipherAttachment","attachmentId","deleteCipherAttachmentAdmin","BulkCollectionAssignmentDialogResult","unselectCollection","BulkCollectionAssignmentDialogComponent","availableCollections","selectedCollections","editableItems","pluralize","count","singular","plural","sortItems","a","b","isValid","cipherIds","i","bulkUpdateCollectionsWithServer","activeCollection","ciphers","Canceled","v1FCEnabled","getFeatureFlag","editableItemCount","totalItemCount","readonlyItemCount","selectCollections","removed","BulkCollectionsDialogResult","BulkCollectionsDialogComponent","formGroup","accessItems","controls","v","Group","bulkAssignAccess","numCollections","groups$","useGroups","selectAll","CollectionsComponent","allowSelectNone","collectionIds","loadCipherCollections","canViewAllCollections","loadCollections","resolve","saveCollections","request","putCipherCollectionsAdmin","onSearchTextChanged","VaultFilterComponent","_organization","vaultFilterService","setOrganizationFilter","filters","buildAllFilters","activeFilter","selectedCipherTypeNode","resetFilter","selectedCollectionNode","getDefaultFilter","isLoaded","ngOnChanges","changes","removeCollapsibleCollection","collapsedNodes","collapsedFilterNodes$","setCollapsedFilterNodes","addCollectionFilter","data$","buildTypeTree","header","showHeader","isSelectable","action","applyCollectionFilter","builderFilter","typeFilter","addTypeFilter","collectionFilter","trashFilter","addTrashFilter","editCollection","deleteCollection","addCipher","addCollection","VaultHeaderComponent","All","Unassigned","onAddCipher","onAddCollection","onEditCollection","onDeleteCollection","searchTextChanged","CollectionDialogTabType","organizations$","restrictProviderAccessFlag","headerType","toLowerCase","collection","node","collectionId","showBreadcrumbs","parent","push","reverse","treeNode","showFreeOrgUpgradeDialog","orgUpgradeSimpleDialogOpts","canEditSubscription","maxCollections","acceptButtonText","cancelButtonText","simpleDialog","openSimpleDialogRef","then","navigate","upgrade","canEdit","emit","planProductType","Free","canDeleteCollection","canDelete","canCreateCollection","canCreateNewCollections","canCreateCipher","isProviderUser","filterSearchText","addAccessToggle","BroadcasterSubscriptionId","AddAccessStatusType","VaultComponent","_flexibleCollectionsV1FlagEnabled","restrictProviderAccessEnabled","_restrictProviderAccessFlagEnabled","hideVaultFilters","routedVaultFilterBridgeService","routedVaultFilterService","modalService","messagingService","broadcasterService","ngZone","passwordRepromptService","eventCollectionService","totpService","toastService","trashCleanupWarning","showAddAccessToggle","noItemIcon","performingInitialLoad","refreshing","processingEvent","searchText$","refresh$","addAccessStatus$","isSelfHost","filter$","organizationId$","distinctUntilChanged","firstSetup$","run","command","successfully","refresh","activeFilter$","debounceTime","isNullOrEmpty","queryParamsHandling","replaceUrl","currentSearchText$","allCollectionsWithoutUnassigned$","orgId","defer","getAllDecrypted","adminCollections","syncCollections","syncCollectionDict","Object","fromEntries","currentId","match","manage","readOnly","hidePasswords","editableCollections$","assigned","allCollections$","allCollections","noneCollection","allGroups$","allCiphers$","getAllFromApiForOrganization","getManyFromApiForOrganization","indexCiphers","allCipherMap$","nestedCollections$","orgRevokedUsers","collections$","addAccessStatus","collectionsToReturn","selectedCollection","getTreeNodeObjectFromList","children","canEditUnmanagedCollections","unmanaged","selectedCollection$","showCollectionAccessRestricted$","canEditUnassignedCiphers","ciphers$","showCollectionAccessRestricted","filterFunction","searchCiphers","showMissingCollectionPermissionMessage$","getCipherIdFromParams","canEditCipher","editCipherId","viewEvents","cipher","useEvents","allGroups","showMissingCollectionPermissionMessage","isEmpty","unsubscribe","onVaultItemsEvent","editCipherAttachments","editCipherCollections","cloneCipher","restore","bulkRestore","deleteCipher","bulkDelete","copy","field","Access","bulkEditCollectionAccess","bulkAssignToCollections","reprompt","showPasswordPrompt","go","maxStorageGb","send","madeAttachmentChanges","modal","openViewRef","attachmentsModalRef","comp","onUploadedAttachment","onDeletedAttachment","onClosed","canEditItems","localeCompare","dialog","editCipher","cipherType","navigateToCipher","additionalComponentParameters","defaultComponentParameters","onSavedCipher","onDeletedCipher","onRestoredCipher","childComponent","cipherAddEditModalRef","onClosedPromise","login","hasFido2Credentials","cloneMode","isDeleted","editAnyCollection","repromptCipher","asAdmin","isUnassigned","restoreWithServer","showMissingPermissionsError","editAccessCiphers","unassignedCiphers","restoreManyWithServer","permanent","deleteCipherWithServer","assignedCiphers","canDeleteCollections","every","canDeleteCiphers","aType","typeI18nKey","username","password","getCode","totp","protectedFields","includes","viewPassword","copyToClipboard","window","collect","Cipher_ClientCopiedPassword","Cipher_ClientCopiedHiddenField","parentCollectionId","limitNestedCollections","isAddAccessCollection","variant","deleteWithServer","softDeleteWithServer","notProtected","None","deleted","relativeTo","routes","path","component","titleId","VaultRoutingModule","forChild","VaultModule","pathMatch","loadChildren","OrganizationSettingsModule","MembersModule","OrganizationReportingModule","OrganizationsRoutingModule","OrganizationModule","SharedOrganizationModule","EventView"],"sourceRoot":""}