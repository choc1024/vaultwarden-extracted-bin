{"version":3,"file":"connectors/duo.6cb16ba5cd338fc881e0.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../node_modules/duo_web_sdk/index.js","webpack://@bitwarden/web-vault/webpack/bootstrap","webpack://@bitwarden/web-vault/webpack/runtime/make namespace object","webpack://@bitwarden/web-vault/./src/connectors/common.ts","webpack://@bitwarden/web-vault/./src/connectors/duo.ts"],"sourcesContent":["/**\n * Duo Web SDK v2\n * Copyright 2021, Duo Security\n */\n\n(function (root, factory) {\n    /*eslint-disable */\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    /*eslint-enable */\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        var Duo = factory();\n        // If the Javascript was loaded via a script tag, attempt to autoload\n        // the frame.\n        Duo._onReady(Duo.init);\n\n        // Attach Duo to the `window` object\n        root.Duo = Duo;\n  }\n}(this, function() {\n    var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\\|[A-Za-z0-9\\+\\/=]+\\|[A-Za-z0-9\\+\\/=]+$/;\n    var DUO_ERROR_FORMAT = /^ERR\\|[\\w\\s\\.\\(\\)]+$/;\n    var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\\|/;\n    var VALID_OPEN_WINDOW_DOMAINS = [\n        'duo.com',\n        'duosecurity.com',\n        'duomobile.s3-us-west-1.amazonaws.com'\n    ];\n\n    var postAction,\n        postArgument,\n        host,\n        sigRequest,\n        duoSig,\n        appSig,\n        iframe,\n        submitCallback;\n\n    // We use this function instead of setting initial values in the var\n    // declarations to make sure the initial values and subsequent\n    // re-initializations are always the same.\n    initializeStatefulVariables();\n\n    /**\n     * Set local variables to whatever they should be before you call init().\n     */\n    function initializeStatefulVariables() {\n        postAction = '';\n        postArgument = 'sig_response';\n        host = undefined;\n        sigRequest = undefined;\n        duoSig = undefined;\n        appSig = undefined;\n        iframe = undefined;\n        submitCallback = undefined;\n    }\n\n    function throwError(message, givenUrl) {\n        var url = (\n            givenUrl ||\n            'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'\n        );\n        throw new Error(\n            'Duo Web SDK error: ' + message +\n            (url ? ('\\n' + 'See ' + url + ' for more information') : '')\n        );\n    }\n\n    function hyphenize(str) {\n        return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();\n    }\n\n    // cross-browser data attributes\n    function getDataAttribute(element, name) {\n        if ('dataset' in element) {\n            return element.dataset[name];\n        } else {\n            return element.getAttribute('data-' + hyphenize(name));\n        }\n    }\n\n    // cross-browser event binding/unbinding\n    function on(context, event, fallbackEvent, callback) {\n        if ('addEventListener' in window) {\n            context.addEventListener(event, callback, false);\n        } else {\n            context.attachEvent(fallbackEvent, callback);\n        }\n    }\n\n    function off(context, event, fallbackEvent, callback) {\n        if ('removeEventListener' in window) {\n            context.removeEventListener(event, callback, false);\n        } else {\n            context.detachEvent(fallbackEvent, callback);\n        }\n    }\n\n    function onReady(callback) {\n        on(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n    }\n\n    function offReady(callback) {\n        off(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n    }\n\n    function onMessage(callback) {\n        on(window, 'message', 'onmessage', callback);\n    }\n\n    function offMessage(callback) {\n        off(window, 'message', 'onmessage', callback);\n    }\n\n    /**\n     * Parse the sig_request parameter, throwing errors if the token contains\n     * a server error or if the token is invalid.\n     *\n     * @param {String} sig Request token\n     */\n    function parseSigRequest(sig) {\n        if (!sig) {\n            // nothing to do\n            return;\n        }\n\n        // see if the token contains an error, throwing it if it does\n        if (sig.indexOf('ERR|') === 0) {\n            throwError(sig.split('|')[1]);\n        }\n\n        // validate the token\n        if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {\n            throwError(\n                'Duo was given a bad token.  This might indicate a configuration ' +\n                'problem with one of Duo\\'s client libraries.'\n            );\n        }\n\n        var sigParts = sig.split(':');\n\n        // hang on to the token, and the parsed duo and app sigs\n        sigRequest = sig;\n        duoSig = sigParts[0];\n        appSig = sigParts[1];\n\n        return {\n            sigRequest: sig,\n            duoSig: sigParts[0],\n            appSig: sigParts[1]\n        };\n    }\n\n    /**\n     * Validate that a MessageEvent came from the Duo service, and that it\n     * is a properly formatted payload.\n     *\n     * The Google Chrome sign-in page injects some JS into pages that also\n     * make use of postMessage, so we need to do additional validation above\n     * and beyond the origin.\n     *\n     * @param {MessageEvent} event Message received via postMessage\n     */\n    function isDuoMessage(event) {\n        return Boolean(\n            event.origin === ('https://' + host) &&\n            typeof event.data === 'string' &&\n            (\n                event.data.match(DUO_MESSAGE_FORMAT) ||\n                event.data.match(DUO_ERROR_FORMAT) ||\n                event.data.match(DUO_OPEN_WINDOW_FORMAT)\n            )\n        );\n    }\n\n    /**\n     * Validate the request token and prepare for the iframe to become ready.\n     *\n     * All options below can be passed into an options hash to `Duo.init`, or\n     * specified on the iframe using `data-` attributes.\n     *\n     * Options specified using the options hash will take precedence over\n     * `data-` attributes.\n     *\n     * Example using options hash:\n     * ```javascript\n     * Duo.init({\n     *     iframe: \"some_other_id\",\n     *     host: \"api-main.duo.test\",\n     *     sig_request: \"...\",\n     *     post_action: \"/auth\",\n     *     post_argument: \"resp\"\n     * });\n     * ```\n     *\n     * Example using `data-` attributes:\n     * ```html\n     * <iframe id=\"duo_iframe\"\n     *         data-host=\"api-main.duo.test\"\n     *         data-sig-request=\"...\"\n     *         data-post-action=\"/auth\"\n     *         data-post-argument=\"resp\"\n     *         >\n     * </iframe>\n     * ```\n     *\n     * Some browsers (especially embedded browsers) don't like it when the Duo\n     * Web SDK changes the `src` attribute on the iframe. To prevent this, there\n     * is an alternative way to use the Duo Web SDK:\n     *\n     * Add a div (or any other container element) instead of an iframe to the\n     * DOM with an id of \"duo_iframe\", or pass that element to the\n     * `iframeContainer` parameter of `Duo.init`. An iframe will be created and\n     * inserted into that container element, preventing `src` change related\n     * bugs. WARNING: All other elements in the container will be deleted.\n     *\n     * The `iframeAttributes` parameter of `Duo.init` is available to set any\n     * attributes on the inserted iframe if the Duo Web SDK is inserting the\n     * iframe. For details, see the parameter documentation below.\n     *\n     * @param {Object} options\n     * @param {String} options.host - Hostname for the Duo Prompt.\n     * @param {String} options.sig_request - Request token.\n     * @param {String|HTMLElement} [options.iframe] - The iframe, or id of an\n     *     iframe that will be used for the Duo Prompt. If you don't provide\n     *     this or the `iframeContainer` parameter the Duo Web SDK will default\n     *     to using whatever element has an id of \"duo_iframe\".\n     * @param {String|HTMLElement} [options.iframeContainer] - The element you\n     *     want the Duo Prompt inserted into, or the id of that element.\n     *     Anything inside this element will be deleted and replaced with an\n     *     iframe hosting the Duo prompt. If you don't provide this or the\n     *     `iframe` parameter the Duo Web SDK will default to using whatever\n     *     element has an id of \"duo_iframe\".\n     * @param {Object} [options.iframeAttributes] - Object with  names and\n     *     values coresponding to attributes you want added to the  Duo Prompt\n     *     iframe, like `title`, `width` and `allow`. WARNING: this parameter\n     *     only works if you use the `iframeContainer` parameter or add an id\n     *     of \"duo_iframe\" to an element that isn't an iframe. If you have\n     *     added an iframe to the DOM yourself, you should set those attributes\n     *     directly on the iframe.\n     * @param {String} [options.post_action=''] - URL to POST back to after a\n     *     successful auth.\n     * @param {String} [options.post_argument='sig_response'] - Parameter name\n     *     to use for response token.\n     * @param {Function} [options.submit_callback] - If provided, the Duo Web\n     *     SDK will not submit the form. Instead it will execute this callback\n     *     function passing in a reference to the \"duo_form\" form object.\n     *     `submit_callback`` can be used to prevent the webpage from reloading.\n     */\n    function init(options) {\n        // If init() is called more than once we have to reset all the local\n        // variables to ensure init() will work the same way every time. This\n        // helps people making single page applications. SPAs may periodically\n        // remove the iframe and add a new one that has to be initialized.\n        initializeStatefulVariables();\n\n        if (options) {\n            if (options.host) {\n                host = options.host;\n            }\n\n            if (options.sig_request) {\n                parseSigRequest(options.sig_request);\n            }\n\n            if (options.post_action) {\n                postAction = options.post_action;\n            }\n\n            if (options.post_argument) {\n                postArgument = options.post_argument;\n            }\n\n            if (typeof options.submit_callback === 'function') {\n                submitCallback = options.submit_callback;\n            }\n        }\n\n        var promptElement = getPromptElement(options);\n        if (promptElement) {\n            // If we can get the element that will host the prompt, set it.\n            ready(promptElement, options.iframeAttributes || {});\n        } else {\n            // If the element that will host the prompt isn't available yet, set\n            // it up after the DOM finishes loading.\n            asyncReady(options);\n        }\n\n        // always clean up after yourself!\n        offReady(init);\n    }\n\n    /**\n     * Given the options from init(), get the iframe or iframe container that\n     * should be used for the Duo Prompt. Returns `null` if nothing was found.\n     */\n    function getPromptElement(options) {\n        var result;\n\n        if (options.iframe && options.iframeContainer) {\n            throwError(\n                'Passing both `iframe` and `iframeContainer` arguments at the' +\n                ' same time is not allowed.'\n            );\n        } else if (options.iframe) {\n            // If we are getting an iframe, try to get it and raise if the\n            // element we find is NOT an iframe.\n            result = getUserDefinedElement(options.iframe);\n            validateIframe(result);\n        } else if (options.iframeContainer) {\n            result = getUserDefinedElement(options.iframeContainer);\n            validateIframeContainer(result);\n        } else {\n            result = document.getElementById('duo_iframe');\n        }\n\n        return result;\n    }\n\n    /**\n     * When given an HTMLElement, return it. When given a string, get an element\n     * with that id, else return null.\n     */\n    function getUserDefinedElement(object) {\n        if (object.tagName) {\n            return object;\n        } else if (typeof object == 'string') {\n            return document.getElementById(object);\n        }\n        return null;\n    }\n\n    /**\n     * Check if the given thing is an iframe.\n     */\n    function isIframe(element) {\n        return (\n            element &&\n            element.tagName &&\n            element.tagName.toLowerCase() === 'iframe'\n        );\n    }\n\n    /**\n     * Throw an error if we are given an element that is NOT an iframe.\n     */\n    function validateIframe(element) {\n        if (element && !isIframe(element)) {\n            throwError(\n                '`iframe` only accepts an iframe element or the id of an' +\n                ' iframe. To use a non-iframe element, use the' +\n                ' `iframeContainer` argument.'\n            );\n        }\n    }\n\n    /**\n     * Throw an error if we are given an element that IS an iframe instead of an\n     * element that we can insert an iframe into.\n     */\n    function validateIframeContainer(element) {\n        if (element && isIframe(element)) {\n            throwError(\n                '`iframeContainer` only accepts a non-iframe element or the' +\n                ' id of a non-iframe. To use a non-iframe element, use the' +\n                ' `iframeContainer` argument on Duo.init().'\n            );\n        }\n    }\n\n    /**\n     * Generate the URL that goes to the Duo Prompt.\n     */\n    function generateIframeSrc() {\n        return [\n            'https://', host, '/frame/web/v1/auth?tx=', encodeURIComponent(duoSig),\n            '&parent=', encodeURIComponent(document.location.href),\n            '&v=2.9'\n        ].join('');\n    }\n\n    /**\n     * This function is called when a message was received from another domain\n     * using the `postMessage` API.  Check that the event came from the Duo\n     * service domain, and that the message is a properly formatted payload,\n     * then perform the post back to the primary service.\n     *\n     * @param event Event object (contains origin and data)\n     */\n    function onReceivedMessage(event) {\n        if (isDuoMessage(event)) {\n            if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {\n                var url = event.data.substring(\"DUO_OPEN_WINDOW|\".length);\n                if (isValidUrlToOpen(url)) {\n                    // Open the URL that comes after the DUO_WINDOW_OPEN token.\n                    window.open(url, \"_self\");\n                }\n            }\n            else {\n                // the event came from duo, do the post back\n                doPostBack(event.data);\n\n                // always clean up after yourself!\n                offMessage(onReceivedMessage);\n            }\n        }\n    }\n\n    /**\n     * Validate that this passed in URL is one that we will actually allow to\n     * be opened.\n     * @param url String URL that the message poster wants to open\n     * @returns {boolean} true if we allow this url to be opened in the window\n     */\n    function isValidUrlToOpen(url) {\n        if (!url) {\n            return false;\n        }\n\n        var parser = document.createElement('a');\n        parser.href = url;\n\n        if (parser.protocol === \"duotrustedendpoints:\") {\n            return true;\n        } else if (parser.protocol !== \"https:\") {\n            return false;\n        }\n\n        for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {\n           if (parser.hostname.endsWith(\".\" + VALID_OPEN_WINDOW_DOMAINS[i]) ||\n                   parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {\n               return true;\n           }\n        }\n        return false;\n    }\n\n    /**\n     * Register a callback to call ready() after the DOM has loaded.\n     */\n    function asyncReady(options) {\n        var callback = function() {\n            var promptElement = getPromptElement(options);\n            if (!promptElement) {\n                throwError(\n                    'This page does not contain an iframe for Duo to use.' +\n                    ' Add an element like' +\n                    ' <iframe id=\"duo_iframe\"></iframe> to this page.'\n                );\n            }\n\n            ready(promptElement, options.iframeAttributes || {});\n\n            // Always clean up after yourself.\n            offReady(callback)\n        };\n\n        onReady(callback);\n    }\n\n    /**\n     * Point the iframe at Duo, then wait for it to postMessage back to us.\n     */\n    function ready(promptElement, iframeAttributes) {\n        if (!host) {\n            host = getDataAttribute(promptElement, 'host');\n\n            if (!host) {\n                throwError(\n                    'No API hostname is given for Duo to use.  Be sure to pass ' +\n                    'a `host` parameter to Duo.init, or through the `data-host` ' +\n                    'attribute on the iframe element.'\n                );\n            }\n        }\n\n        if (!duoSig || !appSig) {\n            parseSigRequest(getDataAttribute(promptElement, 'sigRequest'));\n\n            if (!duoSig || !appSig) {\n                throwError(\n                    'No valid signed request is given.  Be sure to give the ' +\n                    '`sig_request` parameter to Duo.init, or use the ' +\n                    '`data-sig-request` attribute on the iframe element.'\n                );\n            }\n        }\n\n        // if postAction/Argument are defaults, see if they are specified\n        // as data attributes on the iframe\n        if (postAction === '') {\n            postAction = getDataAttribute(promptElement, 'postAction') || postAction;\n        }\n\n        if (postArgument === 'sig_response') {\n            postArgument = getDataAttribute(promptElement, 'postArgument') || postArgument;\n        }\n\n        if (isIframe(promptElement)) {\n            iframe = promptElement;\n            iframe.src = generateIframeSrc();\n        } else {\n            // If given a container to put an iframe in, clean out any children\n            // child elements in case `init()` was called more than once.\n            while (promptElement.firstChild) {\n                // We call `removeChild()` instead of doing `innerHTML = \"\"`\n                // to make sure we unbind any events.\n                promptElement.removeChild(promptElement.firstChild);\n            }\n\n            iframe = document.createElement('iframe');\n\n            // Set the src and all other attributes on the new iframe.\n            iframeAttributes['src'] = generateIframeSrc();\n            for (var name in iframeAttributes) {\n                iframe.setAttribute(name, iframeAttributes[name]);\n            }\n\n            promptElement.appendChild(iframe);\n        }\n\n        // listen for the 'message' event\n        onMessage(onReceivedMessage);\n    }\n\n    /**\n     * We received a postMessage from Duo.  POST back to the primary service\n     * with the response token, and any additional user-supplied parameters\n     * given in form#duo_form.\n     */\n    function doPostBack(response) {\n        // create a hidden input to contain the response token\n        var input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = postArgument;\n        input.value = response + ':' + appSig;\n\n        // user may supply their own form with additional inputs\n        var form = document.getElementById('duo_form');\n\n        // if the form doesn't exist, create one\n        if (!form) {\n            form = document.createElement('form');\n\n            // insert the new form after the iframe\n            iframe.parentElement.insertBefore(form, iframe.nextSibling);\n        }\n\n        // make sure we are actually posting to the right place\n        form.method = 'POST';\n        form.action = postAction;\n\n        // add the response token input to the form\n        form.appendChild(input);\n\n        // away we go!\n        if (typeof submitCallback === \"function\") {\n            submitCallback.call(null, form);\n        } else {\n            form.submit();\n        }\n    }\n\n    return {\n        init: init,\n        _onReady: onReady,\n        _parseSigRequest: parseSigRequest,\n        _isDuoMessage: isDuoMessage,\n        _doPostBack: doPostBack\n    };\n}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export function getQsParam(name: string) {\n  const url = window.location.href;\n  // eslint-disable-next-line\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n  const regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\");\n  const results = regex.exec(url);\n\n  if (!results) {\n    return null;\n  }\n  if (!results[2]) {\n    return \"\";\n  }\n\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\nexport function b64Decode(str: string, spaceAsPlus = false) {\n  if (spaceAsPlus) {\n    str = str.replace(/ /g, \"+\");\n  }\n\n  return decodeURIComponent(\n    Array.prototype.map\n      .call(atob(str), (c: string) => {\n        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n      })\n      .join(\"\"),\n  );\n}\n","import * as DuoWebSDK from \"duo_web_sdk\";\n\nimport { getQsParam } from \"./common\";\n\nrequire(\"./duo.scss\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const frameElement = document.createElement(\"iframe\");\n  frameElement.setAttribute(\"id\", \"duo_iframe\");\n  setFrameHeight();\n  document.body.appendChild(frameElement);\n\n  const hostParam = getQsParam(\"host\");\n  const requestParam = getQsParam(\"request\");\n\n  const hostUrl = new URL(\"https://\" + hostParam);\n  if (\n    !hostUrl.hostname.endsWith(\".duosecurity.com\") &&\n    !hostUrl.hostname.endsWith(\".duofederal.com\")\n  ) {\n    return;\n  }\n\n  DuoWebSDK.init({\n    iframe: \"duo_iframe\",\n    host: hostUrl.hostname,\n    sig_request: requestParam,\n    submit_callback: (form: any) => {\n      invokeCSCode(form.elements.sig_response.value);\n    },\n  });\n\n  window.onresize = setFrameHeight;\n\n  function setFrameHeight() {\n    frameElement.style.height = window.innerHeight + \"px\";\n  }\n});\n\nfunction invokeCSCode(data: string) {\n  try {\n    (window as any).invokeCSharpAction(data);\n  } catch (err) {\n    // eslint-disable-next-line\n    console.log(err);\n  }\n}\n"],"names":["define","postAction","postArgument","host","duoSig","appSig","iframe","submitCallback","DUO_MESSAGE_FORMAT","DUO_ERROR_FORMAT","DUO_OPEN_WINDOW_FORMAT","VALID_OPEN_WINDOW_DOMAINS","initializeStatefulVariables","undefined","throwError","message","givenUrl","url","Error","hyphenize","str","replace","toLowerCase","getDataAttribute","element","name","dataset","getAttribute","on","context","event","fallbackEvent","callback","window","addEventListener","attachEvent","off","removeEventListener","detachEvent","onReady","document","offReady","onMessage","offMessage","parseSigRequest","sig","indexOf","split","length","sigParts","sigRequest","isDuoMessage","Boolean","origin","data","match","init","options","sig_request","post_action","post_argument","submit_callback","promptElement","getPromptElement","ready","iframeAttributes","asyncReady","result","iframeContainer","validateIframe","getUserDefinedElement","validateIframeContainer","getElementById","object","tagName","isIframe","generateIframeSrc","encodeURIComponent","location","href","join","onReceivedMessage","substring","isValidUrlToOpen","open","doPostBack","parser","createElement","protocol","i","hostname","endsWith","src","firstChild","removeChild","setAttribute","appendChild","response","input","type","value","form","parentElement","insertBefore","nextSibling","method","action","call","submit","_onReady","_parseSigRequest","_isDuoMessage","_doPostBack","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","getQsParam","results","RegExp","exec","decodeURIComponent","frameElement","setFrameHeight","body","hostParam","requestParam","hostUrl","URL","style","height","innerHeight","invokeCSharpAction","err","console","log","invokeCSCode","elements","sig_response","onresize"],"sourceRoot":""}