{"version":3,"file":"229.c29d1ca01984fd6768c7.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/tools/vault-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/vault-export/export.component.ts","webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/common/src/tools/enums/encrypted-export-type.enum.ts","webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export.component.html","webpack://@bitwarden/web-vault/../../libs/tools/export/vault-export/vault-export-ui/src/components/export.component.ts"],"sourcesContent":["<app-header></app-header>\n\n<bit-container>\n  <form [formGroup]=\"exportForm\" [bitSubmit]=\"submit\">\n    <bit-callout type=\"danger\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n      {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n    </bit-callout>\n    <tools-export-scope-callout\n      [organizationId]=\"organizationId\"\n      *ngIf=\"!disabledByPolicy\"\n    ></tools-export-scope-callout>\n\n    <ng-container *ngIf=\"organizations$ | async as organizations\">\n      <bit-form-field *ngIf=\"organizations.length > 0\">\n        <bit-label>{{ \"exportFrom\" | i18n }}</bit-label>\n        <bit-select formControlName=\"vaultSelector\">\n          <bit-option [label]=\"'myVault' | i18n\" value=\"myVault\" icon=\"bwi-user\" />\n          <bit-option\n            *ngFor=\"let o of organizations$ | async\"\n            [value]=\"o.id\"\n            [label]=\"o.name\"\n            icon=\"bwi-business\"\n          />\n        </bit-select>\n      </bit-form-field>\n    </ng-container>\n\n    <bit-form-field>\n      <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n      <bit-select formControlName=\"format\">\n        <bit-option *ngFor=\"let f of formatOptions\" [value]=\"f.value\" [label]=\"f.name\" />\n      </bit-select>\n    </bit-form-field>\n\n    <ng-container *ngIf=\"format === 'encrypted_json'\">\n      <bit-radio-group formControlName=\"fileEncryptionType\" aria-label=\"exportTypeHeading\">\n        <bit-label>{{ \"exportTypeHeading\" | i18n }}</bit-label>\n\n        <bit-radio-button\n          id=\"AccountEncrypted\"\n          name=\"fileEncryptionType\"\n          class=\"tw-block\"\n          [value]=\"encryptedExportType.AccountEncrypted\"\n          checked=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n        >\n          <bit-label>{{ \"accountRestricted\" | i18n }}</bit-label>\n          <bit-hint>{{ \"accountRestrictedOptionDescription\" | i18n }}</bit-hint>\n        </bit-radio-button>\n\n        <bit-radio-button\n          id=\"FileEncrypted\"\n          name=\"fileEncryptionType\"\n          class=\"tw-block\"\n          [value]=\"encryptedExportType.FileEncrypted\"\n          checked=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n        >\n          <bit-label>{{ \"passwordProtected\" | i18n }}</bit-label>\n          <bit-hint>{{ \"passwordProtectedOptionDescription\" | i18n }}</bit-hint>\n        </bit-radio-button>\n      </bit-radio-group>\n\n      <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n        <div class=\"tw-mb-3\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <app-password-strength [password]=\"filePassword\" [showText]=\"true\">\n          </app-password-strength>\n        </div>\n        <bit-form-field>\n          <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n          <input\n            bitInput\n            type=\"password\"\n            id=\"confirmFilePassword\"\n            formControlName=\"confirmFilePassword\"\n            name=\"confirmFilePassword\"\n          />\n          <button\n            type=\"button\"\n            bitSuffix\n            bitIconButton\n            bitPasswordInputToggle\n            [(toggled)]=\"showFilePassword\"\n          ></button>\n        </bit-form-field>\n      </ng-container>\n    </ng-container>\n\n    <button\n      bitButton\n      bitFormButton\n      type=\"submit\"\n      buttonType=\"primary\"\n      [disabled]=\"disabledByPolicy\"\n    >\n      {{ \"confirmFormat\" | i18n }}\n    </button>\n  </form>\n</bit-container>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/vault-export-core\";\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/vault-export-ui\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  constructor(\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogService,\n    organizationService: OrganizationService,\n  ) {\n    super(\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      logService,\n      formBuilder,\n      fileDownloadService,\n      dialogService,\n      organizationService,\n    );\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <bit-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n: scopeConfig.scopeIdentifier }}\n  </bit-callout>\n</ng-container>\n","import { CommonModule } from \"@angular/common\";\nimport { Component, Input, OnInit } from \"@angular/core\";\nimport { firstValueFrom, map } from \"rxjs\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { CalloutModule } from \"@bitwarden/components\";\n\n@Component({\n  selector: \"tools-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n  standalone: true,\n  imports: [CommonModule, JslibModule, CalloutModule],\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  private _organizationId: string;\n\n  get organizationId(): string {\n    return this._organizationId;\n  }\n\n  @Input() set organizationId(value: string) {\n    this._organizationId = value;\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.getScopeMessage(this._organizationId);\n  }\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected accountService: AccountService,\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!(await this.organizationService.hasOrganizations())) {\n      return;\n    }\n\n    await this.getScopeMessage(this.organizationId);\n    this.show = true;\n  }\n\n  private async getScopeMessage(organizationId: string) {\n    this.scopeConfig =\n      organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDesc\",\n            scopeIdentifier: (await this.organizationService.get(organizationId)).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingIndividualVaultDescription\",\n            scopeIdentifier: await firstValueFrom(\n              this.accountService.activeAccount$.pipe(map((a) => a?.email)),\n            ),\n          };\n  }\n}\n","export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n","<bit-callout type=\"danger\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n  {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n</bit-callout>\n<tools-export-scope-callout\n  [organizationId]=\"organizationId\"\n  *ngIf=\"!disabledByPolicy\"\n></tools-export-scope-callout>\n\n<form [formGroup]=\"exportForm\" [bitSubmit]=\"submit\" id=\"export_form_exportForm\">\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-form-field *ngIf=\"organizations.length > 0\">\n      <bit-label>{{ \"exportFrom\" | i18n }}</bit-label>\n      <bit-select formControlName=\"vaultSelector\">\n        <bit-option [label]=\"'myVault' | i18n\" value=\"myVault\" icon=\"bwi-user\" />\n        <bit-option\n          *ngFor=\"let o of organizations$ | async\"\n          [value]=\"o.id\"\n          [label]=\"o.name\"\n          icon=\"bwi-business\"\n        />\n      </bit-select>\n    </bit-form-field>\n  </ng-container>\n\n  <bit-form-field>\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let f of formatOptions\" [value]=\"f.value\" [label]=\"f.name\" />\n    </bit-select>\n  </bit-form-field>\n\n  <ng-container *ngIf=\"format === 'encrypted_json'\">\n    <bit-radio-group formControlName=\"fileEncryptionType\" aria-label=\"exportTypeHeading\">\n      <bit-label>{{ \"exportTypeHeading\" | i18n }}</bit-label>\n\n      <bit-radio-button\n        id=\"AccountEncrypted\"\n        name=\"fileEncryptionType\"\n        class=\"tw-block\"\n        [value]=\"encryptedExportType.AccountEncrypted\"\n        checked=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n      >\n        <bit-label>{{ \"accountRestricted\" | i18n }}</bit-label>\n        <bit-hint>{{ \"accountRestrictedOptionDescription\" | i18n }}</bit-hint>\n      </bit-radio-button>\n\n      <bit-radio-button\n        id=\"FileEncrypted\"\n        name=\"fileEncryptionType\"\n        class=\"tw-block\"\n        [value]=\"encryptedExportType.FileEncrypted\"\n        checked=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n      >\n        <bit-label>{{ \"passwordProtected\" | i18n }}</bit-label>\n        <bit-hint>{{ \"passwordProtectedOptionDescription\" | i18n }}</bit-hint>\n      </bit-radio-button>\n    </bit-radio-group>\n\n    <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n      <div class=\"tw-mb-3\">\n        <bit-form-field>\n          <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n          <input\n            bitInput\n            type=\"password\"\n            id=\"filePassword\"\n            formControlName=\"filePassword\"\n            name=\"password\"\n          />\n          <button\n            type=\"button\"\n            bitSuffix\n            bitIconButton\n            bitPasswordInputToggle\n            [(toggled)]=\"showFilePassword\"\n          ></button>\n          <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n        </bit-form-field>\n        <app-password-strength [password]=\"filePassword\" [showText]=\"true\"> </app-password-strength>\n      </div>\n      <bit-form-field>\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          id=\"confirmFilePassword\"\n          formControlName=\"confirmFilePassword\"\n          name=\"confirmFilePassword\"\n        />\n        <button\n          type=\"button\"\n          bitSuffix\n          bitIconButton\n          bitPasswordInputToggle\n          [(toggled)]=\"showFilePassword\"\n        ></button>\n      </bit-form-field>\n    </ng-container>\n  </ng-container>\n</form>\n","import { CommonModule } from \"@angular/common\";\nimport { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from \"@angular/core\";\nimport { ReactiveFormsModule, UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { map, merge, Observable, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { PasswordStrengthComponent } from \"@bitwarden/angular/tools/password-strength/password-strength.component\";\nimport { UserVerificationDialogComponent } from \"@bitwarden/auth/angular\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncryptedExportType } from \"@bitwarden/common/tools/enums/encrypted-export-type.enum\";\nimport {\n  AsyncActionsModule,\n  BitSubmitDirective,\n  ButtonModule,\n  CalloutModule,\n  DialogService,\n  FormFieldModule,\n  IconButtonModule,\n  RadioButtonModule,\n  SelectModule,\n} from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/vault-export-core\";\n\nimport { ExportScopeCalloutComponent } from \"./export-scope-callout.component\";\n\n@Component({\n  selector: \"tools-export\",\n  templateUrl: \"export.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    JslibModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    SelectModule,\n    CalloutModule,\n    RadioButtonModule,\n    ExportScopeCalloutComponent,\n    UserVerificationDialogComponent,\n  ],\n})\nexport class ExportComponent implements OnInit, OnDestroy {\n  /**\n   * The hosting control also needs a bitSubmitDirective (on the Submit button) which calls this components {@link submit}-method.\n   * This components formState (loading/disabled) is emitted back up to the hosting component so for example the Submit button can be enabled/disabled and show loading state.\n   */\n  @ViewChild(BitSubmitDirective)\n  private bitSubmit: BitSubmitDirective;\n\n  /**\n   * Emits true when the BitSubmitDirective({@link bitSubmit} is executing {@link submit} and false when execution has completed.\n   * Example: Used to show the loading state of the submit button present on the hosting component\n   * */\n  @Output()\n  formLoading = new EventEmitter<boolean>();\n\n  /**\n   * Emits true when this form gets disabled and false when enabled.\n   * Example: Used to disable the submit button, which is present on the hosting component\n   * */\n  @Output()\n  formDisabled = new EventEmitter<boolean>();\n\n  /**\n   * Emits when the creation and download of the export-file have succeeded\n   * - Emits an null/empty string when exporting from an individual vault\n   * - Emits the organizationId when exporting from an organizationl vault\n   * */\n  @Output()\n  onSuccessfulExport = new EventEmitter<string>();\n\n  @Output() onSaved = new EventEmitter();\n  @ViewChild(PasswordStrengthComponent) passwordStrengthComponent: PasswordStrengthComponent;\n\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  filePasswordValue: string = null;\n  private _disabledByPolicy = false;\n\n  protected organizationId: string = null;\n  organizations$: Observable<Organization[]>;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    format: [\"json\", Validators.required],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    private logService: LogService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogService,\n    protected organizationService: OrganizationService,\n  ) {}\n\n  async ngOnInit() {\n    // Setup subscription to emit when this form is enabled/disabled\n    this.exportForm.statusChanges.pipe(takeUntil(this.destroy$)).subscribe((c) => {\n      this.formDisabled.emit(c === \"DISABLED\");\n    });\n\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges,\n    )\n      .pipe(startWith(0), takeUntil(this.destroy$))\n      .subscribe(() => this.adjustValidators());\n\n    if (this.organizationId) {\n      this.organizations$ = this.organizationService.memberOrganizations$.pipe(\n        map((orgs) => orgs.filter((org) => org.id == this.organizationId)),\n      );\n      this.exportForm.controls.vaultSelector.patchValue(this.organizationId);\n      this.exportForm.controls.vaultSelector.disable();\n      return;\n    }\n\n    this.organizations$ = this.organizationService.memberOrganizations$.pipe(\n      map((orgs) =>\n        orgs\n          .filter((org) => org.flexibleCollections)\n          .sort(Utils.getSortFunction(this.i18nService, \"name\")),\n      ),\n    );\n\n    this.exportForm.controls.vaultSelector.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.organizationId = value != \"myVault\" ? value : undefined;\n      });\n\n    this.exportForm.controls.vaultSelector.setValue(\"myVault\");\n  }\n\n  ngAfterViewInit(): void {\n    this.bitSubmit.loading$.pipe(takeUntil(this.destroy$)).subscribe((loading) => {\n      this.formLoading.emit(loading);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n\n  protected async doExport() {\n    try {\n      const data = await this.getExportData();\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  submit = async () => {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\"),\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (this.exportForm.invalid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\"),\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  protected saved() {\n    this.onSaved.emit();\n    this.onSuccessfulExport.emit(this.organizationId);\n  }\n\n  private async verifyUser(): Promise<boolean> {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const result = await UserVerificationDialogComponent.open(this.dialogService, {\n      title: \"confirmVaultExport\",\n      bodyText: confirmDescription,\n      confirmButtonOptions: {\n        text: \"exportVault\",\n        type: \"primary\",\n      },\n    });\n\n    // Handle the result of the dialog based on user action and verification success\n    if (result.userAction === \"cancel\") {\n      // User cancelled the dialog\n      return false;\n    }\n\n    // User confirmed the dialog so check verification success\n    if (!result.verificationSuccess) {\n      if (result.noAvailableClientVerificationMethods) {\n        // No client-side verification methods are available\n        // Could send user to configure a verification method like PIN or biometrics\n      }\n      return false;\n    }\n    return true;\n  }\n\n  protected async getExportData(): Promise<string> {\n    return Utils.isNullOrWhitespace(this.organizationId)\n      ? this.exportService.getExport(this.format, this.filePassword)\n      : this.exportService.getOrganizationExport(\n          this.organizationId,\n          this.format,\n          this.filePassword,\n          true,\n        );\n  }\n\n  protected getFileName(prefix?: string) {\n    if (this.organizationId) {\n      prefix = \"org\";\n    }\n\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    if (this.organizationId) {\n      return await this.eventCollectionService.collect(\n        EventType.Organization_ClientExportedVault,\n        null,\n        false,\n        this.organizationId,\n      );\n    }\n    return await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n"],"names":["ExportComponent","constructor","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","logService","formBuilder","fileDownloadService","dialogService","organizationService","super","saved","this","showToast","t","title","ExportScopeCalloutComponent","organizationId","_organizationId","value","getScopeMessage","accountService","show","ngOnInit","hasOrganizations","scopeConfig","description","scopeIdentifier","get","name","activeAccount$","pipe","a","email","C","EncryptedExportType","disabledByPolicy","_disabledByPolicy","formLoading","formDisabled","onSuccessfulExport","onSaved","encryptedExportType","filePasswordValue","exportForm","group","vaultSelector","nonNullable","validators","required","format","secret","filePassword","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","destroy$","Subject","submit","isFileEncryptedExport","markAllAsTouched","invalid","verifyUser","doExport","statusChanges","takeUntil","subscribe","c","emit","policyAppliesToActiveUser$","DisablePersonalVaultExport","policyAppliesToActiveUser","disable","merge","valueChanges","startWith","adjustValidators","organizations$","memberOrganizations$","map","orgs","filter","org","id","controls","patchValue","flexibleCollections","sort","getSortFunction","undefined","setValue","ngAfterViewInit","bitSubmit","loading$","loading","ngOnDestroy","next","encryptedFormat","FileEncrypted","isAccountEncryptedExport","data","getExportData","downloadFile","collectEvent","clearValidators","e","error","confirmDescription","result","open","bodyText","confirmButtonOptions","text","type","userAction","verificationSuccess","noAvailableClientVerificationMethods","isNullOrWhitespace","getExport","getOrganizationExport","getFileName","prefix","extension","collect","Organization_ClientExportedVault","User_ClientExportedVault","reset","enable","csv","fileName","download","blobData","blobOptions"],"sourceRoot":""}