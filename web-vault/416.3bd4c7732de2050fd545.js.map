{"version":3,"file":"416.3bd4c7732de2050fd545.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/validators/comma-separated-emails.validator.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/validators/org-seat-limit-reached.validator.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/nested-checkbox.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/nested-checkbox.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.module.ts","webpack://@bitwarden/web-vault/../../libs/common/src/admin-console/abstractions/organization-user/requests/organization-user-confirm.request.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/user-confirm.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/user-confirm.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/common/new-base.people.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/core/views/organization-user.view.ts","webpack://@bitwarden/web-vault/../../libs/common/src/admin-console/abstractions/organization-user/requests/organization-user-bulk-confirm.request.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-confirm.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-confirm.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-enable-sm-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-enable-sm-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-remove.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-remove.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-restore-revoke.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-restore-revoke.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-status.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-status.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/reset-password.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/reset-password.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/people.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/people.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members.module.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, Validators } from \"@angular/forms\";\n\nfunction validateEmails(emails: string) {\n  return (\n    emails\n      .split(\",\")\n      .map((email) => Validators.email(<AbstractControl>{ value: email.trim() }))\n      .find((_) => _ !== null) === undefined\n  );\n}\n\nexport function commaSeparatedEmails(control: AbstractControl): ValidationErrors | null {\n  if (control.value === \"\" || !control.value || validateEmails(control.value)) {\n    return null;\n  }\n  return { multipleEmails: { message: \"multipleInputEmails\" } };\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ProductType } from \"@bitwarden/common/enums\";\n\n/**\n * If the organization doesn't allow additional seat options, this checks if the seat limit has been reached when adding\n * new users\n * @param organization An object representing the organization\n * @param allOrganizationUserEmails An array of strings with existing user email addresses\n * @param errorMessage A localized string to display if validation fails\n * @returns A function that validates an `AbstractControl` and returns `ValidationErrors` or `null`\n */\nexport function orgSeatLimitReachedValidator(\n  organization: Organization,\n  allOrganizationUserEmails: string[],\n  errorMessage: string,\n): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (control.value === \"\" || !control.value) {\n      return null;\n    }\n\n    const newEmailsToAdd = Array.from(\n      new Set(\n        control.value\n          .split(\",\")\n          .filter(\n            (newEmailToAdd: string) =>\n              newEmailToAdd &&\n              newEmailToAdd.trim() !== \"\" &&\n              !allOrganizationUserEmails.some(\n                (existingEmail) => existingEmail === newEmailToAdd.trim(),\n              ),\n          ),\n      ),\n    );\n\n    const productHasAdditionalSeatsOption =\n      organization.planProductType !== ProductType.Free &&\n      organization.planProductType !== ProductType.Families &&\n      organization.planProductType !== ProductType.TeamsStarter;\n\n    return !productHasAdditionalSeatsOption &&\n      allOrganizationUserEmails.length + newEmailsToAdd.length > organization.seats\n      ? { seatLimitReached: { message: errorMessage } }\n      : null;\n  };\n}\n","<div [formGroup]=\"checkboxes\">\n  <bit-form-control>\n    <input\n      type=\"checkbox\"\n      bitCheckbox\n      [formControlName]=\"parentId\"\n      [indeterminate]=\"parentIndeterminate\"\n    />\n    <bit-label>{{ parentId | i18n }}</bit-label>\n  </bit-form-control>\n  <div class=\"tw-ml-4\">\n    <ng-container *ngFor=\"let c of checkboxes.controls | keyvalue; trackBy: key\">\n      <div *ngIf=\"c.key != parentId\">\n        <bit-form-control>\n          <input type=\"checkbox\" bitCheckbox [formControl]=\"c.value\" (change)=\"onChildCheck()\" />\n          <bit-label>{{ c.key | i18n }}</bit-label>\n        </bit-form-control>\n      </div>\n    </ng-container>\n  </div>\n</div>\n","import { KeyValue } from \"@angular/common\";\nimport { Component, EventEmitter, Input, Output, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\n@Component({\n  selector: \"app-nested-checkbox\",\n  templateUrl: \"nested-checkbox.component.html\",\n})\nexport class NestedCheckboxComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  @Input() parentId: string;\n  @Input() checkboxes: FormGroup<Record<string, FormControl<boolean>>>;\n  @Output() onSavedUser = new EventEmitter();\n  @Output() onDeletedUser = new EventEmitter();\n\n  get parentIndeterminate() {\n    return (\n      this.children.some(([key, control]) => control.value == true) &&\n      !this.children.every(([key, control]) => control.value == true)\n    );\n  }\n\n  ngOnInit(): void {\n    this.checkboxes.controls[this.parentId].valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        Object.values(this.checkboxes.controls).forEach((control) =>\n          control.setValue(value, { emitEvent: false }),\n        );\n      });\n  }\n\n  private get parentCheckbox() {\n    return this.checkboxes.controls[this.parentId];\n  }\n\n  get children() {\n    return Object.entries(this.checkboxes.controls).filter(([key, value]) => key != this.parentId);\n  }\n\n  protected onChildCheck() {\n    const parentChecked = this.children.every(([key, value]) => value.value == true);\n    this.parentCheckbox.setValue(parentChecked, { emitEvent: false });\n  }\n\n  protected key(index: number, item: KeyValue<string, FormControl<boolean>>) {\n    return item.key;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  pascalize(s: string) {\n    return Utils.camelToPascalCase(s);\n  }\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport {\n  combineLatest,\n  firstValueFrom,\n  map,\n  Observable,\n  of,\n  shareReplay,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { PermissionsApi } from \"@bitwarden/common/admin-console/models/api/permissions.api\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { ProductType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { CollectionAdminService } from \"../../../../../vault/core/collection-admin.service\";\nimport { CollectionAdminView } from \"../../../../../vault/core/views/collection-admin.view\";\nimport {\n  CollectionAccessSelectionView,\n  GroupService,\n  GroupView,\n  OrganizationUserAdminView,\n  UserAdminService,\n} from \"../../../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../../../shared/components/access-selector\";\n\nimport { commaSeparatedEmails } from \"./validators/comma-separated-emails.validator\";\nimport { orgSeatLimitReachedValidator } from \"./validators/org-seat-limit-reached.validator\";\n\nexport enum MemberDialogTab {\n  Role = 0,\n  Groups = 1,\n  Collections = 2,\n}\n\nexport interface MemberDialogParams {\n  name: string;\n  organizationId: string;\n  organizationUserId: string;\n  allOrganizationUserEmails: string[];\n  usesKeyConnector: boolean;\n  isOnSecretsManagerStandalone: boolean;\n  initialTab?: MemberDialogTab;\n  numConfirmedMembers: number;\n}\n\nexport enum MemberDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n  Revoked = \"revoked\",\n  Restored = \"restored\",\n}\n\n@Component({\n  templateUrl: \"member-dialog.component.html\",\n})\nexport class MemberDialogComponent implements OnDestroy {\n  loading = true;\n  editMode = false;\n  isRevoked = false;\n  title: string;\n  access: \"all\" | \"selected\" = \"selected\";\n  collections: CollectionView[] = [];\n  organizationUserType = OrganizationUserType;\n  PermissionMode = PermissionMode;\n  showNoMasterPasswordWarning = false;\n  isOnSecretsManagerStandalone: boolean;\n\n  protected organization$: Observable<Organization>;\n  protected collectionAccessItems: AccessItemView[] = [];\n  protected groupAccessItems: AccessItemView[] = [];\n  protected tabIndex: MemberDialogTab;\n  protected formGroup = this.formBuilder.group({\n    emails: [\"\"],\n    type: OrganizationUserType.User,\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    accessAllCollections: false,\n    accessSecretsManager: false,\n    access: [[] as AccessItemValue[]],\n    groups: [[] as AccessItemValue[]],\n  });\n\n  protected allowAdminAccessToAllCollectionItems$: Observable<boolean>;\n  protected restrictEditingSelf$: Observable<boolean>;\n  protected canAssignAccessToAnyCollection$: Observable<boolean>;\n\n  protected permissionsGroup = this.formBuilder.group({\n    manageAssignedCollectionsGroup: this.formBuilder.group<Record<string, boolean>>({\n      manageAssignedCollections: false,\n      editAssignedCollections: false,\n      deleteAssignedCollections: false,\n    }),\n    manageAllCollectionsGroup: this.formBuilder.group<Record<string, boolean>>({\n      manageAllCollections: false,\n      createNewCollections: false,\n      editAnyCollection: false,\n      deleteAnyCollection: false,\n    }),\n    accessEventLogs: false,\n    accessImportExport: false,\n    accessReports: false,\n    manageGroups: false,\n    manageSso: false,\n    managePolicies: false,\n    manageUsers: false,\n    manageResetPassword: false,\n  });\n\n  private destroy$ = new Subject<void>();\n\n  get customUserTypeSelected(): boolean {\n    return this.formGroup.value.type === OrganizationUserType.Custom;\n  }\n\n  get accessAllCollections(): boolean {\n    return this.formGroup.value.accessAllCollections;\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) protected params: MemberDialogParams,\n    private dialogRef: DialogRef<MemberDialogResult>,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private formBuilder: FormBuilder,\n    // TODO: We should really look into consolidating naming conventions for these services\n    private collectionAdminService: CollectionAdminService,\n    private groupService: GroupService,\n    private userService: UserAdminService,\n    private organizationUserService: OrganizationUserService,\n    private dialogService: DialogService,\n    private configService: ConfigService,\n    private accountService: AccountService,\n    organizationService: OrganizationService,\n  ) {\n    this.organization$ = organizationService\n      .get$(this.params.organizationId)\n      .pipe(shareReplay({ refCount: true, bufferSize: 1 }));\n\n    this.editMode = this.params.organizationUserId != null;\n    this.tabIndex = this.params.initialTab ?? MemberDialogTab.Role;\n    this.title = this.i18nService.t(this.editMode ? \"editMember\" : \"inviteMember\");\n    this.isOnSecretsManagerStandalone = this.params.isOnSecretsManagerStandalone;\n\n    if (this.isOnSecretsManagerStandalone) {\n      this.formGroup.patchValue({\n        accessSecretsManager: true,\n      });\n    }\n\n    const groups$ = this.organization$.pipe(\n      switchMap((organization) =>\n        organization.useGroups\n          ? this.groupService.getAll(this.params.organizationId)\n          : of([] as GroupView[]),\n      ),\n    );\n\n    const userDetails$ = this.params.organizationUserId\n      ? this.userService.get(this.params.organizationId, this.params.organizationUserId)\n      : of(null);\n\n    this.allowAdminAccessToAllCollectionItems$ = combineLatest([\n      this.organization$,\n      this.configService.getFeatureFlag$(FeatureFlag.FlexibleCollectionsV1),\n    ]).pipe(\n      map(([organization, flexibleCollectionsV1Enabled]) => {\n        if (!flexibleCollectionsV1Enabled || !organization.flexibleCollections) {\n          return true;\n        }\n\n        return organization.allowAdminAccessToAllCollectionItems;\n      }),\n    );\n\n    // The orgUser cannot manage their own Group assignments if collection access is restricted\n    this.restrictEditingSelf$ = combineLatest([\n      this.allowAdminAccessToAllCollectionItems$,\n      userDetails$,\n      this.accountService.activeAccount$,\n    ]).pipe(\n      map(\n        ([allowAdminAccess, userDetails, activeAccount]) =>\n          !allowAdminAccess && userDetails != null && userDetails.userId == activeAccount.id,\n      ),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.restrictEditingSelf$.pipe(takeUntil(this.destroy$)).subscribe((restrictEditingSelf) => {\n      if (restrictEditingSelf) {\n        this.formGroup.controls.groups.disable();\n      } else {\n        this.formGroup.controls.groups.enable();\n      }\n    });\n\n    const flexibleCollectionsV1Enabled$ = this.configService.getFeatureFlag$(\n      FeatureFlag.FlexibleCollectionsV1,\n    );\n\n    this.canAssignAccessToAnyCollection$ = combineLatest([\n      this.organization$,\n      flexibleCollectionsV1Enabled$,\n      this.allowAdminAccessToAllCollectionItems$,\n    ]).pipe(\n      map(\n        ([org, flexibleCollectionsV1Enabled, allowAdminAccessToAllCollectionItems]) =>\n          org.canEditAnyCollection(flexibleCollectionsV1Enabled) ||\n          // Manage Users custom permission cannot edit any collection but they can assign access from this dialog\n          // if permitted by collection management settings\n          (org.permissions.manageUsers && allowAdminAccessToAllCollectionItems),\n      ),\n    );\n\n    combineLatest({\n      organization: this.organization$,\n      collections: this.collectionAdminService.getAll(this.params.organizationId),\n      userDetails: userDetails$,\n      groups: groups$,\n      flexibleCollectionsV1Enabled: flexibleCollectionsV1Enabled$,\n    })\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        ({ organization, collections, userDetails, groups, flexibleCollectionsV1Enabled }) => {\n          this.setFormValidators(organization);\n\n          // Groups tab: populate available groups\n          this.groupAccessItems = [].concat(\n            groups.map<AccessItemView>((g) => mapGroupToAccessItemView(g)),\n          );\n\n          // Collections tab: Populate all available collections (including current user access where applicable)\n          this.collectionAccessItems = collections\n            .map((c) =>\n              mapCollectionToAccessItemView(\n                c,\n                organization,\n                flexibleCollectionsV1Enabled,\n                userDetails == null\n                  ? undefined\n                  : c.users.find((access) => access.id === userDetails.id),\n              ),\n            )\n            // But remove collections that we can't assign access to, unless the user is already assigned\n            .filter(\n              (item) =>\n                !item.readonly || userDetails?.collections.some((access) => access.id == item.id),\n            );\n\n          if (userDetails != null) {\n            this.loadOrganizationUser(\n              userDetails,\n              groups,\n              collections,\n              organization,\n              flexibleCollectionsV1Enabled,\n            );\n          }\n\n          this.loading = false;\n        },\n      );\n  }\n\n  private setFormValidators(organization: Organization) {\n    const emailsControlValidators = [\n      Validators.required,\n      commaSeparatedEmails,\n      orgSeatLimitReachedValidator(\n        organization,\n        this.params.allOrganizationUserEmails,\n        this.i18nService.t(\"subscriptionUpgrade\", organization.seats),\n      ),\n    ];\n\n    const emailsControl = this.formGroup.get(\"emails\");\n    emailsControl.setValidators(emailsControlValidators);\n    emailsControl.updateValueAndValidity();\n  }\n\n  private loadOrganizationUser(\n    userDetails: OrganizationUserAdminView,\n    groups: GroupView[],\n    collections: CollectionAdminView[],\n    organization: Organization,\n    flexibleCollectionsV1Enabled: boolean,\n  ) {\n    if (!userDetails) {\n      throw new Error(\"Could not find user to edit.\");\n    }\n    this.isRevoked = userDetails.status === OrganizationUserStatusType.Revoked;\n    this.showNoMasterPasswordWarning =\n      userDetails.status > OrganizationUserStatusType.Invited &&\n      userDetails.hasMasterPassword === false;\n    const assignedCollectionsPermissions = {\n      editAssignedCollections: userDetails.permissions.editAssignedCollections,\n      deleteAssignedCollections: userDetails.permissions.deleteAssignedCollections,\n      manageAssignedCollections:\n        userDetails.permissions.editAssignedCollections &&\n        userDetails.permissions.deleteAssignedCollections,\n    };\n    const allCollectionsPermissions = {\n      createNewCollections: userDetails.permissions.createNewCollections,\n      editAnyCollection: userDetails.permissions.editAnyCollection,\n      deleteAnyCollection: userDetails.permissions.deleteAnyCollection,\n      manageAllCollections:\n        userDetails.permissions.createNewCollections &&\n        userDetails.permissions.editAnyCollection &&\n        userDetails.permissions.deleteAnyCollection,\n    };\n    if (userDetails.type === OrganizationUserType.Custom) {\n      this.permissionsGroup.patchValue({\n        accessEventLogs: userDetails.permissions.accessEventLogs,\n        accessImportExport: userDetails.permissions.accessImportExport,\n        accessReports: userDetails.permissions.accessReports,\n        manageGroups: userDetails.permissions.manageGroups,\n        manageSso: userDetails.permissions.manageSso,\n        managePolicies: userDetails.permissions.managePolicies,\n        manageUsers: userDetails.permissions.manageUsers,\n        manageResetPassword: userDetails.permissions.manageResetPassword,\n        manageAssignedCollectionsGroup: assignedCollectionsPermissions,\n        manageAllCollectionsGroup: allCollectionsPermissions,\n      });\n    }\n\n    const collectionsFromGroups = groups\n      .filter((group) => userDetails.groups.includes(group.id))\n      .flatMap((group) =>\n        group.collections.map((accessSelection) => {\n          const collection = collections.find((c) => c.id === accessSelection.id);\n          return { group, collection, accessSelection };\n        }),\n      );\n\n    // Populate additional collection access via groups (rendered as separate rows from user access)\n    this.collectionAccessItems = this.collectionAccessItems.concat(\n      collectionsFromGroups.map(({ collection, accessSelection, group }) =>\n        mapCollectionToAccessItemView(\n          collection,\n          organization,\n          flexibleCollectionsV1Enabled,\n          accessSelection,\n          group,\n        ),\n      ),\n    );\n\n    // Set current collections and groups the user has access to (excluding collections the current user doesn't have\n    // permissions to change - they are included as readonly via the CollectionAccessItems)\n    const accessSelections = mapToAccessSelections(userDetails, this.collectionAccessItems);\n    const groupAccessSelections = mapToGroupAccessSelections(userDetails.groups);\n\n    this.formGroup.removeControl(\"emails\");\n    this.formGroup.patchValue({\n      type: userDetails.type,\n      externalId: userDetails.externalId,\n      accessAllCollections: userDetails.accessAll,\n      access: accessSelections,\n      accessSecretsManager: userDetails.accessSecretsManager,\n      groups: groupAccessSelections,\n    });\n  }\n\n  check(c: CollectionView, select?: boolean) {\n    (c as any).checked = select == null ? !(c as any).checked : select;\n    if (!(c as any).checked) {\n      c.readOnly = false;\n    }\n  }\n\n  selectAll(select: boolean) {\n    this.collections.forEach((c) => this.check(c, select));\n  }\n\n  setRequestPermissions(p: PermissionsApi, clearPermissions: boolean): PermissionsApi {\n    if (clearPermissions) {\n      return new PermissionsApi();\n    }\n    const partialPermissions: Partial<PermissionsApi> = {\n      accessEventLogs: this.permissionsGroup.value.accessEventLogs,\n      accessImportExport: this.permissionsGroup.value.accessImportExport,\n      accessReports: this.permissionsGroup.value.accessReports,\n      manageGroups: this.permissionsGroup.value.manageGroups,\n      manageSso: this.permissionsGroup.value.manageSso,\n      managePolicies: this.permissionsGroup.value.managePolicies,\n      manageUsers: this.permissionsGroup.value.manageUsers,\n      manageResetPassword: this.permissionsGroup.value.manageResetPassword,\n      createNewCollections:\n        this.permissionsGroup.value.manageAllCollectionsGroup.createNewCollections,\n      editAnyCollection: this.permissionsGroup.value.manageAllCollectionsGroup.editAnyCollection,\n      deleteAnyCollection:\n        this.permissionsGroup.value.manageAllCollectionsGroup.deleteAnyCollection,\n      editAssignedCollections:\n        this.permissionsGroup.value.manageAssignedCollectionsGroup.editAssignedCollections,\n      deleteAssignedCollections:\n        this.permissionsGroup.value.manageAssignedCollectionsGroup.deleteAssignedCollections,\n    };\n\n    return Object.assign(p, partialPermissions);\n  }\n\n  handleDependentPermissions() {\n    // Manage Password Reset (Account Recovery) must have Manage Users enabled\n    if (\n      this.permissionsGroup.value.manageResetPassword &&\n      !this.permissionsGroup.value.manageUsers\n    ) {\n      this.permissionsGroup.value.manageUsers = true;\n      (document.getElementById(\"manageUsers\") as HTMLInputElement).checked = true;\n      this.platformUtilsService.showToast(\n        \"info\",\n        null,\n        this.i18nService.t(\"accountRecoveryManageUsers\"),\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      if (this.tabIndex !== MemberDialogTab.Role) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"role\")),\n        );\n      }\n      return;\n    }\n\n    const organization = await firstValueFrom(this.organization$);\n\n    if (!organization.useCustomPermissions && this.customUserTypeSelected) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"customNonEnterpriseError\"),\n      );\n      return;\n    }\n\n    const userView = new OrganizationUserAdminView();\n    userView.id = this.params.organizationUserId;\n    userView.organizationId = this.params.organizationId;\n    userView.accessAll = this.accessAllCollections;\n    userView.type = this.formGroup.value.type;\n    userView.permissions = this.setRequestPermissions(\n      userView.permissions ?? new PermissionsApi(),\n      userView.type !== OrganizationUserType.Custom,\n    );\n    userView.collections = this.formGroup.value.access\n      .filter((v) => v.type === AccessItemType.Collection)\n      .map(convertToSelectionView);\n\n    userView.groups = (await firstValueFrom(this.restrictEditingSelf$))\n      ? null\n      : this.formGroup.value.groups.map((m) => m.id);\n\n    userView.accessSecretsManager = this.formGroup.value.accessSecretsManager;\n\n    if (this.editMode) {\n      await this.userService.save(userView);\n    } else {\n      userView.id = this.params.organizationUserId;\n      const maxEmailsCount = organization.planProductType === ProductType.TeamsStarter ? 10 : 20;\n      const emails = [...new Set(this.formGroup.value.emails.trim().split(/\\s*,\\s*/))];\n      if (emails.length > maxEmailsCount) {\n        this.formGroup.controls.emails.setErrors({\n          tooManyEmails: { message: this.i18nService.t(\"tooManyEmails\", maxEmailsCount) },\n        });\n        return;\n      }\n      if (\n        organization.hasReseller &&\n        this.params.numConfirmedMembers + emails.length > organization.seats\n      ) {\n        this.formGroup.controls.emails.setErrors({\n          tooManyEmails: { message: this.i18nService.t(\"seatLimitReachedContactYourProvider\") },\n        });\n        return;\n      }\n      await this.userService.invite(emails, userView);\n    }\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(this.editMode ? \"editedUserId\" : \"invitedUsers\", this.params.name),\n    );\n    this.close(MemberDialogResult.Saved);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const message = this.params.usesKeyConnector\n      ? \"removeUserConfirmationKeyConnector\"\n      : \"removeOrgUserConfirmation\";\n\n    let confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"removeUserIdAccess\", placeholders: [this.params.name] },\n      content: { key: message },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (this.showNoMasterPasswordWarning) {\n      confirmed = await this.noMasterPasswordConfirmationDialog();\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    await this.organizationUserService.deleteOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId,\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"removedUserId\", this.params.name),\n    );\n    this.close(MemberDialogResult.Deleted);\n  };\n\n  revoke = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    let confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"revokeUserId\", placeholders: [this.params.name] },\n      content: { key: \"revokeUserConfirmation\" },\n      acceptButtonText: { key: \"revokeAccess\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (this.showNoMasterPasswordWarning) {\n      confirmed = await this.noMasterPasswordConfirmationDialog();\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    await this.organizationUserService.revokeOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId,\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"revokedUserId\", this.params.name),\n    );\n    this.isRevoked = true;\n    this.close(MemberDialogResult.Revoked);\n  };\n\n  restore = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    await this.organizationUserService.restoreOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId,\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"restoredUserId\", this.params.name),\n    );\n    this.isRevoked = false;\n    this.close(MemberDialogResult.Restored);\n  };\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected async cancel() {\n    this.close(MemberDialogResult.Canceled);\n  }\n\n  private close(result: MemberDialogResult) {\n    this.dialogRef.close(result);\n  }\n\n  private noMasterPasswordConfirmationDialog() {\n    return this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeOrgUserNoMasterPasswordTitle\",\n      },\n      content: {\n        key: \"removeOrgUserNoMasterPasswordDesc\",\n        placeholders: [this.params.name],\n      },\n      type: \"warning\",\n    });\n  }\n\n  protected readonly ProductType = ProductType;\n}\n\nfunction mapCollectionToAccessItemView(\n  collection: CollectionAdminView,\n  organization: Organization,\n  flexibleCollectionsV1Enabled: boolean,\n  accessSelection?: CollectionAccessSelectionView,\n  group?: GroupView,\n): AccessItemView {\n  return {\n    type: AccessItemType.Collection,\n    id: group ? `${collection.id}-${group.id}` : collection.id,\n    labelName: collection.name,\n    listName: collection.name,\n    readonly:\n      group !== undefined ||\n      !collection.canEditUserAccess(organization, flexibleCollectionsV1Enabled),\n    readonlyPermission: accessSelection ? convertToPermission(accessSelection) : undefined,\n    viaGroupName: group?.name,\n  };\n}\n\nfunction mapGroupToAccessItemView(group: GroupView): AccessItemView {\n  return {\n    type: AccessItemType.Group,\n    id: group.id,\n    labelName: group.name,\n    listName: group.name,\n  };\n}\n\nfunction mapToAccessSelections(\n  user: OrganizationUserAdminView,\n  items: AccessItemView[],\n): AccessItemValue[] {\n  if (user == undefined) {\n    return [];\n  }\n\n  return (\n    user.collections\n      // The FormControl value only represents editable collection access - exclude readonly access selections\n      .filter((selection) => !items.find((item) => item.id == selection.id).readonly)\n      .map<AccessItemValue>((selection) => ({\n        id: selection.id,\n        type: AccessItemType.Collection,\n        permission: convertToPermission(selection),\n      }))\n  );\n}\n\nfunction mapToGroupAccessSelections(groups: string[]): AccessItemValue[] {\n  if (groups == undefined) {\n    return [];\n  }\n  return [].concat(\n    groups.map((groupId) => ({\n      id: groupId,\n      type: AccessItemType.Group,\n    })),\n  );\n}\n\n/**\n * Strongly typed helper to open a UserDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport function openUserAddEditDialog(\n  dialogService: DialogService,\n  config: DialogConfig<MemberDialogParams>,\n) {\n  return dialogService.open<MemberDialogResult, MemberDialogParams>(MemberDialogComponent, config);\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\" *ngIf=\"!loading && params.name\">{{\n        params.name\n      }}</span>\n      <span bitBadge variant=\"secondary\" *ngIf=\"isRevoked\">{{ \"revoked\" | i18n }}</span>\n    </span>\n    <div bitDialogContent>\n      <ng-container *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n      </ng-container>\n      <bit-tab-group\n        *ngIf=\"!loading && organization$ | async as organization\"\n        [(selectedIndex)]=\"tabIndex\"\n      >\n        <bit-tab [label]=\"'role' | i18n\">\n          <ng-container *ngIf=\"!editMode\">\n            <p bitTypography=\"body1\">{{ \"inviteUserDesc\" | i18n }}</p>\n            <bit-form-field>\n              <bit-label>{{ \"email\" | i18n }}</bit-label>\n              <input id=\"emails\" type=\"text\" appAutoFocus bitInput formControlName=\"emails\" />\n              <bit-hint>{{\n                \"inviteMultipleEmailDesc\"\n                  | i18n: (organization.planProductType === ProductType.TeamsStarter ? \"10\" : \"20\")\n              }}</bit-hint>\n            </bit-form-field>\n          </ng-container>\n          <bit-radio-group formControlName=\"type\">\n            <bit-label>\n              {{ \"memberRole\" | i18n }}\n              <a\n                bitLink\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                href=\"https://bitwarden.com/help/user-types-access-control/\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </bit-label>\n            <bit-radio-button id=\"userTypeUser\" [value]=\"organizationUserType.User\">\n              <bit-label>{{ \"user\" | i18n }}</bit-label>\n              <bit-hint>{{ \"userDesc\" | i18n }}</bit-hint>\n            </bit-radio-button>\n            <bit-radio-button\n              *ngIf=\"!organization.flexibleCollections\"\n              id=\"userTypeManager\"\n              [value]=\"organizationUserType.Manager\"\n            >\n              <bit-label>{{ \"manager\" | i18n }}</bit-label>\n              <bit-hint>{{ \"managerDesc\" | i18n }}</bit-hint>\n            </bit-radio-button>\n            <bit-radio-button id=\"userTypeAdmin\" [value]=\"organizationUserType.Admin\">\n              <bit-label>{{ \"admin\" | i18n }}</bit-label>\n              <bit-hint>{{ \"adminDesc\" | i18n }}</bit-hint>\n            </bit-radio-button>\n            <bit-radio-button id=\"userTypeOwner\" [value]=\"organizationUserType.Owner\">\n              <bit-label>{{ \"owner\" | i18n }}</bit-label>\n              <bit-hint>{{ \"ownerDesc\" | i18n }}</bit-hint>\n            </bit-radio-button>\n            <bit-radio-button\n              id=\"userTypeCustom\"\n              [value]=\"organizationUserType.Custom\"\n              [disabled]=\"!organization.useCustomPermissions || null\"\n            >\n              <bit-label>{{ \"custom\" | i18n }}</bit-label>\n              <bit-hint>\n                <ng-container *ngIf=\"!organization.useCustomPermissions; else enterprise\">\n                  <p>\n                    {{ \"customDescNonEnterpriseStart\" | i18n\n                    }}<a\n                      bitLink\n                      href=\"https://bitwarden.com/contact/\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      >{{ \"customDescNonEnterpriseLink\" | i18n }}</a\n                    >{{ \"customDescNonEnterpriseEnd\" | i18n }}\n                  </p>\n                </ng-container>\n                <ng-template #enterprise>\n                  <p>{{ \"customDesc\" | i18n }}</p>\n                </ng-template>\n              </bit-hint>\n            </bit-radio-button>\n          </bit-radio-group>\n          <ng-container *ngIf=\"customUserTypeSelected\">\n            <ng-container *ngIf=\"!organization.flexibleCollections; else customPermissionsFC\">\n              <h3 bitTypography=\"h3\">\n                {{ \"permissions\" | i18n }}\n              </h3>\n              <div class=\"tw-grid tw-grid-cols-12 tw-gap-4\" [formGroup]=\"permissionsGroup\">\n                <div class=\"tw-col-span-6\">\n                  <div class=\"tw-mb-3\">\n                    <bit-label class=\"tw-font-semibold\">{{\n                      \"managerPermissions\" | i18n\n                    }}</bit-label>\n                    <hr class=\"tw-mb-2 tw-mr-2 tw-mt-0\" />\n                    <app-nested-checkbox\n                      parentId=\"manageAssignedCollections\"\n                      [checkboxes]=\"permissionsGroup.controls.manageAssignedCollectionsGroup\"\n                    >\n                    </app-nested-checkbox>\n                  </div>\n                </div>\n                <div class=\"tw-col-span-6\">\n                  <div class=\"tw-mb-3\">\n                    <bit-label class=\"tw-font-semibold\">{{ \"adminPermissions\" | i18n }}</bit-label>\n                    <hr class=\"tw-mb-2 tw-mr-2 tw-mt-0\" />\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"accessEventLogs\" />\n                      <bit-label>{{ \"accessEventLogs\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"accessImportExport\" />\n                      <bit-label>{{ \"accessImportExport\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"accessReports\" />\n                      <bit-label>{{ \"accessReports\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <app-nested-checkbox\n                      parentId=\"manageAllCollections\"\n                      [checkboxes]=\"permissionsGroup.controls.manageAllCollectionsGroup\"\n                    >\n                    </app-nested-checkbox>\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"manageGroups\" />\n                      <bit-label>{{ \"manageGroups\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"manageSso\" />\n                      <bit-label>{{ \"manageSso\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"managePolicies\" />\n                      <bit-label>{{ \"managePolicies\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input\n                        id=\"manageUsers\"\n                        type=\"checkbox\"\n                        bitCheckbox\n                        formControlName=\"manageUsers\"\n                        (change)=\"handleDependentPermissions()\"\n                      />\n                      <bit-label>{{ \"manageUsers\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input\n                        type=\"checkbox\"\n                        bitCheckbox\n                        formControlName=\"manageResetPassword\"\n                        (change)=\"handleDependentPermissions()\"\n                      />\n                      <bit-label>{{ \"manageAccountRecovery\" | i18n }}</bit-label>\n                    </bit-form-control>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n            <ng-template #customPermissionsFC>\n              <div class=\"tw-grid tw-grid-cols-12 tw-gap-4\" [formGroup]=\"permissionsGroup\">\n                <div class=\"tw-col-span-4\">\n                  <bit-form-control>\n                    <input type=\"checkbox\" bitCheckbox formControlName=\"accessEventLogs\" />\n                    <bit-label>{{ \"accessEventLogs\" | i18n }}</bit-label>\n                  </bit-form-control>\n                  <bit-form-control>\n                    <input type=\"checkbox\" bitCheckbox formControlName=\"accessImportExport\" />\n                    <bit-label>{{ \"accessImportExport\" | i18n }}</bit-label>\n                  </bit-form-control>\n                  <bit-form-control>\n                    <input type=\"checkbox\" bitCheckbox formControlName=\"accessReports\" />\n                    <bit-label>{{ \"accessReports\" | i18n }}</bit-label>\n                  </bit-form-control>\n                </div>\n                <div class=\"tw-col-span-4\">\n                  <app-nested-checkbox\n                    parentId=\"manageAllCollections\"\n                    [checkboxes]=\"permissionsGroup.controls.manageAllCollectionsGroup\"\n                  >\n                  </app-nested-checkbox>\n                </div>\n                <div class=\"tw-col-span-4\">\n                  <div class=\"tw-mb-3\">\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"manageGroups\" />\n                      <bit-label>{{ \"manageGroups\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"manageSso\" />\n                      <bit-label>{{ \"manageSso\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input type=\"checkbox\" bitCheckbox formControlName=\"managePolicies\" />\n                      <bit-label>{{ \"managePolicies\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input\n                        id=\"manageUsers\"\n                        type=\"checkbox\"\n                        bitCheckbox\n                        formControlName=\"manageUsers\"\n                        (change)=\"handleDependentPermissions()\"\n                      />\n                      <bit-label>{{ \"manageUsers\" | i18n }}</bit-label>\n                    </bit-form-control>\n                    <bit-form-control>\n                      <input\n                        type=\"checkbox\"\n                        bitCheckbox\n                        formControlName=\"manageResetPassword\"\n                        (change)=\"handleDependentPermissions()\"\n                      />\n                      <bit-label>{{ \"manageAccountRecovery\" | i18n }}</bit-label>\n                    </bit-form-control>\n                  </div>\n                </div>\n              </div>\n            </ng-template>\n          </ng-container>\n          <ng-container *ngIf=\"organization.useSecretsManager\">\n            <h3 class=\"tw-mt-4\">\n              {{ \"secretsManager\" | i18n }}\n              <a\n                bitLink\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                href=\"https://bitwarden.com/help/manage-your-organization/#access-to-secrets-manager\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </h3>\n            <p class=\"tw-text-muted\">{{ \"secretsManagerAccessDescription\" | i18n }}</p>\n            <bit-form-control>\n              <input\n                type=\"checkbox\"\n                [disabled]=\"isOnSecretsManagerStandalone\"\n                bitCheckbox\n                formControlName=\"accessSecretsManager\"\n              />\n              <bit-label>\n                {{ \"userAccessSecretsManagerGA\" | i18n }}\n              </bit-label>\n            </bit-form-control>\n          </ng-container>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n        <bit-tab *ngIf=\"organization.useGroups\" [label]=\"'groups' | i18n\">\n          <div class=\"tw-mb-6\">\n            {{\n              (restrictEditingSelf$ | async)\n                ? (\"restrictedGroupAccess\" | i18n)\n                : (\"groupAccessUserDesc\" | i18n)\n            }}\n          </div>\n          <bit-access-selector\n            formControlName=\"groups\"\n            [items]=\"groupAccessItems\"\n            [columnHeader]=\"'groups' | i18n\"\n            [selectorLabelText]=\"'selectGroups' | i18n\"\n            [emptySelectionText]=\"'noGroupsAdded' | i18n\"\n            [flexibleCollectionsEnabled]=\"organization.flexibleCollections\"\n            [hideMultiSelect]=\"restrictEditingSelf$ | async\"\n          ></bit-access-selector>\n        </bit-tab>\n        <bit-tab [label]=\"'collections' | i18n\">\n          <div class=\"tw-mb-6\" *ngIf=\"restrictEditingSelf$ | async\">\n            {{ \"cannotAddYourselfToCollections\" | i18n }}\n          </div>\n          <div\n            *ngIf=\"\n              !(restrictEditingSelf$ | async) &&\n              (organization.useGroups || !(canAssignAccessToAnyCollection$ | async))\n            \"\n            class=\"tw-mb-6\"\n          >\n            <span *ngIf=\"organization.useGroups\">\n              {{ \"userPermissionOverrideHelperDesc\" | i18n }}\n            </span>\n            <span *ngIf=\"!(canAssignAccessToAnyCollection$ | async)\">\n              {{ \"restrictedCollectionAssignmentDesc\" | i18n }}\n            </span>\n          </div>\n          <div *ngIf=\"!organization.flexibleCollections\" class=\"tw-mb-6\">\n            <bit-form-control>\n              <input type=\"checkbox\" bitCheckbox formControlName=\"accessAllCollections\" />\n              <bit-label>\n                {{ \"accessAllCollectionsDesc\" | i18n }}\n                <a\n                  bitLink\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                  href=\"https://bitwarden.com/help/user-types-access-control/#access-control\"\n                >\n                  <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n                </a>\n              </bit-label>\n              <bit-hint>{{ \"accessAllCollectionsHelp\" | i18n }}</bit-hint>\n            </bit-form-control>\n          </div>\n          <bit-access-selector\n            *ngIf=\"!accessAllCollections\"\n            [permissionMode]=\"PermissionMode.Edit\"\n            formControlName=\"access\"\n            [showGroupColumn]=\"organization.useGroups\"\n            [items]=\"collectionAccessItems\"\n            [columnHeader]=\"'collection' | i18n\"\n            [selectorLabelText]=\"'selectCollections' | i18n\"\n            [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n            [flexibleCollectionsEnabled]=\"organization.flexibleCollections\"\n            [hideMultiSelect]=\"restrictEditingSelf$ | async\"\n          ></bit-access-selector\n        ></bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\" [disabled]=\"loading\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        bitFormButton\n        buttonType=\"secondary\"\n        (click)=\"cancel()\"\n        [disabled]=\"loading\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <div class=\"tw-ml-auto\">\n        <button\n          *ngIf=\"editMode && isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"restore\"\n          [disabled]=\"loading\"\n        >\n          {{ \"restoreAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"editMode && !isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"revoke\"\n          [disabled]=\"loading\"\n        >\n          {{ \"revokeAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"editMode\"\n          type=\"button\"\n          bitIconButton=\"bwi-trash\"\n          buttonType=\"danger\"\n          bitFormButton\n          [appA11yTitle]=\"'delete' | i18n\"\n          [bitAction]=\"delete\"\n          [disabled]=\"loading\"\n        ></button>\n      </div>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { NgModule } from \"@angular/core\";\n\nimport { RadioButtonModule } from \"@bitwarden/components\";\n\nimport { SharedOrganizationModule } from \"../../../shared\";\n\nimport { MemberDialogComponent } from \"./member-dialog.component\";\nimport { NestedCheckboxComponent } from \"./nested-checkbox.component\";\n\n@NgModule({\n  declarations: [MemberDialogComponent, NestedCheckboxComponent],\n  imports: [SharedOrganizationModule, RadioButtonModule],\n  exports: [MemberDialogComponent],\n})\nexport class UserDialogModule {}\n","export class OrganizationUserConfirmRequest {\n  key: string;\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\n\nimport { OrganizationManagementPreferencesService } from \"@bitwarden/common/admin-console/abstractions/organization-management-preferences/organization-management-preferences.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nexport type UserConfirmDialogData = {\n  name: string;\n  userId: string;\n  publicKey: Uint8Array;\n  confirmUser: (publicKey: Uint8Array) => Promise<void>;\n};\n\n@Component({\n  selector: \"app-user-confirm\",\n  templateUrl: \"user-confirm.component.html\",\n})\nexport class UserConfirmComponent implements OnInit {\n  name: string;\n  userId: string;\n  publicKey: Uint8Array;\n\n  loading = true;\n  fingerprint: string;\n  formPromise: Promise<any>;\n\n  formGroup = new FormGroup({\n    dontAskAgain: new FormControl(false),\n  });\n\n  constructor(\n    @Inject(DIALOG_DATA) protected data: UserConfirmDialogData,\n    private dialogRef: DialogRef,\n    private cryptoService: CryptoService,\n    private logService: LogService,\n    private organizationManagementPreferencesService: OrganizationManagementPreferencesService,\n  ) {\n    this.name = data.name;\n    this.userId = data.userId;\n    this.publicKey = data.publicKey;\n  }\n\n  async ngOnInit() {\n    try {\n      if (this.publicKey != null) {\n        const fingerprint = await this.cryptoService.getFingerprint(this.userId, this.publicKey);\n        if (fingerprint != null) {\n          this.fingerprint = fingerprint.join(\"-\");\n        }\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n    this.loading = false;\n  }\n\n  submit = async () => {\n    if (this.loading) {\n      return;\n    }\n\n    if (this.formGroup.value.dontAskAgain) {\n      await this.organizationManagementPreferencesService.autoConfirmFingerPrints.set(true);\n    }\n\n    await this.data.confirmUser(this.publicKey);\n\n    this.dialogRef.close();\n  };\n\n  static open(dialogService: DialogService, config: DialogConfig<UserConfirmDialogData>) {\n    return dialogService.open(UserConfirmComponent, config);\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <span bitDialogTitle>\n      {{ \"confirmUser\" | i18n }}\n      <span class=\"tw-text-muted\" bitTypography=\"body1\">{{ name }}</span>\n    </span>\n    <ng-container bitDialogContent>\n      <p bitTypography=\"body1\">\n        {{ \"fingerprintEnsureIntegrityVerify\" | i18n }}\n        <a\n          bitLink\n          href=\"https://bitwarden.com/help/fingerprint-phrase/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {{ \"learnMore\" | i18n }}</a\n        >\n      </p>\n      <p bitTypography=\"body1\">\n        <code>{{ fingerprint }}</code>\n      </p>\n      <bit-form-control>\n        <input type=\"checkbox\" bitCheckbox formControlName=\"dontAskAgain\" />\n        <bit-label>{{ \"dontAskFingerprintAgain\" | i18n }}</bit-label>\n      </bit-form-control>\n    </ng-container>\n    <ng-container bitDialogFooter>\n      <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n        {{ \"confirm\" | i18n }}\n      </button>\n      <button bitButton bitFormButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { Directive, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { FormControl } from \"@angular/forms\";\nimport { firstValueFrom, lastValueFrom, debounceTime } from \"rxjs\";\n\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationManagementPreferencesService } from \"@bitwarden/common/admin-console/abstractions/organization-management-preferences/organization-management-preferences.service\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n  ProviderUserStatusType,\n  ProviderUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { ProviderUserUserDetailsResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { DialogService, TableDataSource } from \"@bitwarden/components\";\n\nimport { OrganizationUserView } from \"../organizations/core/views/organization-user.view\";\nimport { UserConfirmComponent } from \"../organizations/manage/user-confirm.component\";\n\ntype StatusType = OrganizationUserStatusType | ProviderUserStatusType;\n\nconst MaxCheckedCount = 500;\n\n/**\n * A refactored copy of BasePeopleComponent, using the component library table and other modern features.\n * This will replace BasePeopleComponent once all subclasses have been changed over to use this class.\n */\n@Directive()\nexport abstract class NewBasePeopleComponent<\n  UserView extends ProviderUserUserDetailsResponse | OrganizationUserView,\n> {\n  @ViewChild(\"confirmTemplate\", { read: ViewContainerRef, static: true })\n  confirmModalRef: ViewContainerRef;\n\n  get allCount() {\n    return this.activeUsers != null ? this.activeUsers.length : 0;\n  }\n\n  get invitedCount() {\n    return this.statusMap.has(this.userStatusType.Invited)\n      ? this.statusMap.get(this.userStatusType.Invited).length\n      : 0;\n  }\n\n  get acceptedCount() {\n    return this.statusMap.has(this.userStatusType.Accepted)\n      ? this.statusMap.get(this.userStatusType.Accepted).length\n      : 0;\n  }\n\n  get confirmedCount() {\n    return this.statusMap.has(this.userStatusType.Confirmed)\n      ? this.statusMap.get(this.userStatusType.Confirmed).length\n      : 0;\n  }\n\n  get revokedCount() {\n    return this.statusMap.has(this.userStatusType.Revoked)\n      ? this.statusMap.get(this.userStatusType.Revoked).length\n      : 0;\n  }\n\n  /**\n   * Shows a banner alerting the admin that users need to be confirmed.\n   */\n  get showConfirmUsers(): boolean {\n    return (\n      this.activeUsers != null &&\n      this.statusMap != null &&\n      this.activeUsers.length > 1 &&\n      this.confirmedCount > 0 &&\n      this.confirmedCount < 3 &&\n      this.acceptedCount > 0\n    );\n  }\n\n  get showBulkConfirmUsers(): boolean {\n    return this.acceptedCount > 0;\n  }\n\n  abstract userType: typeof OrganizationUserType | typeof ProviderUserType;\n  abstract userStatusType: typeof OrganizationUserStatusType | typeof ProviderUserStatusType;\n\n  protected dataSource = new TableDataSource<UserView>();\n\n  firstLoaded: boolean;\n\n  /**\n   * A hashmap that groups users by their status (invited/accepted/etc). This is used by the toggles to show\n   * user counts and filter data by user status.\n   */\n  statusMap = new Map<StatusType, UserView[]>();\n\n  /**\n   * The currently selected status filter, or null to show all active users.\n   */\n  status: StatusType | null;\n\n  /**\n   * The currently executing promise - used to avoid multiple user actions executing at once.\n   */\n  actionPromise: Promise<void>;\n\n  /**\n   * All users, loaded from the server, before any filtering has been applied.\n   */\n  protected allUsers: UserView[] = [];\n\n  /**\n   * Active users only, that is, users that are not in the revoked status.\n   */\n  protected activeUsers: UserView[] = [];\n\n  protected searchControl = new FormControl(\"\", { nonNullable: true });\n\n  constructor(\n    protected apiService: ApiService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected cryptoService: CryptoService,\n    protected validationService: ValidationService,\n    protected modalService: ModalService,\n    private logService: LogService,\n    protected userNamePipe: UserNamePipe,\n    protected dialogService: DialogService,\n    protected organizationManagementPreferencesService: OrganizationManagementPreferencesService,\n  ) {\n    // Connect the search input to the table dataSource filter input\n    this.searchControl.valueChanges\n      .pipe(debounceTime(200), takeUntilDestroyed())\n      .subscribe((v) => (this.dataSource.filter = v));\n  }\n\n  abstract edit(user: UserView): void;\n  abstract getUsers(): Promise<ListResponse<UserView> | UserView[]>;\n  abstract deleteUser(id: string): Promise<void>;\n  abstract revokeUser(id: string): Promise<void>;\n  abstract restoreUser(id: string): Promise<void>;\n  abstract reinviteUser(id: string): Promise<void>;\n  abstract confirmUser(user: UserView, publicKey: Uint8Array): Promise<void>;\n\n  async load() {\n    // Load new users from the server\n    const response = await this.getUsers();\n\n    // Reset and repopulate the statusMap\n    this.statusMap.clear();\n    this.activeUsers = [];\n    for (const status of Utils.iterateEnum(this.userStatusType)) {\n      this.statusMap.set(status, []);\n    }\n\n    if (response instanceof ListResponse) {\n      this.allUsers = response.data != null && response.data.length > 0 ? response.data : [];\n    } else if (Array.isArray(response)) {\n      this.allUsers = response;\n    }\n\n    this.allUsers.forEach((u) => {\n      if (!this.statusMap.has(u.status)) {\n        this.statusMap.set(u.status, [u]);\n      } else {\n        this.statusMap.get(u.status).push(u);\n      }\n      if (u.status !== this.userStatusType.Revoked) {\n        this.activeUsers.push(u);\n      }\n    });\n\n    // Filter based on UserStatus - this also populates the table on first load\n    this.filter(this.status);\n\n    this.firstLoaded = true;\n  }\n\n  /**\n   * Filter the data source by user status.\n   * This overwrites dataSource.data because this filtering needs to apply first, before the search input\n   */\n  filter(status: StatusType | null) {\n    this.status = status;\n    if (this.status != null) {\n      this.dataSource.data = this.statusMap.get(this.status);\n    } else {\n      this.dataSource.data = this.activeUsers;\n    }\n    // Reset checkbox selection\n    this.selectAll(false);\n  }\n\n  checkUser(user: UserView, select?: boolean) {\n    (user as any).checked = select == null ? !(user as any).checked : select;\n  }\n\n  selectAll(select: boolean) {\n    if (select) {\n      // Reset checkbox selection first so we know nothing else is selected\n      this.selectAll(false);\n    }\n\n    const filteredUsers = this.dataSource.filteredData;\n\n    const selectCount =\n      select && filteredUsers.length > MaxCheckedCount ? MaxCheckedCount : filteredUsers.length;\n    for (let i = 0; i < selectCount; i++) {\n      this.checkUser(filteredUsers[i], select);\n    }\n  }\n\n  invite() {\n    this.edit(null);\n  }\n\n  protected async removeUserConfirmationDialog(user: UserView) {\n    return this.dialogService.openSimpleDialog({\n      title: this.userNamePipe.transform(user),\n      content: { key: \"removeUserConfirmation\" },\n      type: \"warning\",\n    });\n  }\n\n  async remove(user: UserView) {\n    const confirmed = await this.removeUserConfirmationDialog(user);\n    if (!confirmed) {\n      return false;\n    }\n\n    this.actionPromise = this.deleteUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"removedUserId\", this.userNamePipe.transform(user)),\n      );\n      this.removeUser(user);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  protected async revokeUserConfirmationDialog(user: UserView) {\n    return this.dialogService.openSimpleDialog({\n      title: { key: \"revokeAccess\", placeholders: [this.userNamePipe.transform(user)] },\n      content: this.revokeWarningMessage(),\n      acceptButtonText: { key: \"revokeAccess\" },\n      type: \"warning\",\n    });\n  }\n\n  async revoke(user: UserView) {\n    const confirmed = await this.revokeUserConfirmationDialog(user);\n\n    if (!confirmed) {\n      return false;\n    }\n\n    this.actionPromise = this.revokeUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"revokedUserId\", this.userNamePipe.transform(user)),\n      );\n      await this.load();\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async restore(user: UserView) {\n    this.actionPromise = this.restoreUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"restoredUserId\", this.userNamePipe.transform(user)),\n      );\n      await this.load();\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async reinvite(user: UserView) {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    this.actionPromise = this.reinviteUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"hasBeenReinvited\", this.userNamePipe.transform(user)),\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async confirm(user: UserView) {\n    function updateUser(self: NewBasePeopleComponent<UserView>) {\n      user.status = self.userStatusType.Confirmed;\n      const mapIndex = self.statusMap.get(self.userStatusType.Accepted).indexOf(user);\n      if (mapIndex > -1) {\n        self.statusMap.get(self.userStatusType.Accepted).splice(mapIndex, 1);\n        self.statusMap.get(self.userStatusType.Confirmed).push(user);\n      }\n    }\n\n    const confirmUser = async (publicKey: Uint8Array) => {\n      try {\n        this.actionPromise = this.confirmUser(user, publicKey);\n        await this.actionPromise;\n        updateUser(this);\n        this.platformUtilsService.showToast(\n          \"success\",\n          null,\n          this.i18nService.t(\"hasBeenConfirmed\", this.userNamePipe.transform(user)),\n        );\n      } catch (e) {\n        this.validationService.showError(e);\n        throw e;\n      } finally {\n        this.actionPromise = null;\n      }\n    };\n\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    try {\n      const publicKeyResponse = await this.apiService.getUserPublicKey(user.userId);\n      const publicKey = Utils.fromB64ToArray(publicKeyResponse.publicKey);\n\n      const autoConfirm = await firstValueFrom(\n        this.organizationManagementPreferencesService.autoConfirmFingerPrints.state$,\n      );\n      if (autoConfirm == null || !autoConfirm) {\n        const dialogRef = UserConfirmComponent.open(this.dialogService, {\n          data: {\n            name: this.userNamePipe.transform(user),\n            userId: user != null ? user.userId : null,\n            publicKey: publicKey,\n            confirmUser: () => confirmUser(publicKey),\n          },\n        });\n        await lastValueFrom(dialogRef.closed);\n\n        return;\n      }\n\n      try {\n        const fingerprint = await this.cryptoService.getFingerprint(user.userId, publicKey);\n        this.logService.info(`User's fingerprint: ${fingerprint.join(\"-\")}`);\n      } catch (e) {\n        this.logService.error(e);\n      }\n      await confirmUser(publicKey);\n    } catch (e) {\n      this.logService.error(`Handled exception: ${e}`);\n    }\n  }\n\n  protected revokeWarningMessage(): string {\n    return this.i18nService.t(\"revokeUserConfirmation\");\n  }\n\n  protected getCheckedUsers() {\n    return this.dataSource.data.filter((u) => (u as any).checked);\n  }\n\n  /**\n   * Remove a user row from the table and all related data sources\n   */\n  protected removeUser(user: UserView) {\n    let index = this.dataSource.data.indexOf(user);\n    if (index > -1) {\n      // Clone the array so that the setter for dataSource.data is triggered to update the table rendering\n      const updatedData = [...this.dataSource.data];\n      updatedData.splice(index, 1);\n      this.dataSource.data = updatedData;\n    }\n\n    index = this.allUsers.indexOf(user);\n    if (index > -1) {\n      this.allUsers.splice(index, 1);\n    }\n\n    if (this.statusMap.has(user.status)) {\n      index = this.statusMap.get(user.status).indexOf(user);\n      if (index > -1) {\n        this.statusMap.get(user.status).splice(index, 1);\n      }\n    }\n  }\n}\n","import { OrganizationUserUserDetailsResponse } from \"@bitwarden/common/admin-console/abstractions/organization-user/responses\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { PermissionsApi } from \"@bitwarden/common/admin-console/models/api/permissions.api\";\n\nimport { CollectionAccessSelectionView } from \"./collection-access-selection.view\";\n\nexport class OrganizationUserView {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  /**\n   * @deprecated\n   * To be removed after Flexible Collections.\n   * This will always return `false` if Flexible Collections is enabled.\n   **/\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  name: string;\n  email: string;\n  avatarColor: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n  hasMasterPassword: boolean;\n  /**\n   * True if this organizaztion user has been granted access to Secrets Manager, false otherwise.\n   */\n  accessSecretsManager: boolean;\n\n  collections: CollectionAccessSelectionView[] = [];\n  groups: string[] = [];\n\n  groupNames: string[] = [];\n  collectionNames: string[] = [];\n\n  static fromResponse(response: OrganizationUserUserDetailsResponse): OrganizationUserView {\n    const view = Object.assign(new OrganizationUserView(), response) as OrganizationUserView;\n\n    if (response.collections != undefined) {\n      view.collections = response.collections.map((c) => new CollectionAccessSelectionView(c));\n    }\n\n    if (response.groups != undefined) {\n      view.groups = response.groups;\n    }\n\n    return view;\n  }\n}\n","type OrganizationUserBulkRequestEntry = {\n  id: string;\n  key: string;\n};\n\nexport class OrganizationUserBulkConfirmRequest {\n  keys: OrganizationUserBulkRequestEntry[];\n\n  constructor(keys: OrganizationUserBulkRequestEntry[]) {\n    this.keys = keys;\n  }\n}\n","<bit-dialog dialogSize=\"large\" [title]=\"'confirmUsers' | i18n\" [loading]=\"loading\">\n  <ng-container bitDialogContent>\n    <app-callout type=\"danger\" *ngIf=\"filteredUsers.length <= 0\">\n      {{ \"noSelectedUsersApplicable\" | i18n }}\n    </app-callout>\n    <app-callout type=\"error\" *ngIf=\"error\">\n      {{ error }}\n    </app-callout>\n    <ng-container *ngIf=\"!loading && !done\">\n      <p bitTypography=\"body1\">\n        {{ \"fingerprintEnsureIntegrityVerify\" | i18n }}\n        <a\n          bitLink\n          href=\"https://bitwarden.com/help/fingerprint-phrase/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {{ \"learnMore\" | i18n }}</a\n        >\n      </p>\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell>{{ \"fingerprint\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of filteredUsers\" alignContent=\"middle\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <p class=\"tw-text-muted tw-text-sm\" *ngIf=\"user.name\">{{ user.name }}</p>\n            </td>\n            <td bitCell>\n              {{ fingerprints.get(user.id) }}\n            </td>\n          </tr>\n          <tr *ngFor=\"let user of excludedUsers\" alignContent=\"middle\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <p class=\"tw-text-muted tw-text-sm\" *ngIf=\"user.name\">{{ user.name }}</p>\n            </td>\n            <td bitCell>\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n    <ng-container *ngIf=\"!loading && done\">\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of filteredUsers\" alignContent=\"middle\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <p class=\"tw-text-muted tw-text-sm\" *ngIf=\"user.name\">{{ user.name }}</p>\n            </td>\n            <td bitCell *ngIf=\"statuses.has(user.id)\">\n              {{ statuses.get(user.id) }}\n            </td>\n            <td bitCell *ngIf=\"!statuses.has(user.id)\">\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </ng-container>\n  <ng-container bitDialogFooter>\n    <button\n      *ngIf=\"!done\"\n      bitButton\n      type=\"submit\"\n      buttonType=\"primary\"\n      (click)=\"submit()\"\n      [disabled]=\"loading\"\n    >\n      {{ \"confirm\" | i18n }}\n    </button>\n    <button bitButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserBulkConfirmRequest } from \"@bitwarden/common/admin-console/abstractions/organization-user/requests\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/admin-console/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\ntype BulkConfirmDialogData = {\n  organizationId: string;\n  users: BulkUserDetails[];\n};\n\n@Component({\n  selector: \"app-bulk-confirm\",\n  templateUrl: \"bulk-confirm.component.html\",\n})\nexport class BulkConfirmComponent implements OnInit {\n  organizationId: string;\n  users: BulkUserDetails[];\n\n  excludedUsers: BulkUserDetails[];\n  filteredUsers: BulkUserDetails[];\n  publicKeys: Map<string, Uint8Array> = new Map();\n  fingerprints: Map<string, string> = new Map();\n  statuses: Map<string, string> = new Map();\n\n  loading = true;\n  done = false;\n  error: string;\n\n  constructor(\n    @Inject(DIALOG_DATA) protected data: BulkConfirmDialogData,\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    private organizationUserService: OrganizationUserService,\n    private i18nService: I18nService,\n  ) {\n    this.organizationId = data.organizationId;\n    this.users = data.users;\n  }\n\n  async ngOnInit() {\n    this.excludedUsers = this.users.filter((u) => !this.isAccepted(u));\n    this.filteredUsers = this.users.filter((u) => this.isAccepted(u));\n\n    if (this.filteredUsers.length <= 0) {\n      this.done = true;\n    }\n\n    const response = await this.getPublicKeys();\n\n    for (const entry of response.data) {\n      const publicKey = Utils.fromB64ToArray(entry.key);\n      const fingerprint = await this.cryptoService.getFingerprint(entry.userId, publicKey);\n      if (fingerprint != null) {\n        this.publicKeys.set(entry.id, publicKey);\n        this.fingerprints.set(entry.id, fingerprint.join(\"-\"));\n      }\n    }\n\n    this.loading = false;\n  }\n\n  async submit() {\n    this.loading = true;\n    try {\n      const key = await this.getCryptoKey();\n      const userIdsWithKeys: any[] = [];\n      for (const user of this.filteredUsers) {\n        const publicKey = this.publicKeys.get(user.id);\n        if (publicKey == null) {\n          continue;\n        }\n        const encryptedKey = await this.cryptoService.rsaEncrypt(key.key, publicKey);\n        userIdsWithKeys.push({\n          id: user.id,\n          key: encryptedKey.encryptedString,\n        });\n      }\n      const response = await this.postConfirmRequest(userIdsWithKeys);\n\n      response.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(\"bulkConfirmMessage\");\n        this.statuses.set(entry.id, error);\n      });\n\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n    this.loading = false;\n  }\n\n  protected isAccepted(user: BulkUserDetails) {\n    return user.status === OrganizationUserStatusType.Accepted;\n  }\n\n  protected async getPublicKeys() {\n    return await this.organizationUserService.postOrganizationUsersPublicKey(\n      this.organizationId,\n      this.filteredUsers.map((user) => user.id),\n    );\n  }\n\n  protected getCryptoKey(): Promise<SymmetricCryptoKey> {\n    return this.cryptoService.getOrgKey(this.organizationId);\n  }\n\n  protected async postConfirmRequest(userIdsWithKeys: any[]) {\n    const request = new OrganizationUserBulkConfirmRequest(userIdsWithKeys);\n    return await this.organizationUserService.postOrganizationUserBulkConfirm(\n      this.organizationId,\n      request,\n    );\n  }\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkConfirmDialogData>) {\n    return dialogService.open(BulkConfirmComponent, config);\n  }\n}\n","<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>{{ \"activateSecretsManager\" | i18n }}</span>\n  <span bitDialogContent>\n    <p>{{ \"bulkEnableSecretsManagerDescription\" | i18n }}</p>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"member\" | i18n }}</th>\n          <th bitCell>{{ \"role\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let u of rows$ | async\">\n          <td bitCell>\n            <div class=\"tw-flex tw-items-center\">\n              <bit-avatar\n                size=\"small\"\n                [text]=\"u | userName\"\n                [id]=\"u.userId\"\n                [color]=\"u.avatarColor\"\n                class=\"tw-mr-3\"\n              ></bit-avatar>\n              <div class=\"tw-flex tw-flex-col\">\n                <div>\n                  {{ u | userName }}\n                </div>\n                <div class=\"tw-text-sm tw-text-muted\" *ngIf=\"u.name\">\n                  {{ u.email }}\n                </div>\n              </div>\n            </div>\n          </td>\n          <td bitCell>{{ u.type | userType }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"submit\">\n      {{ \"activateAccess\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService, TableDataSource } from \"@bitwarden/components\";\n\nimport { OrganizationUserView } from \"../../../core\";\n\nexport type BulkEnableSecretsManagerDialogData = {\n  orgId: string;\n  users: OrganizationUserView[];\n};\n\n@Component({\n  templateUrl: `bulk-enable-sm-dialog.component.html`,\n})\nexport class BulkEnableSecretsManagerDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<OrganizationUserView>();\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: BulkEnableSecretsManagerDialogData,\n    private organizationUserService: OrganizationUserService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n  ) {}\n\n  ngOnInit(): void {\n    this.dataSource.data = this.data.users;\n  }\n\n  submit = async () => {\n    await this.organizationUserService.putOrganizationUserBulkEnableSecretsManager(\n      this.data.orgId,\n      this.dataSource.data.map((u) => u.id),\n    );\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"activatedAccessToSecretsManager\"),\n    );\n    this.dialogRef.close();\n  };\n\n  static open(dialogService: DialogService, data: BulkEnableSecretsManagerDialogData) {\n    return dialogService.open<unknown, BulkEnableSecretsManagerDialogData>(\n      BulkEnableSecretsManagerDialogComponent,\n      { data },\n    );\n  }\n}\n","<bit-dialog dialogSize=\"large\" [title]=\"'removeUsers' | i18n\">\n  <ng-container bitDialogContent>\n    <app-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n      {{ \"noSelectedUsersApplicable\" | i18n }}\n    </app-callout>\n    <app-callout type=\"error\" *ngIf=\"error\">\n      {{ error }}\n    </app-callout>\n    <ng-container *ngIf=\"!done\">\n      <app-callout type=\"warning\" *ngIf=\"users.length > 0 && !error\">\n        <p bitTypography=\"body1\">{{ removeUsersWarning }}</p>\n        <p *ngIf=\"this.showNoMasterPasswordWarning\" bitTypography=\"body1\">\n          {{ \"removeMembersWithoutMasterPasswordWarning\" | i18n }}\n        </p>\n      </app-callout>\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell *ngIf=\"this.showNoMasterPasswordWarning\">{{ \"details\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-text-muted tw-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td bitCell *ngIf=\"this.showNoMasterPasswordWarning\">\n              <span class=\"tw-text-muted tw-block tw-lowercase\">\n                <ng-container *ngIf=\"user.hasMasterPassword === true\"> - </ng-container>\n                <ng-container *ngIf=\"user.hasMasterPassword === false\">\n                  <i class=\"bwi bwi-exclamation-triangle\" aria-hidden=\"true\"></i>\n                  {{ \"noMasterPassword\" | i18n }}\n                </ng-container>\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n    <ng-container *ngIf=\"done\">\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell class=\"tw-w-5\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-text-muted tw-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td *ngIf=\"statuses.has(user.id)\" bitCell>\n              {{ statuses.get(user.id) }}\n            </td>\n            <td *ngIf=\"!statuses.has(user.id)\" bitCell>\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </ng-container>\n  <ng-container bitDialogFooter>\n    <button\n      *ngIf=\"!done && users.length > 0\"\n      bitButton\n      type=\"submit\"\n      buttonType=\"primary\"\n      [disabled]=\"loading\"\n      [bitAction]=\"submit\"\n    >\n      {{ \"removeUsers\" | i18n }}\n    </button>\n    <button bitButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/admin-console/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\ntype BulkRemoveDialogData = {\n  organizationId: string;\n  users: BulkUserDetails[];\n};\n\n@Component({\n  selector: \"app-bulk-remove\",\n  templateUrl: \"bulk-remove.component.html\",\n})\nexport class BulkRemoveComponent {\n  organizationId: string;\n  users: BulkUserDetails[];\n\n  statuses: Map<string, string> = new Map();\n\n  loading = false;\n  done = false;\n  error: string;\n  showNoMasterPasswordWarning = false;\n\n  constructor(\n    @Inject(DIALOG_DATA) protected data: BulkRemoveDialogData,\n    protected apiService: ApiService,\n    protected i18nService: I18nService,\n    private organizationUserService: OrganizationUserService,\n  ) {\n    this.organizationId = data.organizationId;\n    this.users = data.users;\n    this.showNoMasterPasswordWarning = this.users.some(\n      (u) => u.status > OrganizationUserStatusType.Invited && u.hasMasterPassword === false,\n    );\n  }\n\n  submit = async () => {\n    this.loading = true;\n    try {\n      const response = await this.deleteUsers();\n\n      response.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(\"bulkRemovedMessage\");\n        this.statuses.set(entry.id, error);\n      });\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n\n    this.loading = false;\n  };\n\n  protected async deleteUsers() {\n    return await this.organizationUserService.deleteManyOrganizationUsers(\n      this.organizationId,\n      this.users.map((user) => user.id),\n    );\n  }\n\n  protected get removeUsersWarning() {\n    return this.i18nService.t(\"removeOrgUsersConfirmation\");\n  }\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkRemoveDialogData>) {\n    return dialogService.open(BulkRemoveComponent, config);\n  }\n}\n","<bit-dialog>\n  <ng-container bitDialogTitle>\n    <h1>{{ bulkTitle }}</h1>\n  </ng-container>\n  <div bitDialogContent>\n    <bit-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n      {{ \"noSelectedUsersApplicable\" | i18n }}\n    </bit-callout>\n\n    <bit-callout type=\"danger\" *ngIf=\"error\">\n      {{ error }}\n    </bit-callout>\n\n    <ng-container *ngIf=\"!done\">\n      <bit-callout type=\"warning\" *ngIf=\"users.length > 0 && !error && isRevoking\">\n        <p>{{ \"revokeUsersWarning\" | i18n }}</p>\n        <p *ngIf=\"this.showNoMasterPasswordWarning\">\n          {{ \"removeMembersWithoutMasterPasswordWarning\" | i18n }}\n        </p>\n      </bit-callout>\n\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th bitCell *ngIf=\"this.showNoMasterPasswordWarning\">{{ \"details\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell width=\"30\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-block tw-text-muted\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td bitCell *ngIf=\"this.showNoMasterPasswordWarning\">\n              <span class=\"tw-block tw-lowercase tw-text-muted\">\n                <ng-container *ngIf=\"user.hasMasterPassword === true\"> - </ng-container>\n                <ng-container *ngIf=\"user.hasMasterPassword === false\">\n                  <i class=\"bwi bwi-exclamation-triangle\" aria-hidden=\"true\"></i>\n                  {{ \"noMasterPassword\" | i18n }}\n                </ng-container>\n              </span>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n\n    <ng-container *ngIf=\"done\">\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell colspan=\"2\">{{ \"user\" | i18n }}</th>\n            <th>{{ \"status\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let user of users\">\n            <td bitCell width=\"30\">\n              <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n            </td>\n            <td bitCell>\n              {{ user.email }}\n              <small class=\"tw-block tw-text-muted\" *ngIf=\"user.name\">{{ user.name }}</small>\n            </td>\n            <td bitCell *ngIf=\"statuses.has(user.id)\">\n              {{ statuses.get(user.id) }}\n            </td>\n            <td bitCell *ngIf=\"!statuses.has(user.id)\">\n              {{ \"bulkFilteredMessage\" | i18n }}\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </div>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton *ngIf=\"!done && users.length > 0\" [bitAction]=\"submit\">\n      {{ bulkTitle }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/admin-console/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\ntype BulkRestoreDialogParams = {\n  organizationId: string;\n  users: BulkUserDetails[];\n  isRevoking: boolean;\n};\n\n@Component({\n  selector: \"app-bulk-restore-revoke\",\n  templateUrl: \"bulk-restore-revoke.component.html\",\n})\nexport class BulkRestoreRevokeComponent {\n  isRevoking: boolean;\n  organizationId: string;\n  users: BulkUserDetails[];\n\n  statuses: Map<string, string> = new Map();\n\n  loading = false;\n  done = false;\n  error: string;\n  showNoMasterPasswordWarning = false;\n\n  constructor(\n    protected i18nService: I18nService,\n    private organizationUserService: OrganizationUserService,\n    @Inject(DIALOG_DATA) protected data: BulkRestoreDialogParams,\n  ) {\n    this.isRevoking = data.isRevoking;\n    this.organizationId = data.organizationId;\n    this.users = data.users;\n    this.showNoMasterPasswordWarning = this.users.some(\n      (u) => u.status > OrganizationUserStatusType.Invited && u.hasMasterPassword === false,\n    );\n  }\n\n  get bulkTitle() {\n    const titleKey = this.isRevoking ? \"revokeUsers\" : \"restoreUsers\";\n    return this.i18nService.t(titleKey);\n  }\n\n  submit = async () => {\n    try {\n      const response = await this.performBulkUserAction();\n\n      const bulkMessage = this.isRevoking ? \"bulkRevokedMessage\" : \"bulkRestoredMessage\";\n      response.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(bulkMessage);\n        this.statuses.set(entry.id, error);\n      });\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n  };\n\n  protected async performBulkUserAction() {\n    const userIds = this.users.map((user) => user.id);\n    if (this.isRevoking) {\n      return await this.organizationUserService.revokeManyOrganizationUsers(\n        this.organizationId,\n        userIds,\n      );\n    } else {\n      return await this.organizationUserService.restoreManyOrganizationUsers(\n        this.organizationId,\n        userIds,\n      );\n    }\n  }\n\n  static open(dialogService: DialogService, data: BulkRestoreDialogParams) {\n    return dialogService.open(BulkRestoreRevokeComponent, { data });\n  }\n}\n","<bit-dialog dialogSize=\"large\" [title]=\"'bulkConfirmStatus' | i18n\">\n  <ng-container bitDialogContent>\n    <div class=\"tw-text-center\" *ngIf=\"loading\">\n      <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n      {{ \"loading\" | i18n }}\n    </div>\n    <bit-table *ngIf=\"!loading\">\n      <ng-container header>\n        <tr>\n          <th colspan=\"2\" bitCell>{{ \"user\" | i18n }}</th>\n          <th bitCell>{{ \"status\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let item of users\">\n          <td width=\"30\" bitCell>\n            <bit-avatar [text]=\"item.user | userName\" [id]=\"item.user.id\" size=\"small\"></bit-avatar>\n          </td>\n          <td bitCell>\n            {{ item.user.email }}\n            <small class=\"text-muted d-block\" *ngIf=\"item.user.name\">{{ item.user.name }}</small>\n          </td>\n          <td class=\"tw-text-danger\" *ngIf=\"item.error\" bitCell>\n            {{ item.message }}\n          </td>\n          <td *ngIf=\"!item.error\" bitCell>\n            {{ item.message }}\n          </td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </ng-container>\n  <ng-container bitDialogFooter>\n    <button bitButton type=\"button\" buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DIALOG_DATA, DialogConfig } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { OrganizationUserBulkResponse } from \"@bitwarden/common/admin-console/abstractions/organization-user/responses\";\nimport {\n  OrganizationUserStatusType,\n  ProviderUserStatusType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { ProviderUserBulkResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user-bulk.response\";\nimport { ProviderUserUserDetailsResponse } from \"@bitwarden/common/admin-console/models/response/provider/provider-user.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { OrganizationUserView } from \"../../../core/views/organization-user.view\";\n\nexport interface BulkUserDetails {\n  id: string;\n  name: string;\n  email: string;\n  status: OrganizationUserStatusType | ProviderUserStatusType;\n  hasMasterPassword?: boolean;\n}\n\ntype BulkStatusEntry = {\n  user: BulkUserDetails;\n  error: boolean;\n  message: string;\n};\n\ntype BulkStatusDialogData = {\n  users: Array<OrganizationUserView | ProviderUserUserDetailsResponse>;\n  filteredUsers: Array<OrganizationUserView | ProviderUserUserDetailsResponse>;\n  request: Promise<ListResponse<OrganizationUserBulkResponse | ProviderUserBulkResponse>>;\n  successfullMessage: string;\n};\n\n@Component({\n  selector: \"app-bulk-status\",\n  templateUrl: \"bulk-status.component.html\",\n})\nexport class BulkStatusComponent implements OnInit {\n  users: BulkStatusEntry[];\n  loading = false;\n\n  constructor(\n    @Inject(DIALOG_DATA) protected data: BulkStatusDialogData,\n    private i18nService: I18nService,\n    private logService: LogService,\n  ) {}\n\n  async ngOnInit() {\n    this.loading = true;\n    await this.showBulkStatus(this.data);\n  }\n\n  async showBulkStatus(data: BulkStatusDialogData) {\n    try {\n      const response = await data.request;\n      const keyedErrors: any = response.data\n        .filter((r) => r.error !== \"\")\n        .reduce((a, x) => ({ ...a, [x.id]: x.error }), {});\n      const keyedFilteredUsers: any = data.filteredUsers.reduce(\n        (a, x) => ({ ...a, [x.id]: x }),\n        {},\n      );\n\n      this.users = data.users.map((user) => {\n        let message = keyedErrors[user.id] ?? data.successfullMessage;\n        // eslint-disable-next-line\n        if (!keyedFilteredUsers.hasOwnProperty(user.id)) {\n          message = this.i18nService.t(\"bulkFilteredMessage\");\n        }\n\n        return {\n          user: user,\n          error: keyedErrors.hasOwnProperty(user.id), // eslint-disable-line\n          message: message,\n        };\n      });\n      this.loading = false;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkStatusDialogData>) {\n    return dialogService.open(BulkStatusComponent, config);\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"resetPasswordTitle\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\" [appApiAction]=\"formPromise\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"resetPasswordTitle\">\n          {{ \"recoverAccount\" | i18n }}\n          <small class=\"text-muted\" *ngIf=\"name\">{{ name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <app-callout type=\"warning\"\n          >{{ \"resetPasswordLoggedOutWarning\" | i18n: loggedOutWarningName }}\n        </app-callout>\n        <auth-password-callout\n          [policy]=\"enforcedPolicyOptions\"\n          message=\"resetPasswordMasterPasswordPolicyInEffect\"\n          *ngIf=\"enforcedPolicyOptions\"\n        >\n        </auth-password-callout>\n        <div class=\"row\">\n          <div class=\"col form-group\">\n            <div class=\"d-flex\">\n              <label for=\"newPassword\">{{ \"newPassword\" | i18n }}</label>\n              <div class=\"ml-auto d-flex\">\n                <a\n                  href=\"#\"\n                  class=\"d-block mr-2 bwi-icon-above-input\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'generatePassword' | i18n }}\"\n                  (click)=\"generatePassword()\"\n                >\n                  <i class=\"bwi bwi-lg bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n                </a>\n              </div>\n            </div>\n            <div class=\"input-group mb-1\">\n              <input\n                id=\"newPassword\"\n                class=\"form-control text-monospace\"\n                appAutofocus\n                type=\"{{ showPassword ? 'text' : 'password' }}\"\n                name=\"NewPassword\"\n                [(ngModel)]=\"newPassword\"\n                required\n                appInputVerbatim\n                autocomplete=\"new-password\"\n              />\n              <div class=\"input-group-append\">\n                <button\n                  type=\"button\"\n                  class=\"btn btn-outline-secondary\"\n                  appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n                  (click)=\"togglePassword()\"\n                >\n                  <i\n                    class=\"bwi bwi-lg\"\n                    aria-hidden=\"true\"\n                    [ngClass]=\"{ 'bwi-eye': !showPassword, 'bwi-eye-slash': showPassword }\"\n                  ></i>\n                </button>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-outline-secondary\"\n                  appA11yTitle=\"{{ 'copyPassword' | i18n }}\"\n                  (click)=\"copy(newPassword)\"\n                >\n                  <i class=\"bwi bwi-lg bwi-clone\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n            </div>\n            <app-password-strength\n              [password]=\"newPassword\"\n              [email]=\"email\"\n              [showText]=\"true\"\n              (passwordStrengthResult)=\"getStrengthResult($event)\"\n            >\n            </app-password-strength>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary btn-submit\" [disabled]=\"form.loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport zxcvbn from \"zxcvbn\";\n\nimport { PasswordStrengthComponent } from \"@bitwarden/angular/tools/password-strength/password-strength.component\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/admin-console/models/domain/master-password-policy-options\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { OrganizationUserResetPasswordService } from \"../services/organization-user-reset-password/organization-user-reset-password.service\";\n\n@Component({\n  selector: \"app-reset-password\",\n  templateUrl: \"reset-password.component.html\",\n})\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n  @Input() name: string;\n  @Input() email: string;\n  @Input() id: string;\n  @Input() organizationId: string;\n  @Output() onPasswordReset = new EventEmitter();\n  @ViewChild(PasswordStrengthComponent) passwordStrengthComponent: PasswordStrengthComponent;\n\n  enforcedPolicyOptions: MasterPasswordPolicyOptions;\n  newPassword: string = null;\n  showPassword = false;\n  passwordStrengthResult: zxcvbn.ZXCVBNResult;\n  formPromise: Promise<any>;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private resetPasswordService: OrganizationUserResetPasswordService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private policyService: PolicyService,\n    private logService: LogService,\n    private dialogService: DialogService,\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .masterPasswordPolicyOptions$()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (enforcedPasswordPolicyOptions) =>\n          (this.enforcedPolicyOptions = enforcedPasswordPolicyOptions),\n      );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get loggedOutWarningName() {\n    return this.name != null ? this.name : this.i18nService.t(\"thisUser\");\n  }\n\n  async generatePassword() {\n    const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n    this.newPassword = await this.passwordGenerationService.generatePassword(options);\n    this.passwordStrengthComponent.updatePasswordStrength(this.newPassword);\n  }\n\n  togglePassword() {\n    this.showPassword = !this.showPassword;\n    document.getElementById(\"newPassword\").focus();\n  }\n\n  copy(value: string) {\n    if (value == null) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.platformUtilsService.showToast(\n      \"info\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"password\")),\n    );\n  }\n\n  async submit() {\n    // Validation\n    if (this.newPassword == null || this.newPassword === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordRequired\"),\n      );\n      return false;\n    }\n\n    if (this.newPassword.length < Utils.minimumPasswordLength) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordMinlength\", Utils.minimumPasswordLength),\n      );\n      return false;\n    }\n\n    if (\n      this.enforcedPolicyOptions != null &&\n      !this.policyService.evaluateMasterPassword(\n        this.passwordStrengthResult.score,\n        this.newPassword,\n        this.enforcedPolicyOptions,\n      )\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordPolicyRequirementsNotMet\"),\n      );\n      return;\n    }\n\n    if (this.passwordStrengthResult.score < 3) {\n      const result = await this.dialogService.openSimpleDialog({\n        title: { key: \"weakMasterPassword\" },\n        content: { key: \"weakMasterPasswordDesc\" },\n        type: \"warning\",\n      });\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    try {\n      this.formPromise = this.resetPasswordService.resetMasterPassword(\n        this.newPassword,\n        this.email,\n        this.id,\n        this.organizationId,\n      );\n      await this.formPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"resetPasswordSuccess\"),\n      );\n      this.onPasswordReset.emit();\n    } catch (e) {\n      this.logService.error(e);\n    }\n    this.formPromise = null;\n  }\n\n  getStrengthResult(result: zxcvbn.ZXCVBNResult) {\n    this.passwordStrengthResult = result;\n  }\n}\n","<app-header>\n  <bit-search\n    class=\"tw-grow\"\n    [formControl]=\"searchControl\"\n    [placeholder]=\"'searchMembers' | i18n\"\n  ></bit-search>\n\n  <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"invite()\">\n    <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n    {{ \"inviteMember\" | i18n }}\n  </button>\n</app-header>\n\n<div class=\"tw-mb-4 tw-flex tw-flex-col tw-space-y-4\">\n  <bit-toggle-group\n    [selected]=\"status\"\n    (selectedChange)=\"filter($event)\"\n    [attr.aria-label]=\"'memberStatusFilter' | i18n\"\n  >\n    <bit-toggle [value]=\"null\">\n      {{ \"all\" | i18n }} <span bitBadge variant=\"info\" *ngIf=\"allCount\">{{ allCount }}</span>\n    </bit-toggle>\n\n    <bit-toggle [value]=\"userStatusType.Invited\">\n      {{ \"invited\" | i18n }}\n      <span bitBadge variant=\"info\" *ngIf=\"invitedCount\">{{ invitedCount }}</span>\n    </bit-toggle>\n\n    <bit-toggle [value]=\"userStatusType.Accepted\">\n      {{ \"needsConfirmation\" | i18n }}\n      <span bitBadge variant=\"info\" *ngIf=\"acceptedCount\">{{ acceptedCount }}</span>\n    </bit-toggle>\n\n    <bit-toggle [value]=\"userStatusType.Revoked\">\n      {{ \"revoked\" | i18n }}\n      <span bitBadge variant=\"info\" *ngIf=\"revokedCount\">{{ revokedCount }}</span>\n    </bit-toggle>\n  </bit-toggle-group>\n</div>\n<ng-container *ngIf=\"!firstLoaded\">\n  <i\n    class=\"bwi bwi-spinner bwi-spin text-muted\"\n    title=\"{{ 'loading' | i18n }}\"\n    aria-hidden=\"true\"\n  ></i>\n  <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n</ng-container>\n<ng-container *ngIf=\"firstLoaded\">\n  <p *ngIf=\"!dataSource.filteredData.length\">{{ \"noMembersInList\" | i18n }}</p>\n  <ng-container *ngIf=\"dataSource.filteredData.length\">\n    <app-callout\n      type=\"info\"\n      title=\"{{ 'confirmUsers' | i18n }}\"\n      icon=\"bwi bwi-check-circle\"\n      *ngIf=\"showConfirmUsers\"\n    >\n      {{ \"usersNeedConfirmed\" | i18n }}\n    </app-callout>\n    <!-- The padding on the bottom of the cdk-virtual-scroll-viewport element is required to prevent table row content\n    from overflowing the <main> element. -->\n    <cdk-virtual-scroll-viewport scrollWindow [itemSize]=\"rowHeight\" class=\"tw-pb-8\">\n      <bit-table [dataSource]=\"dataSource\">\n        <ng-container header>\n          <tr>\n            <th bitCell class=\"tw-w-20\">\n              <input\n                type=\"checkbox\"\n                bitCheckbox\n                class=\"tw-mr-1\"\n                (change)=\"selectAll($any($event.target).checked)\"\n                id=\"selectAll\"\n              />\n              <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n                \"all\" | i18n\n              }}</label>\n            </th>\n            <th bitCell bitSortable=\"email\" default>{{ \"name\" | i18n }}</th>\n            <th bitCell>{{ (organization.useGroups ? \"groups\" : \"collections\") | i18n }}</th>\n            <th bitCell bitSortable=\"type\">{{ \"role\" | i18n }}</th>\n            <th bitCell>{{ \"policies\" | i18n }}</th>\n            <th bitCell class=\"tw-w-10\">\n              <button\n                [bitMenuTriggerFor]=\"headerMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #headerMenu>\n                <ng-container *ngIf=\"canUseSecretsManager$ | async\">\n                  <button type=\"button\" bitMenuItem (click)=\"bulkEnableSM()\">\n                    {{ \"activateSecretsManager\" | i18n }}\n                  </button>\n                  <bit-menu-divider></bit-menu-divider>\n                </ng-container>\n                <button type=\"button\" bitMenuItem (click)=\"bulkReinvite()\">\n                  <i class=\"bwi bwi-fw bwi-envelope\" aria-hidden=\"true\"></i>\n                  {{ \"reinviteSelected\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkConfirm()\"\n                  *ngIf=\"showBulkConfirmUsers\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i class=\"bwi bwi-fw bwi-check\" aria-hidden=\"true\"></i>\n                    {{ \"confirmSelected\" | i18n }}\n                  </span>\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRestore()\">\n                  <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRevoke()\">\n                  <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRemove()\">\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-close\"></i>\n                    {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </th>\n          </tr>\n        </ng-container>\n        <ng-template body let-rows$>\n          <tr\n            bitRow\n            *cdkVirtualFor=\"let u of rows$\"\n            alignContent=\"middle\"\n            [ngClass]=\"rowHeightClass\"\n          >\n            <td bitCell (click)=\"checkUser(u)\">\n              <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"$any(u).checked\" />\n            </td>\n            <td bitCell (click)=\"edit(u)\" class=\"tw-cursor-pointer\">\n              <div class=\"tw-flex tw-items-center\">\n                <bit-avatar\n                  size=\"small\"\n                  [text]=\"u | userName\"\n                  [id]=\"u.userId\"\n                  [color]=\"u.avatarColor\"\n                  class=\"tw-mr-3\"\n                ></bit-avatar>\n                <div class=\"tw-flex tw-flex-col\">\n                  <div>\n                    <button type=\"button\" bitLink>\n                      {{ u.name ?? u.email }}\n                    </button>\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      variant=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Invited\"\n                      >{{ \"invited\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      variant=\"warning\"\n                      *ngIf=\"u.status === userStatusType.Accepted\"\n                      >{{ \"needsConfirmation\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      variant=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Revoked\"\n                      >{{ \"revoked\" | i18n }}</span\n                    >\n                  </div>\n                  <div class=\"tw-text-sm tw-text-muted\" *ngIf=\"u.name\">\n                    {{ u.email }}\n                  </div>\n                </div>\n              </div>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, organization.useGroups ? memberTab.Groups : memberTab.Collections)\"\n              class=\"tw-cursor-pointer\"\n            >\n              <bit-badge-list\n                [items]=\"organization.useGroups ? u.groupNames : u.collectionNames\"\n                [maxItems]=\"3\"\n                variant=\"secondary\"\n              ></bit-badge-list>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, memberTab.Role)\"\n              class=\"tw-cursor-pointer tw-text-sm tw-text-muted\"\n            >\n              {{ u.type | userType }}\n            </td>\n\n            <td bitCell class=\"tw-text-muted\">\n              <ng-container *ngIf=\"u.twoFactorEnabled\">\n                <i\n                  class=\"bwi bwi-lock\"\n                  title=\"{{ 'userUsingTwoStep' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"userUsingTwoStep\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"showEnrolledStatus($any(u))\">\n                <i\n                  class=\"bwi bwi-key\"\n                  title=\"{{ 'enrolledAccountRecovery' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"enrolledAccountRecovery\" | i18n }}</span>\n              </ng-container>\n            </td>\n            <td bitCell>\n              <button\n                [bitMenuTriggerFor]=\"rowMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #rowMenu>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"reinvite(u)\"\n                  *ngIf=\"u.status === userStatusType.Invited\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-envelope\"></i>\n                  {{ \"resendInvitation\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"confirm(u)\"\n                  *ngIf=\"u.status === userStatusType.Accepted\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-check\"></i> {{ \"confirm\" | i18n }}\n                  </span>\n                </button>\n                <bit-menu-divider\n                  *ngIf=\"\n                    u.status === userStatusType.Accepted || u.status === userStatusType.Invited\n                  \"\n                ></bit-menu-divider>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Role)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"memberRole\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"edit(u, memberTab.Groups)\"\n                  *ngIf=\"organization.useGroups\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-users\"></i> {{ \"groups\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Collections)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n                </button>\n                <bit-menu-divider></bit-menu-divider>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"openEventsDialog(u)\"\n                  *ngIf=\"organization.useEvents && u.status === userStatusType.Confirmed\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-file-text\"></i> {{ \"eventLogs\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"resetPassword(u)\"\n                  *ngIf=\"allowResetPassword(u)\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-key\"></i> {{ \"recoverAccount\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"restore(u)\"\n                  *ngIf=\"u.status === userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-plus-circle\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"revoke(u)\"\n                  *ngIf=\"u.status !== userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-minus-circle\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"remove(u)\">\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-close\"></i> {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </cdk-virtual-scroll-viewport>\n  </ng-container>\n</ng-container>\n<ng-template #addEdit></ng-template>\n<ng-template #groupsTemplate></ng-template>\n<ng-template #confirmTemplate></ng-template>\n<ng-template #resetPasswordTemplate></ng-template>\n<ng-template #bulkStatusTemplate></ng-template>\n<ng-template #bulkConfirmTemplate></ng-template>\n<ng-template #bulkRemoveTemplate></ng-template>\n","import { Component, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  combineLatest,\n  concatMap,\n  firstValueFrom,\n  from,\n  lastValueFrom,\n  map,\n  Observable,\n  shareReplay,\n  switchMap,\n} from \"rxjs\";\n\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationApiServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/organization/organization-api.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationManagementPreferencesService } from \"@bitwarden/common/admin-console/abstractions/organization-management-preferences/organization-management-preferences.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserConfirmRequest } from \"@bitwarden/common/admin-console/abstractions/organization-user/requests\";\nimport { OrganizationUserUserDetailsResponse } from \"@bitwarden/common/admin-console/abstractions/organization-user/responses\";\nimport { PolicyApiServiceAbstraction as PolicyApiService } from \"@bitwarden/common/admin-console/abstractions/policy/policy-api.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n  PolicyType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { Policy } from \"@bitwarden/common/admin-console/models/domain/policy\";\nimport { OrganizationKeysRequest } from \"@bitwarden/common/admin-console/models/request/organization-keys.request\";\nimport { BillingApiServiceAbstraction } from \"@bitwarden/common/billing/abstractions/billilng-api.service.abstraction\";\nimport { ProductType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { DialogService, SimpleDialogOptions } from \"@bitwarden/components\";\n\nimport { openEntityEventsDialog } from \"../../../admin-console/organizations/manage/entity-events.component\";\nimport { NewBasePeopleComponent } from \"../../common/new-base.people.component\";\nimport { GroupService } from \"../core\";\nimport { OrganizationUserView } from \"../core/views/organization-user.view\";\n\nimport { BulkConfirmComponent } from \"./components/bulk/bulk-confirm.component\";\nimport { BulkEnableSecretsManagerDialogComponent } from \"./components/bulk/bulk-enable-sm-dialog.component\";\nimport { BulkRemoveComponent } from \"./components/bulk/bulk-remove.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport {\n  MemberDialogResult,\n  MemberDialogTab,\n  openUserAddEditDialog,\n} from \"./components/member-dialog\";\nimport { ResetPasswordComponent } from \"./components/reset-password.component\";\n\n@Component({\n  selector: \"app-org-people\",\n  templateUrl: \"people.component.html\",\n})\nexport class PeopleComponent extends NewBasePeopleComponent<OrganizationUserView> {\n  @ViewChild(\"groupsTemplate\", { read: ViewContainerRef, static: true })\n  groupsModalRef: ViewContainerRef;\n  @ViewChild(\"confirmTemplate\", { read: ViewContainerRef, static: true })\n  confirmModalRef: ViewContainerRef;\n  @ViewChild(\"resetPasswordTemplate\", { read: ViewContainerRef, static: true })\n  resetPasswordModalRef: ViewContainerRef;\n  @ViewChild(\"bulkStatusTemplate\", { read: ViewContainerRef, static: true })\n  bulkStatusModalRef: ViewContainerRef;\n  @ViewChild(\"bulkConfirmTemplate\", { read: ViewContainerRef, static: true })\n  bulkConfirmModalRef: ViewContainerRef;\n  @ViewChild(\"bulkRemoveTemplate\", { read: ViewContainerRef, static: true })\n  bulkRemoveModalRef: ViewContainerRef;\n\n  userType = OrganizationUserType;\n  userStatusType = OrganizationUserStatusType;\n  memberTab = MemberDialogTab;\n\n  organization: Organization;\n  status: OrganizationUserStatusType = null;\n  orgResetPasswordPolicyEnabled = false;\n  orgIsOnSecretsManagerStandalone = false;\n\n  protected canUseSecretsManager$: Observable<boolean>;\n\n  // Fixed sizes used for cdkVirtualScroll\n  protected rowHeight = 62;\n  protected rowHeightClass = `tw-h-[62px]`;\n\n  constructor(\n    apiService: ApiService,\n    private route: ActivatedRoute,\n    i18nService: I18nService,\n    modalService: ModalService,\n    platformUtilsService: PlatformUtilsService,\n    cryptoService: CryptoService,\n    validationService: ValidationService,\n    private policyService: PolicyService,\n    private policyApiService: PolicyApiService,\n    logService: LogService,\n    userNamePipe: UserNamePipe,\n    private syncService: SyncService,\n    private organizationService: OrganizationService,\n    private organizationApiService: OrganizationApiServiceAbstraction,\n    private organizationUserService: OrganizationUserService,\n    dialogService: DialogService,\n    private router: Router,\n    private groupService: GroupService,\n    private collectionService: CollectionService,\n    organizationManagementPreferencesService: OrganizationManagementPreferencesService,\n    private billingApiService: BillingApiServiceAbstraction,\n  ) {\n    super(\n      apiService,\n      i18nService,\n      platformUtilsService,\n      cryptoService,\n      validationService,\n      modalService,\n      logService,\n      userNamePipe,\n      dialogService,\n      organizationManagementPreferencesService,\n    );\n\n    const organization$ = this.route.params.pipe(\n      concatMap((params) => this.organizationService.get$(params.organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.canUseSecretsManager$ = organization$.pipe(map((org) => org.useSecretsManager));\n\n    const policies$ = organization$.pipe(\n      switchMap((organization) => {\n        if (organization.isProviderUser) {\n          return from(this.policyApiService.getPolicies(organization.id)).pipe(\n            map((response) => Policy.fromListResponse(response)),\n          );\n        }\n\n        return this.policyService.policies$;\n      }),\n    );\n\n    combineLatest([this.route.queryParams, policies$, organization$])\n      .pipe(\n        concatMap(async ([qParams, policies, organization]) => {\n          this.organization = organization;\n\n          // Backfill pub/priv key if necessary\n          if (\n            this.organization.canManageUsersPassword &&\n            !this.organization.hasPublicAndPrivateKeys\n          ) {\n            const orgShareKey = await this.cryptoService.getOrgKey(this.organization.id);\n            const orgKeys = await this.cryptoService.makeKeyPair(orgShareKey);\n            const request = new OrganizationKeysRequest(orgKeys[0], orgKeys[1].encryptedString);\n            const response = await this.organizationApiService.updateKeys(\n              this.organization.id,\n              request,\n            );\n            if (response != null) {\n              this.organization.hasPublicAndPrivateKeys =\n                response.publicKey != null && response.privateKey != null;\n              await this.syncService.fullSync(true); // Replace organizations with new data\n            } else {\n              throw new Error(this.i18nService.t(\"resetPasswordOrgKeysError\"));\n            }\n          }\n\n          const resetPasswordPolicy = policies\n            .filter((policy) => policy.type === PolicyType.ResetPassword)\n            .find((p) => p.organizationId === this.organization.id);\n          this.orgResetPasswordPolicyEnabled = resetPasswordPolicy?.enabled;\n\n          this.orgIsOnSecretsManagerStandalone = false; // don't get billing metadata\n\n          await this.load();\n\n          this.searchControl.setValue(qParams.search);\n\n          if (qParams.viewEvents != null) {\n            const user = this.dataSource.data.filter((u) => u.id === qParams.viewEvents);\n            if (user.length > 0 && user[0].status === OrganizationUserStatusType.Confirmed) {\n              this.openEventsDialog(user[0]);\n            }\n          }\n        }),\n        takeUntilDestroyed(),\n      )\n      .subscribe();\n  }\n\n  async getUsers(): Promise<OrganizationUserView[]> {\n    let groupsPromise: Promise<Map<string, string>>;\n    let collectionsPromise: Promise<Map<string, string>>;\n\n    // We don't need both groups and collections for the table, so only load one\n    const userPromise = this.organizationUserService.getAllUsers(this.organization.id, {\n      includeGroups: this.organization.useGroups,\n      includeCollections: !this.organization.useGroups,\n    });\n\n    // Depending on which column is displayed, we need to load the group/collection names\n    if (this.organization.useGroups) {\n      groupsPromise = this.getGroupNameMap();\n    } else {\n      collectionsPromise = this.getCollectionNameMap();\n    }\n\n    const [usersResponse, groupNamesMap, collectionNamesMap] = await Promise.all([\n      userPromise,\n      groupsPromise,\n      collectionsPromise,\n    ]);\n\n    return usersResponse.data?.map<OrganizationUserView>((r) => {\n      const userView = OrganizationUserView.fromResponse(r);\n\n      userView.groupNames = userView.groups\n        .map((g) => groupNamesMap.get(g))\n        .sort(this.i18nService.collator?.compare);\n      userView.collectionNames = userView.collections\n        .map((c) => collectionNamesMap.get(c.id))\n        .sort(this.i18nService.collator?.compare);\n\n      return userView;\n    });\n  }\n\n  async getGroupNameMap(): Promise<Map<string, string>> {\n    const groups = await this.groupService.getAll(this.organization.id);\n    const groupNameMap = new Map<string, string>();\n    groups.forEach((g) => groupNameMap.set(g.id, g.name));\n    return groupNameMap;\n  }\n\n  /**\n   * Retrieve a map of all collection IDs <-> names for the organization.\n   */\n  async getCollectionNameMap() {\n    const collectionMap = new Map<string, string>();\n    const response = await this.apiService.getCollections(this.organization.id);\n\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse)),\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    decryptedCollections.forEach((c) => collectionMap.set(c.id, c.name));\n\n    return collectionMap;\n  }\n\n  deleteUser(id: string): Promise<void> {\n    return this.organizationUserService.deleteOrganizationUser(this.organization.id, id);\n  }\n\n  revokeUser(id: string): Promise<void> {\n    return this.organizationUserService.revokeOrganizationUser(this.organization.id, id);\n  }\n\n  restoreUser(id: string): Promise<void> {\n    return this.organizationUserService.restoreOrganizationUser(this.organization.id, id);\n  }\n\n  reinviteUser(id: string): Promise<void> {\n    return this.organizationUserService.postOrganizationUserReinvite(this.organization.id, id);\n  }\n\n  async confirmUser(user: OrganizationUserView, publicKey: Uint8Array): Promise<void> {\n    const orgKey = await this.cryptoService.getOrgKey(this.organization.id);\n    const key = await this.cryptoService.rsaEncrypt(orgKey.key, publicKey);\n    const request = new OrganizationUserConfirmRequest();\n    request.key = key.encryptedString;\n    await this.organizationUserService.postOrganizationUserConfirm(\n      this.organization.id,\n      user.id,\n      request,\n    );\n  }\n\n  allowResetPassword(orgUser: OrganizationUserView): boolean {\n    // Hierarchy check\n    let callingUserHasPermission = false;\n\n    switch (this.organization.type) {\n      case OrganizationUserType.Owner:\n        callingUserHasPermission = true;\n        break;\n      case OrganizationUserType.Admin:\n        callingUserHasPermission = orgUser.type !== OrganizationUserType.Owner;\n        break;\n      case OrganizationUserType.Custom:\n        callingUserHasPermission =\n          orgUser.type !== OrganizationUserType.Owner &&\n          orgUser.type !== OrganizationUserType.Admin;\n        break;\n    }\n\n    // Final\n    return (\n      this.organization.canManageUsersPassword &&\n      callingUserHasPermission &&\n      this.organization.useResetPassword &&\n      this.organization.hasPublicAndPrivateKeys &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled &&\n      orgUser.status === OrganizationUserStatusType.Confirmed\n    );\n  }\n\n  showEnrolledStatus(orgUser: OrganizationUserUserDetailsResponse): boolean {\n    return (\n      this.organization.useResetPassword &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled\n    );\n  }\n\n  private getManageBillingText(): string {\n    return this.organization.canEditSubscription ? \"ManageBilling\" : \"NoManageBilling\";\n  }\n\n  private getProductKey(productType: ProductType): string {\n    let product = \"\";\n    switch (productType) {\n      case ProductType.Free:\n        product = \"freeOrg\";\n        break;\n      case ProductType.TeamsStarter:\n        product = \"teamsStarterPlan\";\n        break;\n      default:\n        throw new Error(`Unsupported product type: ${productType}`);\n    }\n    return `${product}InvLimitReached${this.getManageBillingText()}`;\n  }\n\n  private getDialogContent(): string {\n    return this.i18nService.t(\n      this.getProductKey(this.organization.planProductType),\n      this.organization.seats,\n    );\n  }\n\n  private getAcceptButtonText(): string {\n    if (!this.organization.canEditSubscription) {\n      return this.i18nService.t(\"ok\");\n    }\n\n    const productType = this.organization.planProductType;\n\n    if (productType !== ProductType.Free && productType !== ProductType.TeamsStarter) {\n      throw new Error(`Unsupported product type: ${productType}`);\n    }\n\n    return this.i18nService.t(\"upgrade\");\n  }\n\n  private async handleDialogClose(result: boolean | undefined): Promise<void> {\n    if (!result || !this.organization.canEditSubscription) {\n      return;\n    }\n\n    const productType = this.organization.planProductType;\n\n    if (productType !== ProductType.Free && productType !== ProductType.TeamsStarter) {\n      throw new Error(`Unsupported product type: ${this.organization.planProductType}`);\n    }\n\n    await this.router.navigate(\n      [\"/organizations\", this.organization.id, \"billing\", \"subscription\"],\n      { queryParams: { upgrade: true } },\n    );\n  }\n\n  private async showSeatLimitReachedDialog(): Promise<void> {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.getDialogContent(),\n      type: \"primary\",\n      acceptButtonText: this.getAcceptButtonText(),\n    };\n\n    if (!this.organization.canEditSubscription) {\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null;\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialogRef(orgUpgradeSimpleDialogOpts);\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    firstValueFrom(simpleDialog.closed).then(this.handleDialogClose.bind(this));\n  }\n\n  async edit(user: OrganizationUserView, initialTab: MemberDialogTab = MemberDialogTab.Role) {\n    if (!user && this.organization.hasReseller && this.organization.seats === this.confirmedCount) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"seatLimitReached\"),\n        this.i18nService.t(\"contactYourProvider\"),\n      );\n      return;\n    }\n\n    // Invite User: Add Flow\n    // Click on user email: Edit Flow\n\n    // User attempting to invite new users in a free org with max users\n    if (\n      !user &&\n      this.allUsers.length === this.organization.seats &&\n      (this.organization.planProductType === ProductType.Free ||\n        this.organization.planProductType === ProductType.TeamsStarter)\n    ) {\n      // Show org upgrade modal\n      await this.showSeatLimitReachedDialog();\n      return;\n    }\n\n    const dialog = openUserAddEditDialog(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        organizationId: this.organization.id,\n        organizationUserId: user != null ? user.id : null,\n        allOrganizationUserEmails: this.allUsers?.map((user) => user.email) ?? [],\n        usesKeyConnector: user?.usesKeyConnector,\n        isOnSecretsManagerStandalone: this.orgIsOnSecretsManagerStandalone,\n        initialTab: initialTab,\n        numConfirmedMembers: this.confirmedCount,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    switch (result) {\n      case MemberDialogResult.Deleted:\n        this.removeUser(user);\n        break;\n      case MemberDialogResult.Saved:\n      case MemberDialogResult.Revoked:\n      case MemberDialogResult.Restored:\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.load();\n        break;\n    }\n  }\n\n  async bulkRemove() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const dialogRef = BulkRemoveComponent.open(this.dialogService, {\n      data: {\n        organizationId: this.organization.id,\n        users: this.getCheckedUsers(),\n      },\n    });\n    await lastValueFrom(dialogRef.closed);\n    await this.load();\n  }\n\n  async bulkRevoke() {\n    await this.bulkRevokeOrRestore(true);\n  }\n\n  async bulkRestore() {\n    await this.bulkRevokeOrRestore(false);\n  }\n\n  async bulkRevokeOrRestore(isRevoking: boolean) {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const ref = BulkRestoreRevokeComponent.open(this.dialogService, {\n      organizationId: this.organization.id,\n      users: this.getCheckedUsers(),\n      isRevoking: isRevoking,\n    });\n\n    await firstValueFrom(ref.closed);\n    await this.load();\n  }\n\n  async bulkReinvite() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const users = this.getCheckedUsers();\n    const filteredUsers = users.filter((u) => u.status === OrganizationUserStatusType.Invited);\n\n    if (filteredUsers.length <= 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"noSelectedUsersApplicable\"),\n      );\n      return;\n    }\n\n    try {\n      const response = this.organizationUserService.postManyOrganizationUserReinvite(\n        this.organization.id,\n        filteredUsers.map((user) => user.id),\n      );\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n      // Bulk Status component open\n      const dialogRef = BulkStatusComponent.open(this.dialogService, {\n        data: {\n          users: users,\n          filteredUsers: filteredUsers,\n          request: response,\n          successfullMessage: this.i18nService.t(\"bulkReinviteMessage\"),\n        },\n      });\n      await lastValueFrom(dialogRef.closed);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async bulkConfirm() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const dialogRef = BulkConfirmComponent.open(this.dialogService, {\n      data: {\n        organizationId: this.organization.id,\n        users: this.getCheckedUsers(),\n      },\n    });\n\n    await lastValueFrom(dialogRef.closed);\n    await this.load();\n  }\n\n  async bulkEnableSM() {\n    const users = this.getCheckedUsers().filter((ou) => !ou.accessSecretsManager);\n\n    if (users.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"noSelectedUsersApplicable\"),\n      );\n      return;\n    }\n\n    const dialogRef = BulkEnableSecretsManagerDialogComponent.open(this.dialogService, {\n      orgId: this.organization.id,\n      users,\n    });\n\n    await lastValueFrom(dialogRef.closed);\n    this.selectAll(false);\n    await this.load();\n  }\n\n  openEventsDialog(user: OrganizationUserView) {\n    openEntityEventsDialog(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        organizationId: this.organization.id,\n        entityId: user.id,\n        showUser: false,\n        entity: \"user\",\n      },\n    });\n  }\n\n  async resetPassword(user: OrganizationUserView) {\n    const [modal] = await this.modalService.openViewRef(\n      ResetPasswordComponent,\n      this.resetPasswordModalRef,\n      (comp) => {\n        comp.name = this.userNamePipe.transform(user);\n        comp.email = user != null ? user.email : null;\n        comp.organizationId = this.organization.id;\n        comp.id = user != null ? user.id : null;\n\n        // eslint-disable-next-line rxjs-angular/prefer-takeuntil\n        comp.onPasswordReset.subscribe(() => {\n          modal.close();\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.load();\n        });\n      },\n    );\n  }\n\n  protected async removeUserConfirmationDialog(user: OrganizationUserView) {\n    const content = user.usesKeyConnector\n      ? \"removeUserConfirmationKeyConnector\"\n      : \"removeOrgUserConfirmation\";\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeUserIdAccess\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      content: { key: content },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (user.status > OrganizationUserStatusType.Invited && user.hasMasterPassword === false) {\n      return await this.noMasterPasswordConfirmationDialog(user);\n    }\n\n    return true;\n  }\n\n  protected async revokeUserConfirmationDialog(user: OrganizationUserView) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"revokeAccess\", placeholders: [this.userNamePipe.transform(user)] },\n      content: this.revokeWarningMessage(),\n      acceptButtonText: { key: \"revokeAccess\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (user.status > OrganizationUserStatusType.Invited && user.hasMasterPassword === false) {\n      return await this.noMasterPasswordConfirmationDialog(user);\n    }\n\n    return true;\n  }\n\n  private async noMasterPasswordConfirmationDialog(user: OrganizationUserView) {\n    return this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeOrgUserNoMasterPasswordTitle\",\n      },\n      content: {\n        key: \"removeOrgUserNoMasterPasswordDesc\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      type: \"warning\",\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessMembersTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { OrganizationPermissionsGuard } from \"../guards/org-permissions.guard\";\n\nimport { PeopleComponent } from \"./people.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: PeopleComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"members\",\n      organizationPermissions: canAccessMembersTab,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MembersRoutingModule {}\n","import { ScrollingModule } from \"@angular/cdk/scrolling\";\nimport { NgModule } from \"@angular/core\";\n\nimport { PasswordCalloutComponent } from \"@bitwarden/auth/angular\";\n\nimport { LooseComponentsModule } from \"../../../shared\";\nimport { SharedOrganizationModule } from \"../shared\";\n\nimport { BulkConfirmComponent } from \"./components/bulk/bulk-confirm.component\";\nimport { BulkEnableSecretsManagerDialogComponent } from \"./components/bulk/bulk-enable-sm-dialog.component\";\nimport { BulkRemoveComponent } from \"./components/bulk/bulk-remove.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport { UserDialogModule } from \"./components/member-dialog\";\nimport { ResetPasswordComponent } from \"./components/reset-password.component\";\nimport { MembersRoutingModule } from \"./members-routing.module\";\nimport { PeopleComponent } from \"./people.component\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    LooseComponentsModule,\n    MembersRoutingModule,\n    UserDialogModule,\n    PasswordCalloutComponent,\n    ScrollingModule,\n  ],\n  declarations: [\n    BulkConfirmComponent,\n    BulkEnableSecretsManagerDialogComponent,\n    BulkRemoveComponent,\n    BulkRestoreRevokeComponent,\n    BulkStatusComponent,\n    PeopleComponent,\n    ResetPasswordComponent,\n  ],\n})\nexport class MembersModule {}\n"],"names":["commaSeparatedEmails","control","value","undefined","split","map","email","trim","find","_","multipleEmails","message","orgSeatLimitReachedValidator","organization","allOrganizationUserEmails","errorMessage","newEmailsToAdd","Array","from","Set","filter","newEmailToAdd","some","existingEmail","planProductType","Free","Families","TeamsStarter","length","seats","seatLimitReached","onChildCheck","NestedCheckboxComponent","destroy$","Subject","onSavedUser","onDeletedUser","parentIndeterminate","this","children","key","every","ngOnInit","checkboxes","controls","parentId","valueChanges","pipe","takeUntil","subscribe","Object","values","forEach","setValue","emitEvent","parentCheckbox","entries","parentChecked","index","item","ngOnDestroy","next","complete","pascalize","s","camelToPascalCase","MemberDialogTab","MemberDialogResult","handleDependentPermissions","MemberDialogComponent","customUserTypeSelected","formGroup","type","Custom","accessAllCollections","constructor","params","dialogRef","i18nService","platformUtilsService","formBuilder","collectionAdminService","groupService","userService","organizationUserService","dialogService","configService","accountService","organizationService","loading","editMode","isRevoked","access","collections","organizationUserType","PermissionMode","showNoMasterPasswordWarning","collectionAccessItems","groupAccessItems","group","emails","User","externalId","disabled","accessSecretsManager","groups","permissionsGroup","manageAssignedCollectionsGroup","manageAssignedCollections","editAssignedCollections","deleteAssignedCollections","manageAllCollectionsGroup","manageAllCollections","createNewCollections","editAnyCollection","deleteAnyCollection","accessEventLogs","accessImportExport","accessReports","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","submit","markAllAsTouched","invalid","tabIndex","Role","showToast","t","firstValueFrom","organization$","useCustomPermissions","userView","id","organizationUserId","organizationId","accessAll","permissions","setRequestPermissions","v","Collection","restrictEditingSelf$","m","save","maxEmailsCount","setErrors","tooManyEmails","hasReseller","numConfirmedMembers","invite","name","close","Saved","delete","usesKeyConnector","confirmed","openSimpleDialog","title","placeholders","content","noMasterPasswordConfirmationDialog","deleteOrganizationUser","Deleted","revoke","acceptButtonText","revokeOrganizationUser","Revoked","restore","restoreOrganizationUser","Restored","ProductType","get$","shareReplay","refCount","bufferSize","initialTab","isOnSecretsManagerStandalone","patchValue","groups$","switchMap","useGroups","getAll","of","userDetails$","get","allowAdminAccessToAllCollectionItems$","combineLatest","getFeatureFlag$","FlexibleCollectionsV1","flexibleCollectionsV1Enabled","flexibleCollections","allowAdminAccessToAllCollectionItems","activeAccount$","allowAdminAccess","userDetails","activeAccount","userId","restrictEditingSelf","disable","enable","flexibleCollectionsV1Enabled$","canAssignAccessToAnyCollection$","org","canEditAnyCollection","setFormValidators","concat","g","mapGroupToAccessItemView","Group","labelName","listName","c","mapCollectionToAccessItemView","users","readonly","loadOrganizationUser","emailsControlValidators","required","emailsControl","setValidators","updateValueAndValidity","Error","status","Invited","hasMasterPassword","assignedCollectionsPermissions","allCollectionsPermissions","collectionsFromGroups","includes","flatMap","accessSelection","collection","accessSelections","user","items","selection","permission","mapToAccessSelections","groupAccessSelections","groupId","mapToGroupAccessSelections","removeControl","check","select","checked","readOnly","selectAll","p","clearPermissions","partialPermissions","assign","document","getElementById","cancel","Canceled","result","canEditUserAccess","readonlyPermission","viaGroupName","UserDialogModule","OrganizationUserConfirmRequest","UserConfirmComponent","data","cryptoService","logService","organizationManagementPreferencesService","dontAskAgain","autoConfirmFingerPrints","set","confirmUser","publicKey","fingerprint","getFingerprint","join","e","error","open","config","NewBasePeopleComponent","allCount","activeUsers","invitedCount","statusMap","has","userStatusType","acceptedCount","Accepted","confirmedCount","Confirmed","revokedCount","showConfirmUsers","showBulkConfirmUsers","apiService","validationService","modalService","userNamePipe","dataSource","Map","allUsers","searchControl","nonNullable","debounceTime","load","response","getUsers","clear","iterateEnum","L","isArray","u","push","firstLoaded","checkUser","filteredUsers","filteredData","selectCount","i","edit","removeUserConfirmationDialog","transform","remove","actionPromise","deleteUser","removeUser","showError","revokeUserConfirmationDialog","revokeWarningMessage","revokeUser","restoreUser","reinvite","reinviteUser","confirm","self","mapIndex","indexOf","splice","updateUser","publicKeyResponse","getUserPublicKey","fromB64ToArray","autoConfirm","state$","lastValueFrom","closed","info","getCheckedUsers","updatedData","OrganizationUserView","groupNames","collectionNames","fromResponse","view","OrganizationUserBulkConfirmRequest","keys","BulkConfirmComponent","publicKeys","fingerprints","statuses","done","excludedUsers","isAccepted","getPublicKeys","entry","getCryptoKey","userIdsWithKeys","encryptedKey","rsaEncrypt","encryptedString","postConfirmRequest","postOrganizationUsersPublicKey","getOrgKey","request","postOrganizationUserBulkConfirm","BulkEnableSecretsManagerDialogComponent","putOrganizationUserBulkEnableSecretsManager","orgId","BulkRemoveComponent","deleteUsers","deleteManyOrganizationUsers","removeUsersWarning","BulkRestoreRevokeComponent","performBulkUserAction","bulkMessage","isRevoking","bulkTitle","titleKey","userIds","revokeManyOrganizationUsers","restoreManyOrganizationUsers","BulkStatusComponent","showBulkStatus","keyedErrors","r","reduce","a","x","keyedFilteredUsers","successfullMessage","hasOwnProperty","ResetPasswordComponent","resetPasswordService","passwordGenerationService","policyService","onPasswordReset","newPassword","showPassword","masterPasswordPolicyOptions$","enforcedPasswordPolicyOptions","enforcedPolicyOptions","loggedOutWarningName","generatePassword","options","getOptions","passwordStrengthComponent","updatePasswordStrength","togglePassword","focus","copy","copyToClipboard","window","minimumPasswordLength","evaluateMasterPassword","passwordStrengthResult","score","formPromise","resetMasterPassword","emit","getStrengthResult","bulkEnableSM","bulkConfirm","openEventsDialog","resetPassword","bulkReinvite","bulkRestore","bulkRevoke","bulkRemove","PeopleComponent","route","policyApiService","syncService","organizationApiService","router","collectionService","billingApiService","super","userType","memberTab","orgResetPasswordPolicyEnabled","orgIsOnSecretsManagerStandalone","rowHeight","rowHeightClass","concatMap","canUseSecretsManager$","useSecretsManager","policies$","isProviderUser","getPolicies","fromListResponse","queryParams","qParams","policies","canManageUsersPassword","hasPublicAndPrivateKeys","orgShareKey","orgKeys","makeKeyPair","updateKeys","privateKey","fullSync","resetPasswordPolicy","policy","ResetPassword","enabled","search","viewEvents","groupsPromise","collectionsPromise","userPromise","getAllUsers","includeGroups","includeCollections","getGroupNameMap","getCollectionNameMap","usersResponse","groupNamesMap","collectionNamesMap","Promise","all","sort","collator","compare","groupNameMap","collectionMap","getCollections","decryptMany","postOrganizationUserReinvite","orgKey","postOrganizationUserConfirm","allowResetPassword","orgUser","callingUserHasPermission","Owner","Admin","useResetPassword","resetPasswordEnrolled","showEnrolledStatus","getManageBillingText","canEditSubscription","getProductKey","productType","product","getDialogContent","getAcceptButtonText","handleDialogClose","navigate","upgrade","showSeatLimitReachedDialog","orgUpgradeSimpleDialogOpts","cancelButtonText","simpleDialog","openSimpleDialogRef","then","bind","dialog","bulkRevokeOrRestore","ref","postManyOrganizationUserReinvite","ou","entityId","showUser","entity","modal","openViewRef","resetPasswordModalRef","comp","routes","path","component","canActivate","titleId","organizationPermissions","MembersRoutingModule","forChild","MembersModule"],"sourceRoot":""}