{"version":3,"file":"97.d236f792430150d595dd.js","mappings":";uMAsBM,SAAUA,EAAsBC,GAC/BA,KACHC,EAAAA,EAAAA,KAAyBF,GACzBC,GAAaE,EAAAA,EAAAA,KAAOC,EAAAA,MAGtB,MAAMC,EAAa,IAAIC,EAAAA,GAAiBC,GACjBN,EAAYO,UAAUD,EAASE,KAAKC,KAAKH,MAIhE,OAAWI,GACFA,EAAOC,MAAKC,EAAAA,EAAAA,GAAUR,GAEjC","sources":["webpack://@bitwarden/web-vault/../../../../packages/core/rxjs-interop/src/take_until_destroyed.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertInInjectionContext, DestroyRef, inject} from '@angular/core';\nimport {MonoTypeOperatorFunction, Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nexport function takeUntilDestroyed<T>(destroyRef?: DestroyRef): MonoTypeOperatorFunction<T> {\n  if (!destroyRef) {\n    assertInInjectionContext(takeUntilDestroyed);\n    destroyRef = inject(DestroyRef);\n  }\n\n  const destroyed$ = new Observable<void>(observer => {\n    const unregisterFn = destroyRef!.onDestroy(observer.next.bind(observer));\n    return unregisterFn;\n  });\n\n  return <T>(source: Observable<T>) => {\n    return source.pipe(takeUntil(destroyed$));\n  };\n}\n"],"names":["takeUntilDestroyed","destroyRef","assertInInjectionContext","inject","DestroyRef","destroyed$","Observable","observer","onDestroy","next","bind","source","pipe","takeUntil"],"sourceRoot":""}