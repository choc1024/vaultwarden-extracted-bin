{"version":3,"file":"979.d8eba5062c1ec7382639.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/exposed-passwords-report.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/exposed-passwords-report.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/inactive-two-factor-report.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/inactive-two-factor-report.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/reused-passwords-report.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/reused-passwords-report.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/unsecured-websites-report.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/unsecured-websites-report.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/reports/pages/weak-passwords-report.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/tools/weak-passwords-report.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/is-paid-org.guard.ts","webpack://@bitwarden/web-vault/./src/app/tools/event-export/event.export.ts","webpack://@bitwarden/web-vault/./src/app/tools/event-export/event-export.service.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/common/base.events.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/events.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/events.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/reports-home.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/reports-home.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/organization-reporting-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/reporting/organization-reporting.module.ts"],"sourcesContent":["<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"exposedPasswordsReportDesc\" | i18n }}</p>\n  <button type=\"submit\" buttonType=\"primary\" bitButton [loading]=\"loading\" (click)=\"load()\">\n    {{ \"checkExposedPasswords\" | i18n }}\n  </button>\n  <div class=\"mt-4\" *ngIf=\"hasLoaded\">\n    <app-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noExposedPasswords\" | i18n }}\n    </app-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <app-callout type=\"danger\" title=\"{{ 'exposedPasswordsFound' | i18n }}\" [useAlertRole]=\"true\">\n        {{ \"exposedPasswordsFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </app-callout>\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <table class=\"table table-hover table-list table-ciphers\">\n        <thead\n          class=\"tw-border-0 tw-border-b-2 tw-border-solid tw-border-secondary-300 tw-font-bold tw-text-muted\"\n          *ngIf=\"!isAdminConsoleActive\"\n        >\n          <tr>\n            <th></th>\n            <th>{{ \"name\" | i18n }}</th>\n            <th>{{ \"owner\" | i18n }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let c of ciphers\">\n            <td class=\"table-list-icon\">\n              <app-vault-icon [cipher]=\"c\"></app-vault-icon>\n            </td>\n            <td class=\"reduced-lh wrap\">\n              <ng-container *ngIf=\"!organization || canManageCipher(c); else cantManage\">\n                <a\n                  href=\"#\"\n                  appStopClick\n                  (click)=\"selectCipher(c)\"\n                  title=\"{{ 'editItem' | i18n }}\"\n                  >{{ c.name }}</a\n                >\n              </ng-container>\n              <ng-template #cantManage>\n                <span>{{ c.name }}</span>\n              </ng-template>\n              <ng-container *ngIf=\"!organization && c.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"c.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ c.subTitle }}</small>\n            </td>\n            <td>\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"c.organizationId\"\n                [organizationName]=\"c.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n            <td class=\"text-right\">\n              <span bitBadge variant=\"warning\">\n                {{ \"exposedXTimes\" | i18n: (exposedPasswordMap.get(c.id) | number) }}\n              </span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { AuditService } from \"@bitwarden/common/abstractions/audit.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { ExposedPasswordsReportComponent as BaseExposedPasswordsReportComponent } from \"../../../tools/reports/pages/exposed-passwords-report.component\";\n\n@Component({\n  selector: \"app-org-exposed-passwords-report\",\n  templateUrl: \"../../../tools/reports/pages/exposed-passwords-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class ExposedPasswordsReportComponent extends BaseExposedPasswordsReportComponent {\n  manageableCiphers: Cipher[];\n\n  constructor(\n    cipherService: CipherService,\n    auditService: AuditService,\n    modalService: ModalService,\n    organizationService: OrganizationService,\n    private route: ActivatedRoute,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      auditService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      this.manageableCiphers = await this.cipherService.getAll();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n\n  canManageCipher(c: CipherView): boolean {\n    return this.manageableCiphers.some((x) => x.id === c.id);\n  }\n}\n","<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"inactive2faReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"mt-4\" *ngIf=\"hasLoaded\">\n    <app-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noInactive2fa\" | i18n }}\n    </app-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <app-callout type=\"danger\" title=\"{{ 'inactive2faFound' | i18n }}\">\n        {{ \"inactive2faFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </app-callout>\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <table class=\"table table-hover table-list table-ciphers\">\n        <thead\n          class=\"tw-border-0 tw-border-b-2 tw-border-solid tw-border-secondary-300 tw-font-bold tw-text-muted\"\n          *ngIf=\"!isAdminConsoleActive\"\n        >\n          <tr>\n            <th></th>\n            <th>{{ \"name\" | i18n }}</th>\n            <th>{{ \"owner\" | i18n }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let c of ciphers\">\n            <td class=\"table-list-icon\">\n              <app-vault-icon [cipher]=\"c\"></app-vault-icon>\n            </td>\n            <td class=\"reduced-lh wrap\">\n              <a href=\"#\" appStopClick (click)=\"selectCipher(c)\" title=\"{{ 'editItem' | i18n }}\">{{\n                c.name\n              }}</a>\n              <ng-container *ngIf=\"!organization && c.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"c.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ c.subTitle }}</small>\n            </td>\n            <td>\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"c.organizationId\"\n                [organizationName]=\"c.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n            <td class=\"text-right\">\n              <a\n                bitBadge\n                href=\"{{ cipherDocs.get(c.id) }}\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                *ngIf=\"cipherDocs.has(c.id)\"\n              >\n                {{ \"instructions\" | i18n }}</a\n              >\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { InactiveTwoFactorReportComponent as BaseInactiveTwoFactorReportComponent } from \"../../../tools/reports/pages/inactive-two-factor-report.component\";\n\n@Component({\n  selector: \"app-inactive-two-factor-report\",\n  templateUrl: \"../../../tools/reports/pages/inactive-two-factor-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class InactiveTwoFactorReportComponent extends BaseInactiveTwoFactorReportComponent {\n  constructor(\n    cipherService: CipherService,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    logService: LogService,\n    passwordRepromptService: PasswordRepromptService,\n    organizationService: OrganizationService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      organizationService,\n      modalService,\n      logService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n}\n","<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"reusedPasswordsReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"mt-4\" *ngIf=\"hasLoaded\">\n    <app-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noReusedPasswords\" | i18n }}\n    </app-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <app-callout type=\"danger\" title=\"{{ 'reusedPasswordsFound' | i18n }}\">\n        {{ \"reusedPasswordsFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </app-callout>\n\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n\n      <table class=\"table table-hover table-list table-ciphers\">\n        <thead\n          class=\"tw-border-0 tw-border-b-2 tw-border-solid tw-border-secondary-300 tw-font-bold tw-text-muted\"\n          *ngIf=\"!isAdminConsoleActive\"\n        >\n          <tr>\n            <th></th>\n            <th>{{ \"name\" | i18n }}</th>\n            <th>{{ \"owner\" | i18n }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let c of ciphers\">\n            <td class=\"table-list-icon\">\n              <app-vault-icon [cipher]=\"c\"></app-vault-icon>\n            </td>\n            <td class=\"reduced-lh wrap\">\n              <ng-container *ngIf=\"!organization || canManageCipher(c); else cantManage\">\n                <a\n                  href=\"#\"\n                  appStopClick\n                  (click)=\"selectCipher(c)\"\n                  title=\"{{ 'editItem' | i18n }}\"\n                  >{{ c.name }}</a\n                >\n              </ng-container>\n              <ng-template #cantManage>\n                <span>{{ c.name }}</span>\n              </ng-template>\n              <ng-container *ngIf=\"!organization && c.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"c.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ c.subTitle }}</small>\n            </td>\n            <td>\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"c.organizationId\"\n                [organizationName]=\"c.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n            <td class=\"text-right\">\n              <span bitBadge variant=\"warning\">\n                {{ \"reusedXTimes\" | i18n: passwordUseMap.get(c.login.password) }}\n              </span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { ReusedPasswordsReportComponent as BaseReusedPasswordsReportComponent } from \"../../../tools/reports/pages/reused-passwords-report.component\";\n\n@Component({\n  selector: \"app-reused-passwords-report\",\n  templateUrl: \"../../../tools/reports/pages/reused-passwords-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class ReusedPasswordsReportComponent extends BaseReusedPasswordsReportComponent {\n  manageableCiphers: Cipher[];\n\n  constructor(\n    cipherService: CipherService,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    organizationService: OrganizationService,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      this.manageableCiphers = await this.cipherService.getAll();\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n\n  canManageCipher(c: CipherView): boolean {\n    return this.manageableCiphers.some((x) => x.id === c.id);\n  }\n}\n","<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"unsecuredWebsitesReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"mt-4\" *ngIf=\"hasLoaded\">\n    <app-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noUnsecuredWebsites\" | i18n }}\n    </app-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <app-callout type=\"danger\" title=\"{{ 'unsecuredWebsitesFound' | i18n }}\">\n        {{ \"unsecuredWebsitesFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </app-callout>\n\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <table class=\"table table-hover table-list table-ciphers\">\n        <thead\n          class=\"tw-border-0 tw-border-b-2 tw-border-solid tw-border-secondary-300 tw-font-bold tw-text-muted\"\n          *ngIf=\"!isAdminConsoleActive\"\n        >\n          <tr>\n            <th></th>\n            <th>{{ \"name\" | i18n }}</th>\n            <th>{{ \"owner\" | i18n }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let c of ciphers\">\n            <td class=\"table-list-icon\">\n              <app-vault-icon [cipher]=\"c\"></app-vault-icon>\n            </td>\n            <td class=\"reduced-lh wrap\">\n              <a href=\"#\" appStopClick (click)=\"selectCipher(c)\" title=\"{{ 'editItem' | i18n }}\">{{\n                c.name\n              }}</a>\n              <ng-container *ngIf=\"!organization && c.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"c.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ c.subTitle }}</small>\n            </td>\n            <td>\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"c.organizationId\"\n                [organizationName]=\"c.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { UnsecuredWebsitesReportComponent as BaseUnsecuredWebsitesReportComponent } from \"../../../tools/reports/pages/unsecured-websites-report.component\";\n\n@Component({\n  selector: \"app-unsecured-websites-report\",\n  templateUrl: \"../../../tools/reports/pages/unsecured-websites-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class UnsecuredWebsitesReportComponent extends BaseUnsecuredWebsitesReportComponent {\n  constructor(\n    cipherService: CipherService,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    organizationService: OrganizationService,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n}\n","<app-header></app-header>\n\n<bit-container>\n  <p>{{ \"weakPasswordsReportDesc\" | i18n }}</p>\n  <div *ngIf=\"!hasLoaded && loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </div>\n  <div class=\"mt-4\" *ngIf=\"hasLoaded\">\n    <app-callout type=\"success\" title=\"{{ 'goodNews' | i18n }}\" *ngIf=\"!ciphers.length\">\n      {{ \"noWeakPasswords\" | i18n }}\n    </app-callout>\n    <ng-container *ngIf=\"ciphers.length\">\n      <app-callout type=\"danger\" title=\"{{ 'weakPasswordsFound' | i18n }}\">\n        {{ \"weakPasswordsFoundReportDesc\" | i18n: (ciphers.length | number) : vaultMsg }}\n      </app-callout>\n      <bit-toggle-group\n        *ngIf=\"showFilterToggle && !isAdminConsoleActive\"\n        [selected]=\"filterOrgStatus$ | async\"\n        (selectedChange)=\"filterOrgToggle($event)\"\n        [attr.aria-label]=\"'addAccessFilter' | i18n\"\n      >\n        <ng-container *ngFor=\"let status of filterStatus\">\n          <bit-toggle [value]=\"status\">\n            {{ getName(status) }}\n            <span bitBadge variant=\"info\"> {{ getCount(status) }} </span>\n          </bit-toggle>\n        </ng-container>\n      </bit-toggle-group>\n      <table class=\"table table-hover table-list table-ciphers\">\n        <thead\n          class=\"tw-border-0 tw-border-b-2 tw-border-solid tw-border-secondary-300 tw-font-bold tw-text-muted\"\n          *ngIf=\"!isAdminConsoleActive\"\n        >\n          <tr>\n            <th></th>\n            <th>{{ \"name\" | i18n }}</th>\n            <th>{{ \"owner\" | i18n }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let c of ciphers\">\n            <td class=\"table-list-icon\">\n              <app-vault-icon [cipher]=\"c\"></app-vault-icon>\n            </td>\n            <td class=\"reduced-lh wrap\">\n              <ng-container *ngIf=\"!organization || canManageCipher(c); else cantManage\">\n                <a\n                  href=\"#\"\n                  appStopClick\n                  (click)=\"selectCipher(c)\"\n                  title=\"{{ 'editItem' | i18n }}\"\n                  >{{ c.name }}</a\n                >\n              </ng-container>\n              <ng-template #cantManage>\n                <span>{{ c.name }}</span>\n              </ng-template>\n              <ng-container *ngIf=\"!organization && c.organizationId\">\n                <i\n                  class=\"bwi bwi-collection\"\n                  appStopProp\n                  title=\"{{ 'shared' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"shared\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"c.hasAttachments\">\n                <i\n                  class=\"bwi bwi-paperclip\"\n                  appStopProp\n                  title=\"{{ 'attachments' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"sr-only\">{{ \"attachments\" | i18n }}</span>\n              </ng-container>\n              <br />\n              <small>{{ c.subTitle }}</small>\n            </td>\n            <td>\n              <app-org-badge\n                *ngIf=\"!organization\"\n                [disabled]=\"disabled\"\n                [organizationId]=\"c.organizationId\"\n                [organizationName]=\"c.organizationId | orgNameFromId: (organizations$ | async)\"\n                appStopProp\n              >\n              </app-org-badge>\n            </td>\n            <td class=\"text-right\">\n              <span bitBadge [variant]=\"passwordStrengthMap.get(c.id)[1]\">\n                {{ passwordStrengthMap.get(c.id)[0] | i18n }}\n              </span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n  </div>\n  <ng-template #cipherAddEdit></ng-template>\n</bit-container>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PasswordStrengthServiceAbstraction } from \"@bitwarden/common/tools/password-strength\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\n// eslint-disable-next-line no-restricted-imports\nimport { WeakPasswordsReportComponent as BaseWeakPasswordsReportComponent } from \"../../../tools/reports/pages/weak-passwords-report.component\";\n\n@Component({\n  selector: \"app-weak-passwords-report\",\n  templateUrl: \"../../../tools/reports/pages/weak-passwords-report.component.html\",\n})\n// eslint-disable-next-line rxjs-angular/prefer-takeuntil\nexport class WeakPasswordsReportComponent extends BaseWeakPasswordsReportComponent {\n  manageableCiphers: Cipher[];\n\n  constructor(\n    cipherService: CipherService,\n    passwordStrengthService: PasswordStrengthServiceAbstraction,\n    modalService: ModalService,\n    private route: ActivatedRoute,\n    organizationService: OrganizationService,\n    passwordRepromptService: PasswordRepromptService,\n    i18nService: I18nService,\n    syncService: SyncService,\n  ) {\n    super(\n      cipherService,\n      passwordStrengthService,\n      organizationService,\n      modalService,\n      passwordRepromptService,\n      i18nService,\n      syncService,\n    );\n  }\n\n  async ngOnInit() {\n    this.isAdminConsoleActive = true;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil, rxjs/no-async-subscribe\n    this.route.parent.parent.params.subscribe(async (params) => {\n      this.organization = await this.organizationService.get(params.organizationId);\n      this.manageableCiphers = await this.cipherService.getAll();\n      await super.ngOnInit();\n    });\n  }\n\n  getAllCiphers(): Promise<CipherView[]> {\n    return this.cipherService.getAllFromApiForOrganization(this.organization.id);\n  }\n\n  canManageCipher(c: CipherView): boolean {\n    return this.manageableCiphers.some((x) => x.id === c.id);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class IsPaidOrgGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private organizationService: OrganizationService,\n    private messagingService: MessagingService,\n    private dialogService: DialogService,\n  ) {}\n\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const org = await this.organizationService.get(route.params.organizationId);\n\n    if (org == null) {\n      return this.router.createUrlTree([\"/\"]);\n    }\n\n    if (org.isFreeOrg) {\n      // Users without billing permission can't access billing\n      if (!org.canEditSubscription) {\n        await this.dialogService.openSimpleDialog({\n          title: { key: \"upgradeOrganizationCloseSecurityGaps\" },\n          content: { key: \"upgradeOrganizationCloseSecurityGapsDesc\" },\n          acceptButtonText: { key: \"ok\" },\n          cancelButtonText: null,\n          type: \"info\",\n        });\n        return false;\n      } else {\n        const upgradeConfirmed = await this.dialogService.openSimpleDialog({\n          title: { key: \"upgradeOrganizationCloseSecurityGaps\" },\n          content: { key: \"upgradeOrganizationCloseSecurityGapsDesc\" },\n          acceptButtonText: { key: \"upgradeOrganization\" },\n          type: \"info\",\n          icon: \"bwi-arrow-circle-up\",\n        });\n        if (upgradeConfirmed) {\n          await this.router.navigate([\"organizations\", org.id, \"billing\", \"subscription\"], {\n            queryParams: { upgrade: true },\n          });\n        }\n      }\n    }\n\n    return !org.isFreeOrg;\n  }\n}\n","import { EventType } from \"@bitwarden/common/enums\";\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\n\nexport class EventExport {\n  message: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: string;\n  installationId: string;\n\n  constructor(event: EventView) {\n    this.message = event.humanReadableMessage;\n    this.appIcon = event.appIcon;\n    this.appName = event.appName;\n    this.userId = event.userId;\n    this.userName = event.userName;\n    this.userEmail = event.userEmail;\n    this.date = event.date;\n    this.ip = event.ip;\n    this.type = EventType[event.type];\n    this.installationId = event.installationId;\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport * as papa from \"papaparse\";\n\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\n\nimport { EventExport } from \"./event.export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class EventExportService {\n  async getEventExport(events: EventView[]): Promise<string> {\n    return papa.unparse(events.map((e) => new EventExport(e)));\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n}\n","import { Directive } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\n\nimport { EventResponse } from \"@bitwarden/common/models/response/event.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { EventView } from \"@bitwarden/common/models/view/event.view\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { EventService } from \"../../core\";\nimport { EventExportService } from \"../../tools/event-export\";\n\n@Directive()\nexport abstract class BaseEventsComponent {\n  loading = true;\n  loaded = false;\n  events: EventView[];\n  dirtyDates = true;\n  continuationToken: string;\n\n  abstract readonly exportFileName: string;\n\n  protected eventsForm = new FormGroup({\n    start: new FormControl(null),\n    end: new FormControl(null),\n  });\n\n  constructor(\n    protected eventService: EventService,\n    protected i18nService: I18nService,\n    protected exportService: EventExportService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected logService: LogService,\n    protected fileDownloadService: FileDownloadService,\n  ) {\n    const defaultDates = this.eventService.getDefaultDateFilters();\n    this.start = defaultDates[0];\n    this.end = defaultDates[1];\n  }\n\n  get start(): string {\n    return this.eventsForm.value.start;\n  }\n\n  set start(val: string) {\n    this.eventsForm.get(\"start\").setValue(val);\n  }\n\n  get end(): string {\n    return this.eventsForm.value.end;\n  }\n\n  set end(val: string) {\n    this.eventsForm.get(\"end\").setValue(val);\n  }\n\n  loadMoreEvents = async () => {\n    await this.loadEvents(false);\n  };\n\n  refreshEvents = async () => {\n    await this.loadEvents(true);\n  };\n\n  exportEvents = async () => {\n    if (this.dirtyDates) {\n      return;\n    }\n\n    this.loading = true;\n\n    const dates = this.parseDates();\n    if (dates == null) {\n      return;\n    }\n\n    let promise: Promise<any>;\n    try {\n      promise = this.export(dates[0], dates[1]);\n      await promise;\n    } catch (e) {\n      this.logService.error(`Handled exception: ${e}`);\n    }\n\n    promise = null;\n    this.loading = false;\n  };\n\n  loadEvents = async (clearExisting: boolean) => {\n    const dates = this.parseDates();\n    if (dates == null) {\n      return;\n    }\n\n    this.loading = true;\n    let events: EventView[] = [];\n    let promise: Promise<any>;\n    try {\n      promise = this.loadAndParseEvents(\n        dates[0],\n        dates[1],\n        clearExisting ? null : this.continuationToken,\n      );\n\n      const result = await promise;\n      this.continuationToken = result.continuationToken;\n      events = result.events;\n    } catch (e) {\n      this.logService.error(`Handled exception: ${e}`);\n    }\n\n    if (!clearExisting && this.events != null && this.events.length > 0) {\n      this.events = this.events.concat(events);\n    } else {\n      this.events = events;\n    }\n\n    this.dirtyDates = false;\n    this.loading = false;\n    promise = null;\n  };\n\n  protected abstract requestEvents(\n    startDate: string,\n    endDate: string,\n    continuationToken: string,\n  ): Promise<ListResponse<EventResponse>>;\n  protected abstract getUserName(r: EventResponse, userId: string): { name: string; email: string };\n\n  protected async loadAndParseEvents(\n    startDate: string,\n    endDate: string,\n    continuationToken: string,\n  ) {\n    const response = await this.requestEvents(startDate, endDate, continuationToken);\n\n    const events = await Promise.all(\n      response.data.map(async (r) => {\n        const userId = r.actingUserId == null ? r.userId : r.actingUserId;\n        const eventInfo = await this.eventService.getEventInfo(r);\n        const user = this.getUserName(r, userId);\n        const userName = user != null ? user.name : this.i18nService.t(\"unknown\");\n\n        return new EventView({\n          message: eventInfo.message,\n          humanReadableMessage: eventInfo.humanReadableMessage,\n          appIcon: eventInfo.appIcon,\n          appName: eventInfo.appName,\n          userId: userId,\n          userName: userName,\n          userEmail: user != null ? user.email : \"\",\n          date: r.date,\n          ip: r.ipAddress,\n          type: r.type,\n          installationId: r.installationId,\n          systemUser: r.systemUser,\n          serviceAccountId: r.serviceAccountId,\n        });\n      }),\n    );\n    return { continuationToken: response.continuationToken, events: events };\n  }\n\n  protected parseDates() {\n    let dates: string[] = null;\n    try {\n      dates = this.eventService.formatDateFilters(this.start, this.end);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"invalidDateRange\"),\n      );\n      return null;\n    }\n    return dates;\n  }\n\n  private async export(start: string, end: string) {\n    let continuationToken = this.continuationToken;\n    let events = [].concat(this.events);\n\n    while (continuationToken != null) {\n      const result = await this.loadAndParseEvents(start, end, continuationToken);\n      continuationToken = result.continuationToken;\n      events = events.concat(result.events);\n    }\n\n    const data = await this.exportService.getEventExport(events);\n    const fileName = this.exportService.getFileName(this.exportFileName, \"csv\");\n    this.fileDownloadService.download({\n      fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<app-header></app-header>\n\n<div class=\"tw-mb-4\" [formGroup]=\"eventsForm\">\n  <div class=\"tw-mt-4 tw-flex tw-items-center\">\n    <bit-form-field>\n      <bit-label>{{ \"from\" | i18n }}</bit-label>\n      <input\n        bitInput\n        type=\"datetime-local\"\n        placeholder=\"{{ 'startDate' | i18n }}\"\n        formControlName=\"start\"\n        (change)=\"dirtyDates = true\"\n      />\n    </bit-form-field>\n    <span class=\"tw-mx-2\">-</span>\n    <bit-form-field>\n      <bit-label>{{ \"to\" | i18n }}</bit-label>\n      <input\n        bitInput\n        type=\"datetime-local\"\n        placeholder=\"{{ 'endDate' | i18n }}\"\n        formControlName=\"end\"\n        (change)=\"dirtyDates = true\"\n      />\n    </bit-form-field>\n    <form>\n      <button\n        class=\"tw-mx-3 tw-mt-1\"\n        type=\"button\"\n        bitButton\n        bitFormButton\n        buttonType=\"primary\"\n        [bitAction]=\"refreshEvents\"\n      >\n        {{ \"update\" | i18n }}\n      </button>\n    </form>\n    <form>\n      <button\n        type=\"button\"\n        class=\"tw-mt-1\"\n        bitButton\n        bitFormButton\n        [bitAction]=\"exportEvents\"\n        [disabled]=\"dirtyDates\"\n      >\n        <span>{{ \"export\" | i18n }}</span>\n        <i class=\"bwi bwi-fw bwi-sign-in\" aria-hidden=\"true\"></i>\n      </button>\n    </form>\n  </div>\n</div>\n<ng-container *ngIf=\"!loaded\">\n  <i\n    class=\"bwi bwi-spinner bwi-spin tw-text-muted\"\n    title=\"{{ 'loading' | i18n }}\"\n    aria-hidden=\"true\"\n  ></i>\n  <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n</ng-container>\n<ng-container *ngIf=\"loaded\">\n  <p *ngIf=\"!events || !events.length\">{{ \"noEventsInList\" | i18n }}</p>\n  <bit-table *ngIf=\"events && events.length\">\n    <ng-container header>\n      <tr>\n        <th bitCell>{{ \"timestamp\" | i18n }}</th>\n        <th bitCell>{{ \"client\" | i18n }}</th>\n        <th bitCell>{{ \"member\" | i18n }}</th>\n        <th bitCell>{{ \"event\" | i18n }}</th>\n      </tr>\n    </ng-container>\n    <ng-template body>\n      <tr bitRow *ngFor=\"let e of events\" alignContent=\"top\">\n        <td bitCell class=\"tw-whitespace-nowrap\">{{ e.date | date: \"medium\" }}</td>\n        <td bitCell>\n          <span title=\"{{ e.appName }}, {{ e.ip }}\">{{ e.appName }}</span>\n        </td>\n        <td bitCell>\n          <span title=\"{{ e.userEmail }}\">{{ e.userName }}</span>\n        </td>\n        <td bitCell [innerHTML]=\"e.message\"></td>\n      </tr>\n    </ng-template>\n  </bit-table>\n  <button\n    type=\"button\"\n    bitButton\n    buttonType=\"primary\"\n    [bitAction]=\"loadMoreEvents\"\n    *ngIf=\"continuationToken\"\n  >\n    {{ \"loadMore\" | i18n }}\n  </button>\n</ng-container>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { concatMap, Subject, takeUntil } from \"rxjs\";\n\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { ProviderService } from \"@bitwarden/common/admin-console/abstractions/provider.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { EventSystemUser } from \"@bitwarden/common/enums\";\nimport { EventResponse } from \"@bitwarden/common/models/response/event.response\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { EventService } from \"../../../core\";\nimport { EventExportService } from \"../../../tools/event-export\";\nimport { BaseEventsComponent } from \"../../common/base.events.component\";\n\nconst EVENT_SYSTEM_USER_TO_TRANSLATION: Record<EventSystemUser, string> = {\n  [EventSystemUser.SCIM]: null, // SCIM acronym not able to be translated so just display SCIM\n  [EventSystemUser.DomainVerification]: \"domainVerification\",\n};\n\n@Component({\n  selector: \"app-org-events\",\n  templateUrl: \"events.component.html\",\n})\nexport class EventsComponent extends BaseEventsComponent implements OnInit, OnDestroy {\n  exportFileName = \"org-events\";\n  organizationId: string;\n  organization: Organization;\n\n  private orgUsersUserIdMap = new Map<string, any>();\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private apiService: ApiService,\n    private route: ActivatedRoute,\n    eventService: EventService,\n    i18nService: I18nService,\n    exportService: EventExportService,\n    platformUtilsService: PlatformUtilsService,\n    private router: Router,\n    logService: LogService,\n    private userNamePipe: UserNamePipe,\n    private organizationService: OrganizationService,\n    private organizationUserService: OrganizationUserService,\n    private providerService: ProviderService,\n    fileDownloadService: FileDownloadService,\n  ) {\n    super(\n      eventService,\n      i18nService,\n      exportService,\n      platformUtilsService,\n      logService,\n      fileDownloadService,\n    );\n  }\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        concatMap(async (params) => {\n          this.organizationId = params.organizationId;\n          this.organization = await this.organizationService.get(this.organizationId);\n          if (this.organization == null || !this.organization.useEvents) {\n            await this.router.navigate([\"/organizations\", this.organizationId]);\n            return;\n          }\n          await this.load();\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n  }\n\n  async load() {\n    const response = await this.organizationUserService.getAllUsers(this.organizationId);\n    response.data.forEach((u) => {\n      const name = this.userNamePipe.transform(u);\n      this.orgUsersUserIdMap.set(u.userId, { name: name, email: u.email });\n    });\n\n    if (this.organization.providerId != null) {\n      try {\n        const provider = await this.providerService.get(this.organization.providerId);\n        if (\n          provider != null &&\n          (await this.providerService.get(this.organization.providerId)).canManageUsers\n        ) {\n          const providerUsersResponse = await this.apiService.getProviderUsers(\n            this.organization.providerId,\n          );\n          providerUsersResponse.data.forEach((u) => {\n            const name = this.userNamePipe.transform(u);\n            this.orgUsersUserIdMap.set(u.userId, {\n              name: `${name} (${this.organization.providerName})`,\n              email: u.email,\n            });\n          });\n        }\n      } catch (e) {\n        this.logService.warning(e);\n      }\n    }\n\n    await this.refreshEvents();\n    this.loaded = true;\n  }\n\n  protected requestEvents(startDate: string, endDate: string, continuationToken: string) {\n    return this.apiService.getEventsOrganization(\n      this.organizationId,\n      startDate,\n      endDate,\n      continuationToken,\n    );\n  }\n\n  protected getUserName(r: EventResponse, userId: string) {\n    if (r.installationId != null) {\n      return `Installation: ${r.installationId}`;\n    }\n\n    if (userId != null) {\n      if (this.orgUsersUserIdMap.has(userId)) {\n        return this.orgUsersUserIdMap.get(userId);\n      }\n\n      if (r.providerId != null && r.providerId === this.organization.providerId) {\n        return {\n          name: this.organization.providerName,\n        };\n      }\n    }\n\n    if (r.systemUser != null) {\n      const systemUserI18nKey: string = EVENT_SYSTEM_USER_TO_TRANSLATION[r.systemUser];\n\n      if (systemUserI18nKey) {\n        return {\n          name: this.i18nService.t(systemUserI18nKey),\n        };\n      } else {\n        return {\n          name: EventSystemUser[r.systemUser],\n        };\n      }\n    }\n\n    if (r.serviceAccountId) {\n      return {\n        name: this.i18nService.t(\"machineAccount\") + \" \" + this.getShortId(r.serviceAccountId),\n      };\n    }\n\n    return null;\n  }\n\n  private getShortId(id: string) {\n    return id?.substring(0, 8);\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<ng-container *ngIf=\"homepage$ | async\">\n  <app-header></app-header>\n\n  <p bitTypography=\"body1\">{{ \"orgsReportsDesc\" | i18n }}</p>\n\n  <app-report-list [reports]=\"reports$ | async\"></app-report-list>\n</ng-container>\n\n<router-outlet></router-outlet>\n\n<div class=\"tw-mt-4\">\n  <a bitButton routerLink=\"./\" *ngIf=\"!(homepage$ | async)\">\n    <i class=\"bwi bwi-angle-left\" aria-hidden=\"true\"></i>\n    {{ \"backToReports\" | i18n }}\n  </a>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, NavigationEnd, Router } from \"@angular/router\";\nimport { filter, map, Observable, startWith, concatMap } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { ReportVariant, reports, ReportType, ReportEntry } from \"../../../tools/reports\";\n\n@Component({\n  selector: \"app-org-reports-home\",\n  templateUrl: \"reports-home.component.html\",\n})\nexport class ReportsHomeComponent implements OnInit {\n  reports$: Observable<ReportEntry[]>;\n  homepage$: Observable<boolean>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    private router: Router,\n  ) {}\n\n  ngOnInit() {\n    this.homepage$ = this.router.events.pipe(\n      filter((event) => event instanceof NavigationEnd),\n      map((event) => this.isReportsHomepageRouteUrl((event as NavigationEnd).urlAfterRedirects)),\n      startWith(this.isReportsHomepageRouteUrl(this.router.url)),\n    );\n\n    this.reports$ = this.route.params.pipe(\n      concatMap((params) => this.organizationService.get$(params.organizationId)),\n      map((org) => this.buildReports(org.isFreeOrg)),\n    );\n  }\n\n  private buildReports(upgradeRequired: boolean): ReportEntry[] {\n    const reportRequiresUpgrade = upgradeRequired\n      ? ReportVariant.RequiresUpgrade\n      : ReportVariant.Enabled;\n\n    return [\n      {\n        ...reports[ReportType.ExposedPasswords],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.ReusedPasswords],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.WeakPasswords],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.UnsecuredWebsites],\n        variant: reportRequiresUpgrade,\n      },\n      {\n        ...reports[ReportType.Inactive2fa],\n        variant: reportRequiresUpgrade,\n      },\n    ];\n  }\n\n  private isReportsHomepageRouteUrl(url: string): boolean {\n    return url.endsWith(\"/reports\");\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessReportingTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { ExposedPasswordsReportComponent } from \"../../../admin-console/organizations/tools/exposed-passwords-report.component\";\nimport { InactiveTwoFactorReportComponent } from \"../../../admin-console/organizations/tools/inactive-two-factor-report.component\";\nimport { ReusedPasswordsReportComponent } from \"../../../admin-console/organizations/tools/reused-passwords-report.component\";\nimport { UnsecuredWebsitesReportComponent } from \"../../../admin-console/organizations/tools/unsecured-websites-report.component\";\nimport { WeakPasswordsReportComponent } from \"../../../admin-console/organizations/tools/weak-passwords-report.component\";\nimport { IsPaidOrgGuard } from \"../guards/is-paid-org.guard\";\nimport { OrganizationPermissionsGuard } from \"../guards/org-permissions.guard\";\nimport { OrganizationRedirectGuard } from \"../guards/org-redirect.guard\";\nimport { EventsComponent } from \"../manage/events.component\";\n\nimport { ReportsHomeComponent } from \"./reports-home.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    canActivate: [OrganizationPermissionsGuard],\n    data: { organizationPermissions: canAccessReportingTab },\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        canActivate: [OrganizationRedirectGuard],\n        data: {\n          autoRedirectCallback: getReportRoute,\n        },\n        children: [], // This is required to make the auto redirect work,\n      },\n      {\n        path: \"reports\",\n        component: ReportsHomeComponent,\n        canActivate: [OrganizationPermissionsGuard],\n        data: {\n          titleId: \"reports\",\n        },\n        children: [\n          {\n            path: \"exposed-passwords-report\",\n            component: ExposedPasswordsReportComponent,\n            data: {\n              titleId: \"exposedPasswordsReport\",\n            },\n            canActivate: [IsPaidOrgGuard],\n          },\n          {\n            path: \"inactive-two-factor-report\",\n            component: InactiveTwoFactorReportComponent,\n            data: {\n              titleId: \"inactive2faReport\",\n            },\n            canActivate: [IsPaidOrgGuard],\n          },\n          {\n            path: \"reused-passwords-report\",\n            component: ReusedPasswordsReportComponent,\n            data: {\n              titleId: \"reusedPasswordsReport\",\n            },\n            canActivate: [IsPaidOrgGuard],\n          },\n          {\n            path: \"unsecured-websites-report\",\n            component: UnsecuredWebsitesReportComponent,\n            data: {\n              titleId: \"unsecuredWebsitesReport\",\n            },\n            canActivate: [IsPaidOrgGuard],\n          },\n          {\n            path: \"weak-passwords-report\",\n            component: WeakPasswordsReportComponent,\n            data: {\n              titleId: \"weakPasswordsReport\",\n            },\n            canActivate: [IsPaidOrgGuard],\n          },\n        ],\n      },\n      {\n        path: \"events\",\n        component: EventsComponent,\n        canActivate: [OrganizationPermissionsGuard],\n        data: {\n          titleId: \"eventLogs\",\n          organizationPermissions: (org: Organization) => org.canAccessEventLogs,\n        },\n      },\n    ],\n  },\n];\n\nfunction getReportRoute(organization: Organization): string {\n  if (organization.canAccessEventLogs) {\n    return \"events\";\n  }\n  if (organization.canAccessReports) {\n    return \"reports\";\n  }\n  return undefined;\n}\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrganizationReportingRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { LooseComponentsModule } from \"../../../shared\";\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { ReportsSharedModule } from \"../../../tools/reports\";\n\nimport { OrganizationReportingRoutingModule } from \"./organization-reporting-routing.module\";\nimport { ReportsHomeComponent } from \"./reports-home.component\";\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ReportsSharedModule,\n    OrganizationReportingRoutingModule,\n    LooseComponentsModule,\n  ],\n  declarations: [ReportsHomeComponent],\n})\nexport class OrganizationReportingModule {}\n"],"names":["filterOrgToggle","selectCipher","ExposedPasswordsReportComponent","constructor","cipherService","auditService","modalService","organizationService","route","passwordRepromptService","i18nService","syncService","super","ngOnInit","this","isAdminConsoleActive","parent","params","subscribe","organization","get","organizationId","manageableCiphers","getAll","getAllCiphers","getAllFromApiForOrganization","id","canManageCipher","c","some","x","load","InactiveTwoFactorReportComponent","logService","ReusedPasswordsReportComponent","UnsecuredWebsitesReportComponent","WeakPasswordsReportComponent","passwordStrengthService","IsPaidOrgGuard","router","messagingService","dialogService","canActivate","state","org","createUrlTree","isFreeOrg","canEditSubscription","openSimpleDialog","title","key","content","acceptButtonText","cancelButtonText","type","icon","navigate","queryParams","upgrade","EventExport","event","message","humanReadableMessage","appIcon","appName","userId","userName","userEmail","date","ip","installationId","EventExportService","getEventExport","events","map","e","getFileName","prefix","extension","now","Date","getFullYear","padNumber","getMonth","getDate","getHours","getMinutes","getSeconds","num","width","padCharacter","numString","toString","length","Array","join","BaseEventsComponent","eventService","exportService","platformUtilsService","fileDownloadService","loading","loaded","dirtyDates","eventsForm","start","end","loadMoreEvents","loadEvents","refreshEvents","exportEvents","dates","parseDates","promise","export","error","clearExisting","loadAndParseEvents","continuationToken","result","concat","defaultDates","getDefaultDateFilters","value","val","setValue","startDate","endDate","response","requestEvents","Promise","all","data","r","actingUserId","eventInfo","getEventInfo","user","getUserName","name","t","email","ipAddress","systemUser","serviceAccountId","formatDateFilters","showToast","fileName","exportFileName","download","blobData","blobOptions","EVENT_SYSTEM_USER_TO_TRANSLATION","SCIM","DomainVerification","EventsComponent","apiService","userNamePipe","organizationUserService","providerService","orgUsersUserIdMap","Map","destroy$","Subject","pipe","concatMap","useEvents","takeUntil","getAllUsers","forEach","u","transform","set","providerId","canManageUsers","getProviderUsers","providerName","warning","getEventsOrganization","has","systemUserI18nKey","getShortId","substring","ngOnDestroy","next","complete","ReportsHomeComponent","homepage$","filter","isReportsHomepageRouteUrl","urlAfterRedirects","startWith","url","reports$","get$","buildReports","upgradeRequired","reportRequiresUpgrade","RequiresUpgrade","Enabled","reports","ExposedPasswords","variant","ReusedPasswords","WeakPasswords","UnsecuredWebsites","Inactive2fa","endsWith","routes","path","organizationPermissions","children","pathMatch","autoRedirectCallback","canAccessEventLogs","canAccessReports","component","titleId","OrganizationReportingRoutingModule","forChild","OrganizationReportingModule"],"sourceRoot":""}